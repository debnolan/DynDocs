plotDataGamma()
plotDataGammaQ = function(probs = seq(0.05, 0.95, by = 0.05), bee){
distance = c(75  ,65,  40 , 60 , 50 , 55, 130,  45, 105, 140, 120  ,80  ,75,  60,  60,  35,  70,  35,  55,  90,
260, 175,  70 , 85 ,140, 120, 105,  90,  80,  65,  70,  50, 115, 100,  95,  85,  30,  10,  60,  35,
40,  55, 250, 300,  90)
ttime= c(4.0,  3.0,  1.0,  5.0,  1.0,  1.0,  1.0,  1.0,  5.0,  4.0,  5.0, 5.0,  5.0, 12.0, 11.5,  2.0,
2.0,  2.0,  2.0,  1.0 ,10.0,  1.0,  7.0,  7.0,  2.0,  1.0,  2.0,  3.0,  1.0,  1.0,  1.0,  1.0,
4.0,  4.0,  3.0,  3.0,  2.0,  2.0,  3.0,  3.0,  7.0,  3.0,  4.0, 5.0,  2.0)
Transit.Time= c(5.3 , 4.6 , 2.5,  8.3,  2.0,  1.8,  0.8,  2.2,  4.8,  2.9,  4.2, 6.3,  6.7, 20.0, 19.2,  5.7,
2.9,  5.7,  3.6,  1.1,  3.8,  0.6, 10.0,  8.2,  1.4,  0.8,  1.9,  3.3,  1.3,  1.5,  1.4,  2.0,
3.5,  4.0,  3.2,  3.5,  6.7, 20.0,  5.0,  8.6, 17.5,  5.5,  1.6,  1.7  ,2.2)
bee = data.frame(distance, ttime, Transit.Time)
dataQ = quantile(bee$Transit.Time, probs = probs)
gammaQ  = qgamma(probs, 1.61, 1/2.37)
plot(dataQ~gammaQ, xlim = c(-3,20), ylim = c(0,20), xlab= 'Theoretical Observations', ylab = 'Data Observations')
par(new=TRUE)
}
plotDataGammaQ = function(probs = seq(0.05, 0.95, by = 0.05), bee){
distance = c(75  ,65,  40 , 60 , 50 , 55, 130,  45, 105, 140, 120  ,80  ,75,  60,  60,  35,  70,  35,  55,  90,
260, 175,  70 , 85 ,140, 120, 105,  90,  80,  65,  70,  50, 115, 100,  95,  85,  30,  10,  60,  35,
40,  55, 250, 300,  90)
ttime= c(4.0,  3.0,  1.0,  5.0,  1.0,  1.0,  1.0,  1.0,  5.0,  4.0,  5.0, 5.0,  5.0, 12.0, 11.5,  2.0,
2.0,  2.0,  2.0,  1.0 ,10.0,  1.0,  7.0,  7.0,  2.0,  1.0,  2.0,  3.0,  1.0,  1.0,  1.0,  1.0,
4.0,  4.0,  3.0,  3.0,  2.0,  2.0,  3.0,  3.0,  7.0,  3.0,  4.0, 5.0,  2.0)
Transit.Time= c(5.3 , 4.6 , 2.5,  8.3,  2.0,  1.8,  0.8,  2.2,  4.8,  2.9,  4.2, 6.3,  6.7, 20.0, 19.2,  5.7,
2.9,  5.7,  3.6,  1.1,  3.8,  0.6, 10.0,  8.2,  1.4,  0.8,  1.9,  3.3,  1.3,  1.5,  1.4,  2.0,
3.5,  4.0,  3.2,  3.5,  6.7, 20.0,  5.0,  8.6, 17.5,  5.5,  1.6,  1.7  ,2.2)
bee = data.frame(distance, ttime, Transit.Time)
dataQ = quantile(bee$Transit.Time, probs = probs)
gammaQ  = qgamma(probs, 1.61, 1/2.37)
plot(dataQ~gammaQ, xlim = c(-3,20), ylim = c(0,20), xlab= 'Theoretical Observations', ylab = 'Data Observations')
par(new=TRUE)
}
plotDataGamma()
plotDataGammaQ()
plotDataNormQ = function(probs = seq(0.05, 0.95, by = 0.05), bee){
distance = c(75  ,65,  40 , 60 , 50 , 55, 130,  45, 105, 140, 120  ,80  ,75,  60,  60,  35,  70,  35,  55,  90,
260, 175,  70 , 85 ,140, 120, 105,  90,  80,  65,  70,  50, 115, 100,  95,  85,  30,  10,  60,  35,
40,  55, 250, 300,  90)
ttime= c(4.0,  3.0,  1.0,  5.0,  1.0,  1.0,  1.0,  1.0,  5.0,  4.0,  5.0, 5.0,  5.0, 12.0, 11.5,  2.0,
2.0,  2.0,  2.0,  1.0 ,10.0,  1.0,  7.0,  7.0,  2.0,  1.0,  2.0,  3.0,  1.0,  1.0,  1.0,  1.0,
4.0,  4.0,  3.0,  3.0,  2.0,  2.0,  3.0,  3.0,  7.0,  3.0,  4.0, 5.0,  2.0)
Transit.Time= c(5.3 , 4.6 , 2.5,  8.3,  2.0,  1.8,  0.8,  2.2,  4.8,  2.9,  4.2, 6.3,  6.7, 20.0, 19.2,  5.7,
2.9,  5.7,  3.6,  1.1,  3.8,  0.6, 10.0,  8.2,  1.4,  0.8,  1.9,  3.3,  1.3,  1.5,  1.4,  2.0,
3.5,  4.0,  3.2,  3.5,  6.7, 20.0,  5.0,  8.6, 17.5,  5.5,  1.6,  1.7  ,2.2)
bee = data.frame(distance, ttime, Transit.Time)
dataQ = quantile(bee$Transit.Time, probs = probs)
normQ = qnorm(probs, mean = mean(bee$Transit.Time), sd = sd(bee$Transit.Time))
plot(dataQ~normQ, pch=19, xlim = c(-3,20), ylim = c(0,20), xlab= 'Theoretical Observations', ylab = 'Data Observations')
}
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
plotDataGammaQ()
plotDataNormQ()
plotDataGammaQ()
shiny::runApp()
?legend
plotDataNormQ()
plotDataGammaQ()
?legend
?lty
shiny::runApp()
shiny::runApp()
shiny::runApp()
plot(x, dgamma(x, 1/2, 1), type="l",
ylim=c(0,2), ylab="Density",
main="Gamma Densities: shape=.5, 1, 1.5, 2, 3, 4;
scale = 1")
lines(x, dgamma(x, 1,1), col=2)
lines(x, dgamma(x, 1.5, 1), col=3)
lines(x, dgamma(x, 2, 1), col=4)
lines(x, dgamma(x, 3, 1), col=5)
lines(x, dgamma(x, 4, 1), col=6)
shiny::runApp('~/Desktop/DynDocs/Zillow')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
plotDataNormQ()
shiny::runApp()
shiny::runApp()
shiny::runApp()
<button id="NQQ" type="button" class="btn btn-default action-button">Normal QQ Plot</button>
<button id="GQQ" type="button" class="btn btn-default action-button">Gamma QQ Plot</button>
<p>
<div id="plotQQ" class="shiny-plot-output"
style="width: 100%; height: 400px"></div>
</p>
<p>
As you can see, a 45 degree line from the data extending from the lowest x value maps most closely with the Gamma QQ plot -- suggesting we use a Gamma Distribution.
</p>
# server.R
source("helper.R")
shinyServer(function(input, output) {
output$plotQQ <- renderPlot({
if(input$NQQ){
plotDataNormQ()
}
if (input$GQQ) {
plotDataNormQ()
plotDataGammaQ()
legend(x= 12,y = 6,
lty=c(1,1),
lwd=c(2.5,2.5), col=c("red","blue"), pch = 21,
legend = c("Normal QQ", "Gamma QQ"))
}
})
data <- reactive({
input$runSim
isolate({
dist <- switch(input$dist,
norm = rnorm,
unif = runif,
lnorm = rlnorm,
exp = rexp,
rnorm)
list(data = dist(input$n), name = input$dist, n = input$n)
})
})
##add if case to account for alpha and beta parameters - above and below
output$plot1 <- renderPlot({
if (input$cdf) {
plot(ecdf(data()$data),
main=paste('r', data()$name, '(', data()$n, ')', sep=''))
}
else {
hist(data()$data,
main=paste('r', data()$name, '(', data()$n, ')', sep=''))
}
})
plotNum <- reactiveValues(obs = 1)
observeEvent( input$plotDistr, {
plotNum$obs = input$num
})
output$plotGD <- renderPlot({
if (input$Gcdf){
plotCDF(n=plotNum$obs)
}
else{
plotDistr(n=plotNum$obs)
}
})
plotParams <- reactiveValues(alpha = 1, beta = 1)
observeEvent( input$makePlot, {
plotParams$alpha = input$alpha
plotParams$beta = input$beta
})
output$plot2 <- renderPlot({
graphGamma(alpha = plotParams$alpha, beta = plotParams$beta)
})
})
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
numeric("1")
as.numeric("1")
as.numeric("2")
shiny::runApp()
plot(x, dgamma(x, 1/2, 1), type="l",
ylim=c(0,2), ylab="Density",
main="Gamma Densities: shape=.5, 1, 1.5, 2, 3, 4;
scale = 1")
lines(x, dgamma(x, 1,1), col=2)
lines(x, dgamma(x, 1.5, 1), col=3)
lines(x, dgamma(x, 2, 1), col=4)
lines(x, dgamma(x, 3, 1), col=5)
lines(x, dgamma(x, 4, 1), col=6)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
graphGamma1 = function(alpha=.5, beta=1) {
y <- seq(0, 7, by=.001)
plot(x=y, y=dgamma(x, alpha, beta), col = "red", type = "l", xlab = "X",
ylab="Probability Density", main="Gamma Distribution", ylim=c(0,5))
lines(y, dgamma(y, 1,1), col=2)
}
graphGamma1
graphGamma1()
graphGamma()
lines(x, dgamma(x, as.numeric(alpha$a),1), col=3)
lines(x, dgamma(x, 1,1), col=3)
shiny::runApp()
shiny::runApp()
graphGamma1 = function(alpha=.5, beta=1) {
y <- seq(0, 7, by=.001)
plot(x=y, y=dgamma(x, alpha, beta), col = "black", type = "l", xlab = "X",
ylab="Probability Density", main="Gamma Distribution", ylim=c(0,5))
lines(y, dgamma(y, 1,1), col=2)
}
graphGamma1()
graphGamma4 = function(alpha=.5, beta=1) {
y <- seq(0, 7, by=.001)
plot(x=y, y=dgamma(x, alpha, beta), col = "black", type = "l", xlab = "X",
ylab="Probability Density", main="Gamma Distribution", ylim=c(0,5))
lines(y, dgamma(y, 4,1), col=6)
}
graphGamma4 = function(alpha=.5, beta=1) {
y <- seq(0, 7, by=.001)
plot(x=y, y=dgamma(x, alpha, beta), col = "black", type = "l", xlab = "X",
ylab="Probability Density", main="Gamma Distribution", ylim=c(0,5))
lines(y, dgamma(y, 1,1), col=2)
lines(y, dgamma(y, 1.5,1), col=3)
lines(y, dgamma(y, 2,1), col=4)
lines(y, dgamma(y, 3,1), col=5)
lines(y, dgamma(y, 4,1), col=6)
}
graphGamma4()
graphGamma = function(alpha=.5, beta=1) {
y <- seq(0, 7, by=.001)
plot(x=y, y=dgamma(x, alpha, beta), col = "black", type = "l", xlab = "X",
ylab="Probability Density", main="Gamma Distribution", ylim=c(0,5))
par(new=TRUE)
}
graphGamma1 = function(alpha=.5, beta=1) {
y <- seq(0, 7, by=.001)
plot(x=y, y=dgamma(x, alpha, beta), col = "black", type = "l", xlab = "X",
ylab="Probability Density", main="Gamma Distribution", ylim=c(0,5))
lines(y, dgamma(y, 1,1), col=2)
}
graphGamma1half = function(alpha=.5, beta=1) {
y <- seq(0, 7, by=.001)
plot(x=y, y=dgamma(x, alpha, beta), col = "black", type = "l", xlab = "X",
ylab="Probability Density", main="Gamma Distribution", ylim=c(0,5))
lines(y, dgamma(y, 1,1), col=2)
lines(y, dgamma(y, 1.5,1), col=3)
}
graphGamma2 = function(alpha=.5, beta=1) {
y <- seq(0, 7, by=.001)
plot(x=y, y=dgamma(x, alpha, beta), col = "black", type = "l", xlab = "X",
ylab="Probability Density", main="Gamma Distribution", ylim=c(0,5))
lines(y, dgamma(y, 1,1), col=2)
lines(y, dgamma(y, 1.5,1), col=3)
lines(y, dgamma(y, 2,1), col=4)
}
graphGamma3 = function(alpha=.5, beta=1) {
y <- seq(0, 7, by=.001)
plot(x=y, y=dgamma(x, alpha, beta), col = "black", type = "l", xlab = "X",
ylab="Probability Density", main="Gamma Distribution", ylim=c(0,5))
lines(y, dgamma(y, 1,1), col=2)
lines(y, dgamma(y, 1.5,1), col=3)
lines(y, dgamma(y, 2,1), col=4)
lines(y, dgamma(y, 3,1), col=5)
}
graphGamma4 = function(alpha=.5, beta=1) {
y <- seq(0, 7, by=.001)
plot(x=y, y=dgamma(x, alpha, beta), col = "black", type = "l", xlab = "X",
ylab="Probability Density", main="Gamma Distribution", ylim=c(0,5))
lines(y, dgamma(y, 1,1), col=2)
lines(y, dgamma(y, 1.5,1), col=3)
lines(y, dgamma(y, 2,1), col=4)
lines(y, dgamma(y, 3,1), col=5)
lines(y, dgamma(y, 4,1), col=6)
}
graphGamma1half()
graphGamma1 = function(alpha=.5, beta=1) {
y <- seq(0, 7, by=.001)
plot(x=y, y=dgamma(x, alpha, beta), col = "black", type = "l", xlab = "X",
ylab="Probability Density", main="Gamma Distribution", ylim=c(0,5), xlim=c(0,2))
lines(y, dgamma(y, 1,1), col=2)
}
graphGamma1()
graphGamma4 = function(alpha=.5, beta=1) {
y <- seq(0, 7, by=.001)
plot(x=y, y=dgamma(x, alpha, beta), col = "black", type = "l", xlab = "X",
ylab="Probability Density", main="Gamma Distribution", ylim=c(0,5))
lines(y, dgamma(y, 1,1), col=2)
lines(y, dgamma(y, 1.5,1), col=3)
lines(y, dgamma(y, 2,1), col=4)
lines(y, dgamma(y, 3,1), col=5)
lines(y, dgamma(y, 4,1), col=6)
}
graphGamma1()
graphGamma4()
graphGamma = function(alpha=.5, beta=1) {
y <- seq(0, 7, by=.001)
plot(x=y, y=dgamma(x, alpha, beta), col = "black", type = "l", xlab = "X",
ylab="Probability Density", main="Gamma Distribution", ylim=c(0,5))
par(new=TRUE)
}
graphGamma()
graphGamma1 = function(alpha=.5, beta=1) {
y <- seq(0, 7, by=.001)
plot(x=y, y=dgamma(x, alpha, beta), col = "black", type = "l", xlab = "X",
ylab="Probability Density", main="Gamma Distribution", ylim=c(0,5), xlim=c(0,3=2))
lines(y, dgamma(y, 1,1), col=2)
}
graphGamma1 = function(alpha=.5, beta=1) {
y <- seq(0, 7, by=.001)
plot(x=y, y=dgamma(x, alpha, beta), col = "black", type = "l", xlab = "X",
ylab="Probability Density", main="Gamma Distribution", ylim=c(0,5), xlim=c(0,2))
lines(y, dgamma(y, 1,1), col=2)
}
graphGamma1()
graphGamma1()
graphGamma4()
graphGamma = function(alpha=.5, beta=1) {
y <- seq(0, 7, by=.001)
plot(x=y, y=dgamma(x, alpha, beta), col = "black", type = "l", xlab = "X",
ylab="Probability Density", main="Gamma Distribution", ylim=c(0,5))
par(new=TRUE)
}
graphGamma1 = function(alpha=.5, beta=1) {
y <- seq(0, 7, by=.001)
plot(x=y, y=dgamma(x, alpha, beta), col = "black", type = "l", xlab = "X",
ylab="Probability Density", main="Gamma Distribution", ylim=c(0,5), xlim=c(0,5))
lines(y, dgamma(y, 1,1), col=2)
}
graphGamma1half = function(alpha=.5, beta=1) {
y <- seq(0, 7, by=.001)
plot(x=y, y=dgamma(x, alpha, beta), col = "black", type = "l", xlab = "X",
ylab="Probability Density", main="Gamma Distribution", ylim=c(0,5), xlim=c(0,5))
lines(y, dgamma(y, 1,1), col=2)
lines(y, dgamma(y, 1.5,1), col=3)
}
graphGamma2 = function(alpha=.5, beta=1) {
y <- seq(0, 7, by=.001)
plot(x=y, y=dgamma(x, alpha, beta), col = "black", type = "l", xlab = "X",
ylab="Probability Density", main="Gamma Distribution", ylim=c(0,5), xlim=c(0,5))
lines(y, dgamma(y, 1,1), col=2)
lines(y, dgamma(y, 1.5,1), col=3)
lines(y, dgamma(y, 2,1), col=4)
}
graphGamma3 = function(alpha=.5, beta=1) {
y <- seq(0, 7, by=.001)
plot(x=y, y=dgamma(x, alpha, beta), col = "black", type = "l", xlab = "X",
ylab="Probability Density", main="Gamma Distribution", ylim=c(0,5), xlim=c(0,5))
lines(y, dgamma(y, 1,1), col=2)
lines(y, dgamma(y, 1.5,1), col=3)
lines(y, dgamma(y, 2,1), col=4)
lines(y, dgamma(y, 3,1), col=5)
}
graphGamma4 = function(alpha=.5, beta=1) {
y <- seq(0, 7, by=.001)
plot(x=y, y=dgamma(x, alpha, beta), col = "black", type = "l", xlab = "X",
ylab="Probability Density", main="Gamma Distribution", ylim=c(0,5), xlim=c(0,5))
lines(y, dgamma(y, 1,1), col=2)
lines(y, dgamma(y, 1.5,1), col=3)
lines(y, dgamma(y, 2,1), col=4)
lines(y, dgamma(y, 3,1), col=5)
lines(y, dgamma(y, 4,1), col=6)
}
graphGamma = function(alpha=.5, beta=1) {
y <- seq(0, 7, by=.001)
plot(x=y, y=dgamma(x, alpha, beta), col = "black", type = "l", xlab = "X",
ylab="Probability Density", main="Gamma Distribution", ylim=c(0,5))
}
graphGamma()
graphGamma1()
graphGamma()
graphGamma1()
graphGamma()
graphGamma = function(alpha=.5, beta=1) {
y <- seq(0, 7, by=.001)
plot(x=y, y=dgamma(x, alpha, beta), col = "black", type = "l", xlab = "X",
ylab="Probability Density", main="Gamma Distribution", ylim=c(0,5))
}
graphGamma = function(alpha=.5, beta=1) {
y <- seq(0, 7, by=.001)
plot(x=y, y=dgamma(x, alpha, beta), col = "black", type = "l", xlab = "X",
ylab="Probability Density", main="Gamma Distribution", ylim=c(0,5), xlim=c(0,5)))
}
graphGamma = function(alpha=.5, beta=1) {
y <- seq(0, 7, by=.001)
plot(x=y, y=dgamma(x, alpha, beta), col = "black", type = "l", xlab = "X",
ylab="Probability Density", main="Gamma Distribution", ylim=c(0,5), xlim=c(0,5))
}
graphGamma()
graphGamma1()
graphGamma = function(alpha=.5, beta=1) {
y <- seq(0, 7, by=.001)
plot(x=y, y=dgamma(x, alpha, beta), col = "black", type = "l", xlab = "X",
ylab="Probability Density", main="Gamma Distribution, alpha = .5 and beta = 1", ylim=c(0,5), xlim=c(0,5))
}
graphGamma()
shiny::runApp()
graphGamma4()
shiny::runApp()
shiny::runApp()
x <- seq(0, 7, by=.001)
plot(x, dgamma(x, 1, 0.5), type="l",
ylim=c(0,2), ylab="Density",
main="Gamma Densities: shape=.5, 1, 1.5, 2, 3, 4;
scale = 1")
lines(x, dgamma(x, 1,1), col=2)
lines(x, dgamma(x, 1, 1.5), col=3)
lines(x, dgamma(x, 1, 2), col=4)
lines(x, dgamma(x, 1, 3), col=5)
lines(x, dgamma(x, 1, 4), col=6)
shiny::runApp()
graphbGamma = function(alpha=1, beta=.5) {
y <- seq(0, 7, by=.001)
plot(x=y, y=dgamma(x, alpha, beta), col = "black", type = "l", xlab = "X",
ylab="Probability Density", main="Gamma Distribution, Alpha = .5 and Beta = 1", ylim=c(0,2), xlim=c(0,7))
}
graphbGamma = function(alpha=1, beta=.5) {
y <- seq(0, 7, by=.001)
plot(x=y, y=dgamma(x, alpha, beta), col = "black", type = "l", xlab = "X",
ylab="Probability Density", main="Gamma Distribution, Alpha = .5 and Beta = 1", ylim=c(0,2), xlim=c(0,7))
}
graphbGamma1 = function(alpha=1, beta=.5) {
y <- seq(0, 7, by=.001)
plot(x=y, y=dgamma(x, alpha, beta), col = "black", type = "l", xlab = "X",
ylab="Probability Density", main="Gamma Distribution, Alpha = .5, 1 and Beta = 1", ylim=c(0,2), xlim=c(0,7))
lines(y, dgamma(y, 1,1), col=2)
}
graphbGamma1half = function(alpha=1, beta=1) {
y <- seq(0, 7, by=.001)
plot(x=y, y=dgamma(x, alpha, beta), col = "black", type = "l", xlab = "X",
ylab="Probability Density", main="Gamma Distribution, Alpha = .5, 1, 1.5 and Beta = 1", ylim=c(0,2), xlim=c(0,7))
lines(y, dgamma(y, 1,1), col=2)
lines(y, dgamma(y, 1,1.5), col=3)
}
graphbGamma2 = function(alpha=1, beta=.5) {
y <- seq(0, 7, by=.001)
plot(x=y, y=dgamma(x, alpha, beta), col = "black", type = "l", xlab = "X",
ylab="Probability Density", main="Gamma Distribution, Alpha = .5, 1, 1.5, 2 and Beta = 1", ylim=c(0,2), xlim=c(0,7))
lines(y, dgamma(y, 1,1), col=2)
lines(y, dgamma(y, 1,1.5), col=3)
lines(y, dgamma(y, 1,2), col=4)
}
graphbGamma3 = function(alpha=1, beta=.5) {
y <- seq(0, 7, by=.001)
plot(x=y, y=dgamma(x, alpha, beta), col = "black", type = "l", xlab = "X",
ylab="Probability Density", main="Gamma Distribution, Alpha = .5, 1, 1.5, 2, 3 and Beta = 1", ylim=c(0,2), xlim=c(0,7))
lines(y, dgamma(y, 1,1), col=2)
lines(y, dgamma(y, 1,1.5), col=3)
lines(y, dgamma(y, 1,2), col=4)
lines(y, dgamma(y, 1,3), col=5)
}
graphbGamma4 = function(alpha=1, beta=.5) {
y <- seq(0, 7, by=.001)
plot(x=y, y=dgamma(x, alpha, beta), col = "black", type = "l", xlab = "X",
ylab="Probability Density", main="Gamma Distribution, Alpha = .5, 1, 1.5, 2, 3, 4 and Beta = 1", ylim=c(0,2), xlim=c(0,7))
lines(y, dgamma(y, 1,1), col=2)
lines(y, dgamma(y, 1,1.5), col=2)
lines(y, dgamma(y, 1,2), col=3)
lines(y, dgamma(y, 1,3), col=4)
lines(y, dgamma(y, 1,4), col=5)
}
graphbGamma()
graphbGamma1()
graphbGamma1half()
graphbGamma1half = function(alpha=1, beta=.5) {
y <- seq(0, 7, by=.001)
plot(x=y, y=dgamma(x, alpha, beta), col = "black", type = "l", xlab = "X",
ylab="Probability Density", main="Gamma Distribution, Alpha = .5, 1, 1.5 and Beta = 1", ylim=c(0,2), xlim=c(0,7))
lines(y, dgamma(y, 1,1), col=2)
lines(y, dgamma(y, 1,1.5), col=3)
}
graphbGamma1half()
graphbGamma2()
graphbGamma3()
graphbGamma4()
shiny::runApp()
?paste
tit = paste("Gamma Distribution, Alpha =", alpha, "and Beta =", beta)
alpha=.5
beta=1
tit = paste("Gamma Distribution, Alpha =", alpha, "and Beta =", beta)
tit
graphGamma = function(alpha=.5, beta=1) {
y <- seq(0, 7, by=.001)
tit = paste("Gamma Distribution, Alpha =", alpha, "and Beta =", beta)
plot(x=y, y=dgamma(x, alpha, beta), col = "black", type = "l", xlab = "X",
ylab="Probability Density", main=tit, ylim=c(0,2), xlim=c(0,7))
}
graphGamma()
shiny::runApp()
graphGamma
graphGamma()
graphGamma1()
graphGamma5()
graphGamma4()
graphGamma(alpha =1, beta = .5)
graphGamma(alpha =1, beta = 6)
graphGamma(alpha =2, beta = 6)
graphGamma(alpha =2, beta = 3)
graphGamma(alpha =2, beta = 2)
graphGamma(alpha =2, beta = 1)
graphGamma(alpha =2, beta = .5)
shiny::runApp()
shiny::runApp()
shiny::runApp()
