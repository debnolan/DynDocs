i = a[2] +1
}
return(position)
}
positionProfit = function (pos,  stockPriceA, stockPriceB, m = mean(stockPriceA/stockPriceB)) {
stockPriceA= stockPriceA[pos]
stockPriceB= stockPriceB[pos]
unitOfA = 1/stockPriceA[1]
unitOfB = 1/stockPriceB[1]
if( (stockPriceA[1]/stockPriceB[1]) > m ) {
return( (( stockPriceA[1]*unitOfA - stockPriceA[2]*unitOfA)
+ ( stockPriceB[2]*unitOfB - stockPriceB[1]*unitOfB )) )
} else {
return((( stockPriceB[1]*unitOfB - stockPriceB[2]*unitOfB)
+ ( stockPriceB[2]*unitOfA - stockPriceB[1]*unitOfA )) )
}
}
getProfit.K = function ( x, y, k, m =mean (x/y), s= sd(x/y)) {
pos = unlist( getPositions(ratio=(x/y), k, m = mean(x/y)) )
if(length(pos) == 0) {
return (0)
} else {
return( sum( positionProfit( pos, x, y, m )) )
}
}
getBest.K = function (x, y, k.min, k.max, numK, m = mean(x/y), s = sd(x/y)){
k.increment=(k.max-k.min)/numK
k.now = k.min
winningK = k.min
maxProfit=0
while(k.now<k.max){
thisProfit = getProfit.K(x,y,k.now, m = m, s =s)
if(thisProfit > maxProfit){
winningK=k.now
maxProfit=thisProfit
}
k.now=k.now+k.increment
}
return(winningK = k.now)
}
separateData = function ( table ){
halfway= (nrow(table)/2 )
training.data= table[(1: halfway), ]
test.data= table[((halfway+1):nrow(table)),  ]
return( list( training.data, test.data) )
}
ATT = readData( "C://Users/WinginNicolie/DynDocs/PairTrading/ATT.csv", dateFormat= "%Y-%m-%d")
VERI = readData( "C://Users/WinginNicolie/DynDocs/PairTrading/VERIZON.csv", dateFormat= "%Y-%m-%d")
honda = readData( "http://real-chart.finance.yahoo.com/table.csv?s=HMC&d=2&e=13&f=2015&g=d&a=2&b=17&c=1980&ignore=.csv", dateFormat= "%Y-%m-%d")
united = readData("http://www.stat.berkeley.edu/users/nolan/data/stocks/united.csv", dateFormat= "%Y-%m-%d")
getProfit.K ( x=test$Adj.Close.A, y=test$Adj.Close.B, k= 4.303828 )
travel=  combine2stocks(honda, united)
plotRatio (travel$ratio, date=travel$Date, main = "Pairs Trading")
findNextPosition ( travel$ratio)
showPosition(pos = travel$Date[c(577, 681)], ratios = c(3.3,1.8) , radius = 100)
getPositions( travel$ratio)
positionProfit(pos = c(577,681), travel$Adj.Close.A, travel$Adj.Close.B )
getProfit.K ( x=travel$Adj.Close.A, y=travel$Adj.Close.B, k=1)
tra= separateData(travel)
test = tra[[2]]
train = tra[[1]]
atio = train$Adj.Close.A/train$Adj.Close.B
mean = mean(atio)
sd = sd(atio)
max_k = getBest.K( x = train$Adj.Close.A, y=train$Adj.Close.B, k.max= max( abs(( max(atio) - mean ) / sd ) ), k.min= 0.1 , numK=100)
getProfit.K ( x=test$Adj.Close.A, y=test$Adj.Close.B, k= 4.303828 )
getProfit.K ( x=test$Adj.Close.A, y=test$Adj.Close.B, k=2.1928)
getProfit.K ( x=test$Adj.Close.A, y=test$Adj.Close.B, k= 3.4137 )
toyota = readData( "http://real-chart.finance.yahoo.com/table.csv?s=TM&d=2&e=13&f=2015&g=d&a=7&b=18&c=1976&ignore=.cs", dateFormat= "%Y-%m-%d")
automobile=  combine2stocks(toyota, honda)
Plotc= plotRatio (automobile$ratio, date=automobile$Date, main = "Pairs Trading")
findNextPosition ( automobile$ratio)
Plotd= showPosition(pos = automobile$Date[c( 1 , 492 )], ratios = c( 20 ,4.6) , radius = 100)
getPositions( automobile$ratio)
positionProfit(pos = c( 1,492 ), automobile$Adj.Close.A, automobile$Adj.Close.B )
getProfit.K ( x=automobile$Adj.Close.A, y=automobile$Adj.Close.B, k=1 )
car = separateData(automobile)
test = car[[2]]
train = car[[1]]
atio = train$Adj.Close.A/train$Adj.Close.B
mean = mean(atio)
sd = sd(atio)
max_k = getBest.K( x = train$Adj.Close.A, y=train$Adj.Close.B, k.max= max( abs(( max(atio) - mean ) / sd ) ), k.min= 0.1 , numK=100)
getProfit.K ( x=test$Adj.Close.A, y=test$Adj.Close.B, k= 2.1928)
getProfit.K ( x=test$Adj.Close.A, y=test$Adj.Close.B, k= 3.4137 )
getProfit.K ( x=test$Adj.Close.A, y=test$Adj.Close.B, k= 3.3784 )
plotRatio (mobile$ratio, date=mobile$Date, main = "Pairs Trading")
mobile=  combine2stocks(VERI, ATT)
plotRatio (mobile$ratio, date=mobile$Date, main = "Pairs Trading")
findNextPosition ( mobile$ratio)
showPosition(pos = mobile$Date[c(1, 1879)], ratios = c(1.597,1.265) , radius = 250)
getPositions( mobile$ratio)
positionProfit(pos = c(1,1879), mobile$Adj.Close.A, mobile$Adj.Close.B )
getProfit.K ( x=mobile$Adj.Close.A, y=mobile$Adj.Close.B, k=1)
mob= separateData(mobile)
test = mob[[2]]
train = mob[[1]]
atio = train$Adj.Close.A/train$Adj.Close.B
mean = mean(atio)
sd = sd(atio)
max_k = getBest.K( x = train$Adj.Close.A, y=train$Adj.Close.B, k.max= max( abs(( max(atio) - mean ) / sd ) ), k.min= 0.1 , numK=100)
getProfit.K ( x=test$Adj.Close.A, y=test$Adj.Close.B, k= 2.1928 )
getProfit.K ( x=test$Adj.Close.A, y=test$Adj.Close.B, k= 2.6259 )
getProfit.K ( x=test$Adj.Close.A, y=test$Adj.Close.B, k= 1.5968 )
mobile=  combine2stocks(ATT, VERI)
plotRatio (mobile$ratio, date=mobile$Date, main = "Pairs Trading")
findNextPosition ( mobile$ratio)
showPosition(pos = mobile$Date[c(1, 1879)], ratios = c(1.597,1.265) , radius = 250)
getPositions( mobile$ratio)
positionProfit(pos = c(1,1927), mobile$Adj.Close.A, mobile$Adj.Close.B )
getProfit.K ( x=mobile$Adj.Close.A, y=mobile$Adj.Close.B, k=1)
mob= separateData(mobile)
test = mob[[2]]
train = mob[[1]]
atio = train$Adj.Close.A/train$Adj.Close.B
mean = mean(atio)
sd = sd(atio)
max_k = getBest.K( x = train$Adj.Close.A, y=train$Adj.Close.B, k.max= max( abs(( max(atio) - mean ) / sd ) ), k.min= 0.1 , numK=100)
mobile=  combine2stocks(VERI, ATT)
plotRatio (mobile$ratio, date=mobile$Date, main = "Pairs Trading")
findNextPosition ( mobile$ratio)
readData =
#
# A function to read the data and convert the Date column
# to an object of class Date.
# The date values are expected to be in a column named Date.
# We may want to relax this and allow the caller specify the
# column - by name or index.
function(fileName, dateFormat = c("%Y-%m-%d", "%Y/%m/%d"), ...)
{
data = read.csv(fileName, header = TRUE,
stringsAsFactors = FALSE, ...)
for(fmt in dateFormat) {
tmp = as.Date(data$Date, fmt)
if(all(!is.na(tmp))) {
data$Date = tmp
break
}
}
data[ order(data$Date), ]
}
combine2Stocks =
function(a, b, stockNames = c(deparse(substitute(a)),
deparse(substitute(b))))
{
rr = range(intersect(a$Date, b$Date))
a.sub = a[ a$Date >= rr[1] & a$Date <= rr[2],]
b.sub = b[ b$Date >= rr[1] & b$Date <= rr[2],]
structure(data.frame(a.sub$Date,
a.sub$Adj.Close,
b.sub$Adj.Close),
names = c("Date", stockNames))
}
plotRatio =
function(r, k = 1, date = seq(along = r), ...)
{
plot(date, r, type = "l", ...)
abline(h = c(mean(r),
mean(r) + k * sd(r),
mean(r) - k * sd(r)),
col = c("darkgreen", rep("red", 2*length(k))),
lty = "dashed")
}
findNextPosition =
# e.g.,  findNextPosition(r)
#        findNextPosition(r, 1174)
# Check they are increasing and correctly offset
function(ratio, startDay = 1, k = 1,
m = mean(ratio), s = sd(ratio))
{
up = m + k *s
down = m - k *s
if(startDay > 1)
ratio = ratio[ - (1:(startDay-1)) ]
isExtreme = ratio >= up | ratio <= down
if(!any(isExtreme))
return(integer())
start = which(isExtreme)[1]
backToNormal = if(ratio[start] > up)
ratio[ - (1:start) ] <= m
else
ratio[ - (1:start) ] >= m
# return either the end of the position or the index
# of the end of the vector.
# Could return NA for not ended, i.e. which(backToNormal)[1]
# for both cases. But then the caller has to interpret that.
end = if(any(backToNormal))
which(backToNormal)[1] + start
else
length(ratio)
c(start, end) + startDay - 1
}
showPosition =
function(days, ratios, radius = 100)
{
symbols(days, ratios, circles = rep(radius, 2),
fg = c("darkgreen", "red"), add = TRUE, inches = FALSE)
}
getPositions =
function(ratio, k = 1, m = mean(ratio), s = sd(ratio))
{
when = list()
cur = 1
while(cur < length(ratio)) {
tmp = findNextPosition(ratio, cur, k, m, s)
if(length(tmp) == 0)  # done
break
when[[length(when) + 1]] = tmp
if(is.na(tmp[2]) || tmp[2] == length(ratio))
break
cur = tmp[2]
}
when
}
showPosition =
function(days, ratio, radius = 70)
{
if(is.list(days))
days = unlist(days)
symbols(days, ratio[days],
circles = rep(radius, length(days)),
fg = c("darkgreen", "red"),
add = TRUE, inches = FALSE)
}
positionProfit =
#  r = overlap$att/overlap$verizon
#  k = 1.7
#  pos = getPositions(r, k)
#  positionProfit(pos[[1]], overlap$att, overlap$verizon)
function(pos, stockPriceA, stockPriceB,
ratioMean = mean(stockPriceA/stockPriceB),
p = .001, byStock = FALSE)
{
if(is.list(pos)) {
ans = sapply(pos, positionProfit,
stockPriceA, stockPriceB, ratioMean, p, byStock)
if(byStock)
rownames(ans) = c("A", "B", "commission")
return(ans)
}
# prices at the start and end of the positions
priceA = stockPriceA[pos]
priceB = stockPriceB[pos]
# how many units can we by of A and B with $1
unitsOfA = 1/priceA[1]
unitsOfB = 1/priceB[1]
# The dollar amount of how many units we would buy of A and B
# at the cost at the end of the position of each.
amt = c(unitsOfA * priceA[2], unitsOfB * priceB[2])
# Which stock are we selling
sellWhat = if(priceA[1]/priceB[1] > ratioMean) "A" else "B"
profit = if(sellWhat == "A")
c((1 - amt[1]),  (amt[2] - 1), - p * sum(amt))
else
c( (1 - amt[2]),  (amt[1] - 1),  - p * sum(amt))
if(byStock)
profit
else
sum(profit)
}
profits =
sapply(ks,
function(k) {
pos = getPositions(r.train, k)
sum(positionProfit(pos, train$att, train$verizon,
mean(r.train)))
})
getProfit.K =
function(k, x, y, m = mean(x/y), s = sd(x/y))
{
pos = getPositions(x/y, k, m = m, s = s)
if(length(pos) == 0)
0
else
sum(positionProfit(pos, x, y, m))
}
getBestK =
function(x, y, ks = seq(0.1, max.k, length = N), N = 100,
max.k = NA, m = mean(x/y), s = sd(x/y))
{
if(is.na(max.k)) {
r = x/y
max.k = max(r/sd(r))
}
pr.k = sapply(ks, getProfit.K, x, y, m = m, s = s)
median(ks[ pr.k == max(pr.k) ])
}
ATT = readData( "C://Users/WinginNicolie/DynDocs/PairTrading/ATT.csv", dateFormat= "%Y-%m-%d")
VERI = readData( "C://Users/WinginNicolie/DynDocs/PairTrading/VERIZON.csv", dateFormat= "%Y-%m-%d")
att = readData( "C://Users/WinginNicolie/DynDocs/PairTrading/ATT.csv", dateFormat= "%Y-%m-%d")
verizon = readData( "C://Users/WinginNicolie/DynDocs/PairTrading/VERIZON.csv", dateFormat= "%Y-%m-%d")
remove(ATT, VERI)
overlap = combine2Stocks(att, verizon)
names(overlap)
r = overlap$att/overlap$verizon
plotRatio(r)
k = .85
a = findNextPosition(r, k = k)
b = findNextPosition(r, a[2], k = k)
c = findNextPosition(r, b[2], k = k)
positionProfit( (1,1927), att,verizon, r)
positionProfit( 1, att,verizon, r)
cat("\014")
combine2Stocks =
function(a, b, stockNames = c(deparse(substitute(a)),
deparse(substitute(b))))
{
rr = range(intersect(a$Date, b$Date))
a.sub = a[ a$Date >= rr[1] & a$Date <= rr[2],]
b.sub = b[ b$Date >= rr[1] & b$Date <= rr[2],]
structure(data.frame(a.sub$Date,
a.sub$Adj.Close,
b.sub$Adj.Close),
names = c("Date", stockNames))
}
combine2stocks(ATT, VERI)
H = combine2stocks(ATT, VERI)
mobile=  combine2stocks(VERI, ATT)
remove(H)
mobile=  combine2stocks(VERI, ATT)
plotRatio (mobile$ratio, date=mobile$Date, main = "Pairs Trading")
findNextPosition ( mobile$ratio)
mobile=  combine2stocks(VERI, ATT)
plotRatio (mobile$ratio, date=mobile$Date, main = "Pairs Trading")
findNextPosition ( mobile$ratio)
positionProfit =
#  r = overlap$att/overlap$verizon
#  k = 1.7
#  pos = getPositions(r, k)
#  positionProfit(pos[[1]], overlap$att, overlap$verizon)
function(pos, stockPriceA, stockPriceB,
ratioMean = mean(stockPriceA/stockPriceB),
p = .001, byStock = FALSE)
{
if(is.list(pos)) {
ans = sapply(pos, positionProfit,
stockPriceA, stockPriceB, ratioMean, p, byStock)
if(byStock)
rownames(ans) = c("A", "B", "commission")
return(ans)
}
# prices at the start and end of the positions
priceA = stockPriceA[pos]
priceB = stockPriceB[pos]
# how many units can we by of A and B with $1
unitsOfA = 1/priceA[1]
unitsOfB = 1/priceB[1]
# The dollar amount of how many units we would buy of A and B
# at the cost at the end of the position of each.
amt = c(unitsOfA * priceA[2], unitsOfB * priceB[2])
# Which stock are we selling
sellWhat = if(priceA[1]/priceB[1] > ratioMean) "A" else "B"
profit = if(sellWhat == "A")
c((1 - amt[1]),  (amt[2] - 1), - p * sum(amt))
else
c( (1 - amt[2]),  (amt[1] - 1),  - p * sum(amt))
if(byStock)
profit
else
sum(profit)
}
positionProfit(pos = c(1,1879), mobile$Adj.Close.A, mobile$Adj.Close.B )
positionProfit = function (pos,  stockPriceA, stockPriceB, m = mean(stockPriceA/stockPriceB)) {
stockPriceA= stockPriceA[pos]
stockPriceB= stockPriceB[pos]
unitOfA = 1/stockPriceA[1]
unitOfB = 1/stockPriceB[1]
if( (stockPriceA[1]/stockPriceB[1]) > m ) {
return( (( stockPriceA[1]*unitOfA - stockPriceA[2]*unitOfA)
+ ( stockPriceB[2]*unitOfB - stockPriceB[1]*unitOfB )) )
} else {
return((( stockPriceB[1]*unitOfB - stockPriceB[2]*unitOfB)
+ ( stockPriceB[2]*unitOfA - stockPriceB[1]*unitOfA )) )
}
}
positionProfit(pos = c(1,1879), mobile$Adj.Close.A, mobile$Adj.Close.B )
positionProfit =
function(pos, stockPriceA, stockPriceB,
ratioMean = mean(stockPriceA/stockPriceB),
p = .001, byStock = FALSE)
{
if(is.list(pos)) {
ans = sapply(pos, positionProfit,
stockPriceA, stockPriceB, ratioMean, p, byStock)
if(byStock)
rownames(ans) = c("A", "B", "commission")
return(ans)
}
priceA = stockPriceA[pos]
priceB = stockPriceB[pos]
unitsOfA = 1/priceA[1]
unitsOfB = 1/priceB[1]
amt = c(unitsOfA * priceA[2], unitsOfB * priceB[2])
sellWhat = if(priceA[1]/priceB[1] > ratioMean) "A" else "B"
profit = if(sellWhat == "A")
c((1 - amt[1]),  (amt[2] - 1), - p * sum(amt))
else
c( (1 - amt[2]),  (amt[1] - 1),  - p * sum(amt))
if(byStock)
profit
else
sum(profit)
}
positionProfit(pos = c(1,1879), mobile$Adj.Close.A, mobile$Adj.Close.B )
showPosition = function(pos, ratios,
col = c("darkgreen", "red"),
radius = 100) {
symbols(x = pos, y = ratios, fg = col,
circles = rep(radius, 2), add = TRUE,
inches = FALSE)
}
showPosition(pos = mobile$Date[c(1, 1879)], ratios = c(1.597,1.265) , radius = 250)
showPosition(pos = mobile$Date[c(1, 1879)], ratios = c(1.597,1.265) , radius = 250)
showPosition =
function(days, ratio, radius = 70)
{
if(is.list(days))
days = unlist(days)
symbols(days, ratio[days],
circles = rep(radius, length(days)),
fg = c("darkgreen", "red"),
add = TRUE, inches = FALSE)
}
plotRatio (mobile$ratio, date=mobile$Date, main = "Pairs Trading")
showPosition(pos = mobile$Date[c(1, 1879)], ratios = c(1.597,1.265) , radius = 250)
showPosition(pos = mobile$Date[c(1, 1879)], ratios = c(1.597,1.265) , radius = 250)
showPosition( days = c(1, 1879), ratios = c(1.597,1.265) )
getProfit.K = function ( x, y, k, m =mean (x/y), s= sd(x/y)) {
pos = unlist( getPositions(ratio=(x/y), k, m = mean(x/y)) )
if(length(pos) == 0) {
return (0)
} else {
return( sum( positionProfit( pos, x, y, m )) )
}
}
getProfit.K ( x=automobile$Adj.Close.A, y=automobile$Adj.Close.B, k=1 )
getProfit.K =
function(k, x, y, m = mean(x/y), s = sd(x/y))
{
pos = getPositions(x/y, k, m = m, s = s)
if(length(pos) == 0)
0
else
sum(positionProfit(pos, x, y, m))
}
getProfit.K ( x=automobile$Adj.Close.A, y=automobile$Adj.Close.B, k=1 )
max_k = getBest.K( x = train$Adj.Close.A, y=train$Adj.Close.B, k.max= max( abs(( max(atio) - mean ) / sd ) ), k.min= 0.1 , numK=100)
getBestK =
function(x, y, ks = seq(0.1, max.k, length = N), N = 100,
max.k = NA, m = mean(x/y), s = sd(x/y))
{
if(is.na(max.k)) {
r = x/y
max.k = max(r/sd(r))
}
pr.k = sapply(ks, getProfit.K, x, y, m = m, s = s)
median(ks[ pr.k == max(pr.k) ])
}
max_k = getBest.K( x = train$Adj.Close.A, y=train$Adj.Close.B, k.max= max( abs(( max(atio) - mean ) / sd ) ), k.min= 0.1 , numK=100)
max_k = getBest.K( x = train$Adj.Close.A, y=train$Adj.Close.B, k.max= max( abs(( max(atio) - mean ) / sd ) ), k.min= 0.1 , numK=100)
max_k = getBest.K( x = train$Adj.Close.A, y=train$Adj.Close.B, k.max= max( abs(( max(atio) - mean ) / sd ) ), k.min= 0.1 , numK=100)
readData =
function(fileName, dateFormat = c("%Y-%m-%d", "%Y/%m/%d"), ...)
{
data = read.csv(fileName, header = TRUE,
stringsAsFactors = FALSE, ...)
for(fmt in dateFormat) {
tmp = as.Date(data$Date, fmt)
if(all(!is.na(tmp))) {
data$Date = tmp
break
}
}
data[ order(data$Date), ]
}
att = readData("../mypieceofthepackage/data-raw/ATT.csv")
att = readData("../data-raw/ATT.csv")
setwd("C:/Users/WinginNicolie/DynDocs/PairTrading")
att = readData("../data-raw/ATT.csv")
att = readData("..mypieceofthepackage/data-raw/ATT.csv")
att = readData("../ATT.csv")
setwd("C:/Users/WinginNicolie/DynDocs/PairTrading/mypieceofthepackage")
att = readData("../ATT.csv")
getwd()
setwd("C:/Users/WinginNicolie/DynDocs/PairTrading")
getwd()
setwd("C:/Users/WinginNicolie/DynDocs/PairTrading/mypieceofthepackage/data-raw")
att = readData("../ATT.csv")
verizon = readData("../mypieceofthepackage/data-raw/VERIZON.csv")
setwd("C:/Users/WinginNicolie/DynDocs/PairTrading/mypieceofthepackage/data")
verizon = readData("../mypieceofthepackage/data-raw/VERIZON.csv")
setwd("C:/Users/WinginNicolie/DynDocs/PairTrading/mypieceofthepackage/data-raw")
verizon = readData("../mypieceofthepackage/data-raw/VERIZON.csv")
att = readData("../ATT.csv")
att = readData("ATT.csv")
verizon = readData("VERIZON.csv")
verizon = readData("../data-raw/VERIZON.csv")
att = readData("../data-raw/ATT.csv")
southwest = readData("../mypieceofthepackage/data-raw/southwest.csv")
southwest = readData("../data-raw/southwest.csv")
setwd("C:/Users/WinginNicolie/DynDocs/PairTrading/mypieceofthepackage/data")
verizon = readData("../data-raw/VERIZON.csv")
united = readData("../data-raw/united.csv")
hilton = readData("../data-raw/hilton.csv")
hyatt = readData("../data-raw/hyatt.csv")
hershey = readData( "../data-raw/hershey.csv")
kellog = readData("../data-raw/kellog.csv")
toyota = readData( "../data-raw/toyota.csv")
inc = readData( "../data-raw/inc.csv")
ibm = readData( "../data-raw/ibm.csv")
gm = readData( "../data-raw/gm.csv")
stock = list( att, verizon, southwest,united,hilton,hyatt,hershey,kellog,toyota,inc,ibm,gm)
