shinyApp(ui, server)
source('~/Temp/shiny1/app.R')
?pdf
?tiff
?renderImage
?png
traf <- read.csv("http://www.stat.berkeley.edu/~rice/UCLA/flow-occ-table.txt")
nint <- nrow(traf) # number of 5-min intervals, 1740
traf$day <- rep(c("Fri", "Sat", "Sun", "Mon", "Tue", "Wed", "Thur"),
each = 24*12, length.out = nint)
traf$time <- paste(rep(0:23, each = 12, length.out = nint),
rep(c("00", "05", seq(10, 55, by = 5)), length.out =    nint), sep = ":")
cols <- matrix(c("#3d3d3d", "#969696", "#0868ac", "#4eb3d3", "#7d26cd", "#e066ff"), nrow = 3, byrow = TRUE)
speed1 <- with(traf, Flow1/Occ1)
speed2 <- with(traf, Flow2/Occ2)
speed3 <- with(traf, Flow3/Occ3)
spRange <- range(c(speed1, speed2, speed3), na.rm = TRUE)
ocRange <- range(traf[, c(1, 3, 5)])
flRange <- range(traf[, c(2, 4, 6)])
#-----------------------------------------------------------------------------#
#                trying some supervized clustering procedure                  #
#-----------------------------------------------------------------------------#
## This will probably go into a separate .R file to source
Categorize <- function(x) {
sum(x[!is.na(x)] < cutoff) <= k
}
flow  <- unlist(traf[, c(2, 4, 6)])
occ   <- unlist(traf[, c(1, 3, 5)])
speed <- c(speed1, speed2, speed3)
flnorm <- (flow  - mean(flow))/sd(flow)
ocnorm <- (occ   - mean(occ))/sd(occ)
spnorm <- (speed - mean(speed, na.rm = TRUE))/sd(speed, na.rm = TRUE)
names(flnorm) <- names(ocnorm) <- names(spnorm) <- as.character(1:nint)
d <- as.matrix(dist(data.frame(spnorm, ocnorm)))
diag(d) <- NA
d[is.na(speed), ] <- d[, is.na(speed)] <- NA
dmin <- apply(d, 1, function(x) {
if (all(is.na(x))) return(NA)
min(x[x != 0], na.rm = TRUE)
})
cutoff <- quantile(dmin, 0.9999, na.rm = TRUE)
k <- nint/100
res <- apply(d, 1, Categorize)
res[ocnorm < 0.5 | spnorm > 0]  <- FALSE
res[ocnorm > 1 & spnorm < -1] <- TRUE
cong <- as.data.frame(matrix(res, ncol = 3))
par(mfrow = c(1, 1))
plot(speed3, traf$Occ3, cex = 0.6, xlim = spRange, ylim = ocRange,
col = cols[3, ][cong[, 3] + 1], xlab = "speed", ylab = "Occupancy",
main = "Occupancy vs Speed", xaxt = "n")
points(speed2, traf$Occ2, cex = 0.6, xlim = spRange, ylim = ocRange,
col = cols[2, ][cong[, 2] + 1])
points(speed1,   traf$Occ1, cex = 0.6, xlim = spRange, ylim = ocRange,
col = cols[1, ][cong[, 1] + 1])
legend("topright", col = t(cols), bty = "n", pch = 16,
legend = c("left non-congestion", "left congestion",
"middle non-congestion", "middle congestion",
"right non-congestion", "right congestion"))
png("speedHist.png", res = 220)
par(mfrow = c(2, 2))
hist(speed1, breaks = 50, xlim = spRange, xlab = "", col = "lightyellow",
main = "Histogram of V, left lane")
hist(speed2, breaks = 50, xlim = spRange, xlab = "", col = "lightyellow",
main = "Histogram of V, middle lane")
hist(speed3, breaks = 50, xlim = spRange, xlab = "", col = "lightyellow",
main = "Histogram of V, right lane")
boxplot(speed1, speed2, speed3, col = cols[, 2], yaxt = "n",
main = "Boxplots of speed in three lanes")
axis(1, at = 1:3, labels = c("left", "middle", "right"))
dev.off()
png("speedHist.png", res = 220)
par(mfrow = c(2, 2))
hist(speed1, breaks = 50, xlim = spRange, xlab = "", col = "lightyellow",
main = "Histogram of V, left lane")
hist(speed2, breaks = 50, xlim = spRange, xlab = "", col = "lightyellow",
main = "Histogram of V, middle lane")
hist(speed3, breaks = 50, xlim = spRange, xlab = "", col = "lightyellow",
main = "Histogram of V, right lane")
boxplot(speed1, speed2, speed3, col = cols[, 2], yaxt = "n",
main = "Boxplots of speed in three lanes")
axis(1, at = 1:3, labels = c("left", "middle", "right"))
dev.off()
Categorize <- function(x) {
sum(x[!is.na(x)] < cutoff) <= k
}
flow  <- unlist(traf[, c(2, 4, 6)])
occ   <- unlist(traf[, c(1, 3, 5)])
speed <- c(speed1, speed2, speed3)
flnorm <- (flow  - mean(flow))/sd(flow)
ocnorm <- (occ   - mean(occ))/sd(occ)
spnorm <- (speed - mean(speed, na.rm = TRUE))/sd(speed, na.rm = TRUE)
names(flnorm) <- names(ocnorm) <- names(spnorm) <- as.character(1:nint)
d <- as.matrix(dist(data.frame(spnorm, ocnorm)))
diag(d) <- NA
d[is.na(speed), ] <- d[, is.na(speed)] <- NA
dmin <- apply(d, 1, function(x) {
if (all(is.na(x))) return(NA)
min(x[x != 0], na.rm = TRUE)
})
cutoff <- quantile(dmin, 0.9999, na.rm = TRUE)
k <- nint/100
res <- apply(d, 1, Categorize)
res[ocnorm < 0.5 | spnorm > 0]  <- FALSE
res[ocnorm > 1 & spnorm < -1] <- TRUE
cong <- as.data.frame(matrix(res, ncol = 3))
par(mfrow = c(1, 1))
plot(speed3, traf$Occ3, cex = 0.6, xlim = spRange, ylim = ocRange,
col = cols[3, ][cong[, 3] + 1], xlab = "speed", ylab = "Occupancy",
main = "Occupancy vs Speed", xaxt = "n")
points(speed2, traf$Occ2, cex = 0.6, xlim = spRange, ylim = ocRange,
col = cols[2, ][cong[, 2] + 1])
points(speed1,   traf$Occ1, cex = 0.6, xlim = spRange, ylim = ocRange,
col = cols[1, ][cong[, 1] + 1])
legend("topright", col = t(cols), bty = "n", pch = 16,
legend = c("left non-congestion", "left congestion",
"middle non-congestion", "middle congestion",
"right non-congestion", "right congestion"))
par(mfrow = c(2, 2))
hist(speed1, breaks = 50, xlim = spRange, xlab = "", col = "lightyellow",
main = "Histogram of V, left lane")
hist(speed2, breaks = 50, xlim = spRange, xlab = "", col = "lightyellow",
main = "Histogram of V, middle lane")
hist(speed3, breaks = 50, xlim = spRange, xlab = "", col = "lightyellow",
main = "Histogram of V, right lane")
boxplot(speed1, speed2, speed3, col = cols[, 2], yaxt = "n",
main = "Boxplots of speed in three lanes")
axis(1, at = 1:3, labels = c("left", "middle", "right"))
getwd()
uiOutput("plotui")
library(shiny)
uiOutput("plotui")
?brushOpts
?plotOutput
?renderUI
fluidRow(
column(width = 4, class = "well",
h4("Brush and double-click to zoom"),
plotOutput("plot1", height = 300,
dblclick = "plot1_dblclick",
brush = brushOpts(
id = "plot1_brush",
resetOnNew = TRUE
)
edgeR
??edgeR
library(shiny)
?brushOpts
shiny::runApp('Documents/Projects/DynDocs/templates/shinyExPlotClick1')
?nearPoints
shiny::runApp('Documents/Projects/DynDocs/templates/shinyExPlotClick1')
head(mtcars)
head(mtcars[c("wt", "mpg")])
shiny::runApp('Documents/Projects/DynDocs/templates/shinyExPlotClick1')
fluidPage(
fluidRow(
column(width = 6,
plotOutput("plot1", height = 350,
click = "plot1_click",
brush = brushOpts(
id = "plot1_brush"
)
),
actionButton("exclude_toggle", "Toggle points"),
actionButton("exclude_reset", "Reset")
)
shiny::runApp('Documents/Projects/DynDocs/templates/shinyExPlotClick1')
nearPoints
shiny::runApp('Documents/Projects/DynDocs/templates/shinyExPlotClick1')
nearPoints
scaleCoord
scaleCoords
?scaleCoords
require(shiny)
scaleCoords
panelMatch
?do.call
?apply
shiny::runApp('Documents/Projects/DynDocs/templates/shinyExPlotClick1')
sapply(mtcars, class)
shiny::runApp('Documents/Projects/DynDocs/templates/shinyExPlotClick1')
nearPointIndex <- function(data, point, threshold = 0.1) {
# data: matrix with 2 cols or a data frame
# point: coordinates of a point
# threshold: proportion of the range to be included
rangeX <- point[1] + c(-1, 1)*diff(range(data[, 1]))*threshold
rangeY <- point[2] + c(-1, 1)*diff(range(data[, 2]))*threshold
close <- which(rangeX[1] < data[, 1] & data[, 1] < rangeX[2] &
rangeY[1] < data[, 2] & data[, 2] < rangeY[2])
distclose <- sqrt((data[close, 1] - point[1])^2 + (data[close, 2] - point[2])^2)
return(close[which.min(distclose)])
}
vals$clicks <- c(4, 15)
vals <- list
vals$clicks <- c(4, 15)
vals <- list()
vals$clicks <- c(4, 15)
nearInd <- nearPointIndex(mtcars[c("wt", "mpg")], vals$clicks)
nearInd
shiny::runApp('Documents/Projects/DynDocs/templates/shinyExPlotClick1')
nearPointIndex <- function(data, point, threshold = 0.1) {
# data: matrix with 2 cols or a data frame
# point: coordinates of a point
# threshold: proportion of the range to be included
point <- as.numeric(point)
rangeX <- point[1] + c(-1, 1)*diff(range(data[, 1]))*threshold
rangeY <- point[2] + c(-1, 1)*diff(range(data[, 2]))*threshold
close <- which(rangeX[1] < data[, 1] & data[, 1] < rangeX[2] &
rangeY[1] < data[, 2] & data[, 2] < rangeY[2])
distclose <- sqrt((data[close, 1] - point[1])^2 + (data[close, 2] - point[2])^2)
return(close[which.min(distclose)])
}
shiny::runApp('Documents/Projects/DynDocs/templates/shinyExPlotClick1')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
setwd("~/Documents/Projects/DynDocs/trafficJams")
nearPointIndex <- function(data, point, threshold = 0.1) {#
	# finds the index (of a data row) of a nearest point#
	# data: matrix with 2 cols or a data frame#
	# point: coordinates of a point #
	# threshold: proportion of the range to be included#
	scaled <- scale(rbind(point, data))#
	data   <- scaled[-1, ]#
	point  <- scaled[1, ]#
	rangeX <- point[1] + c(-1, 1)*diff(range(data[, 1]))*threshold#
	rangeY <- point[2] + c(-1, 1)*diff(range(data[, 2]))*threshold#
	close <- which(rangeX[1] < data[, 1] & data[, 1] < rangeX[2] &#
	               rangeY[1] < data[, 2] & data[, 2] < rangeY[2])#
    distclose <- sqrt((data[close, 1] - point[1])^2 + (data[close, 2] - point[2])^2)               #
    return(close[which.min(distclose)])#
}#
#
PointsToLine <- function(x, y) {#
  # x, y: coordinates of two points (vectors of length 2)#
  slope <- (y[2] - y[1])/(x[2] - x[1])#
  icept <- y[1] - x[1]*slope#
  return(c(icept = icept, slope = slope))#
}
library(shiny)#
#
#traf <- read.csv("http://www.stat.berkeley.edu/~rice/UCLA/flow-occ-table.txt")#
traf <- read.csv("flow-occ-talbe.txt")#
nint <- nrow(traf) # number of 5-min intervals, 1740
getwd()
getwd()
read.csv("flow-occ-table.txt")
traf <- read.csv("flow-occ-table.txt")#
nint <- nrow(traf) # number of 5-min intervals, 1740
nint
day <- rep(c("Fri", "Sat", "Sun", "Mon", "Tue", "Wed", "Thur"), #
                each = 24*12, length.out = nint)#
time <- paste(rep(0:23, each = 12, length.out = nint), #
                   rep(c("00", "05", seq(10, 55, by = 5)), length.out =    nint), #
              sep = ":") #
#
# reshape data#
traf <- data.frame(Occ  = with(traf, c(Occ1, Occ2, Occ3)),#
                   Flow = with(traf, c(Flow1, Flow2, Flow3)),#
                   lane = rep(1:3, each = nint),#
                   day  = rep(day, 3), #
                   time = rep(time, 3))#
traf$Speed <- with(traf, Flow/Occ)
head(traf)
cols <- matrix(c("#3d3d3d", "#969696", "#0868ac", "#4eb3d3", "#7d26cd", "#e066ff"), #
               nrow = 3, byrow = TRUE)#
#
spRange <- range(traf$Speed)#
ocRange <- range(traf$Occ)#
flRange <- range(traf$Flow)
par(mfrow = c(2, 1))#
    plot(traf$Flow[traf$lane == 1], type = "l", xaxt = "n", #
         xlab = "time of the day", ylab = "Flow", col = cols[1, 1])#
    lines(traf$Flow[traf$lane == 2], col = cols[2, 1])#
    lines(traf$Flow[traf$lane == 3], col = cols[3, 1])
plot(traf$Occ[traf$lane == 1], type = "l", xaxt = "n", #
         xlab = "time of the day", ylab = "Occupancy", col = cols[1, 1])#
    lines(traf$Occ[traf$lane == 2], col = cols[2, 1])#
    lines(traf$Occ[traf$lane == 3], col = cols[3, 1])#
    legend("topleft", col = cols[, 1], legend = c("left", "middle", "right"), lwd = 2, cex = 0.8)
par(mfrow = c(1, 1))#
    plot(traf$Occ[traf$lane == 1], traf$Flow[traf$lane == 1], cex = 0.7, col = cols[1, 2], #
         xlim = ocRange, ylim = flRange, xlab = "Occupancy", ylab = "Flow",#
         main = "Flow vs Occupancy")#
    points(traf$Occ[traf$lane == 2], traf$Flow[traf$lane == 2], cex = 0.7, col = cols[2, 2])#
    points(traf$Occ[traf$lane == 3], traf$Flow[traf$lane == 3], cex = 0.7, col = cols[3, 2])#
    legend("topright", fill = cols[, 2], legend = c("left", "middle", "right"), bty = "n")
plot(Flow[lane == 1] ~ Occ[lane == 1], data = traf, cex = 0.7, col = cols[1, 2], #
         xlim = ocRange, ylim = flRange, xlab = "Occupancy", ylab = "Flow",#
         main = "Flow vs Occupancy")#
    points(Flow[lane == 2] ~ Occ[lane == 2], data = traf, cex = 0.7, col = cols[2, 2])#
    points(Flow[lane == 3] ~ Occ[lane == 3], data = traf, cex = 0.7, col = cols[3, 2])#
    legend("topright", fill = cols[, 2], legend = c("left", "middle", "right"), bty = "n")
lines(sort(traf$Occ[traf$lane == 1]), loess(Flow[order(Occ)] ~ sort(Occ), #
            data = traf[traf$lane == 1],#
                                 span = 0.2)$fitted, col = cols[1, 1])
lines(sort(traf$Occ[traf$lane == 1]), loess(Flow[order(Occ)] ~ sort(Occ), #
            data = traf[traf$lane == 1, ],#
                                 span = 0.2)$fitted, col = cols[1, 1])
lines(sort(Occ), loess(Flow[order(Occ)] ~ sort(Occ), #
                             data = traf[traf$lane == 1, ], span = 0.2)$fitted, #
            data = traf[traf$lane == 1, ], col = cols[1, 1])
lines(loess(Flow[order(Occ)] ~ sort(Occ), #
                  data = traf[traf$lane == 1, ], span = 0.2)$fitted ~ sort(Occ),  #
            data = traf[traf$lane == 1, ], col = cols[1, 1])
lines(loess(Flow[order(Occ)] ~ sort(Occ), span = 0.2)$fitted ~ sort(Occ),  #
            data = traf[traf$lane == 1, ], col = cols[1, 1])
plot(Flow[lane == 1] ~ Occ[lane == 1], data = traf, cex = 0.7, col = cols[1, 2], #
         xlim = ocRange, ylim = flRange, xlab = "Occupancy", ylab = "Flow",#
         main = "Flow vs Occupancy")#
    points(Flow[lane == 2] ~ Occ[lane == 2], data = traf, cex = 0.7, col = cols[2, 2])#
    points(Flow[lane == 3] ~ Occ[lane == 3], data = traf, cex = 0.7, col = cols[3, 2])#
    legend("topright", fill = cols[, 2], legend = c("left", "middle", "right"), bty = "n")
lines(loess(Flow[order(Occ)] ~ sort(Occ), span = 0.2)$fitted ~ sort(Occ),  #
            data = traf[traf$lane == 1, ], col = cols[1, 1])
plot(Flow[lane == 1] ~ Occ[lane == 1], data = traf, cex = 0.7, col = cols[1, 2], #
         xlim = ocRange, ylim = flRange, xlab = "Occupancy", ylab = "Flow",#
         main = "Flow vs Occupancy")#
    points(Flow[lane == 2] ~ Occ[lane == 2], data = traf, cex = 0.7, col = cols[2, 2])#
    points(Flow[lane == 3] ~ Occ[lane == 3], data = traf, cex = 0.7, col = cols[3, 2])#
    legend("topright", fill = cols[, 2], legend = c("left", "middle", "right"), bty = "n")
lines(loess(Flow ~ Occ, span = 0.2)$fitted ~ Occ,  #
            data = traf[traf$lane == 1, ][order(Occ), ], col = cols[1, 1])
lines(loess(Flow ~ Occ, span = 0.2)$fitted ~ Occ,  #
            data = traf[traf$lane == 1, ][order(traf$Occ), ], col = cols[1, 1])
lines(loess(Flow ~ Occ, span = 0.2)$fitted ~ Occ,  #
            data = traf[order(traf$Occ)[traf$lane == 1], ], col = cols[1, 1])
lines(sort(traf$Occ[traf$lane == 1]), #
            loess(Flow[order(Occ)] ~ sort(Occ), data = traf[traf$lane == 1, ],#
                  span = 0.2)$fitted, col = cols[1, 1]) #
      lines(sort(traf$Occ[traf$lane == 2]), #
            loess(Flow[order(Occ)] ~ sort(Occ), data = traf[traf$lane == 2, ],#
                  span = 0.2)$fitted, col = cols[2, 1]) #
      lines(sort(traf$Occ[traf$lane == 3]), #
            loess(Flow[order(Occ)] ~ sort(Occ), data = traf[traf$lane == 3, ],#
                  span = 0.2)$fitted, col = cols[3, 1])
par(mfrow = c(1, 1))#
    plot(Flow[lane == 1] ~ Occ[lane == 1], data = traf, cex = 0.7, col = cols[1, 2], #
         xlim = ocRange, ylim = flRange, xlab = "Occupancy", ylab = "Flow",#
         main = "Flow vs Occupancy")#
    points(Flow[lane == 2] ~ Occ[lane == 2], data = traf, cex = 0.7, col = cols[2, 2])#
    points(Flow[lane == 3] ~ Occ[lane == 3], data = traf, cex = 0.7, col = cols[3, 2])#
    legend("topright", fill = cols[, 2], legend = c("left", "middle", "right"), bty = "n")
lines(sort(traf$Occ[traf$lane == 1]), #
            loess(Flow[order(Occ)] ~ sort(Occ), data = traf[traf$lane == 1, ],#
                  span = 0.2)$fitted, col = cols[1, 1]) #
      lines(sort(traf$Occ[traf$lane == 2]), #
            loess(Flow[order(Occ)] ~ sort(Occ), data = traf[traf$lane == 2, ],#
                  span = 0.2)$fitted, col = cols[2, 1]) #
      lines(sort(traf$Occ[traf$lane == 3]), #
            loess(Flow[order(Occ)] ~ sort(Occ), data = traf[traf$lane == 3, ],#
                  span = 0.2)$fitted, col = cols[3, 1])
par(mfrow = c(1, 1))#
    plot(Flow ~ Occ, data = traf[lane == 1, ], cex = 0.7, col = cols[1, 2], #
         xlim = ocRange, ylim = flRange, xlab = "Occupancy", ylab = "Flow",#
         main = "Flow vs Occupancy")#
    points(Flow ~ Occ, data = traf[lane == 2, ], cex = 0.7, col = cols[2, 2])#
    points(Flow ~ Occ, data = traf[lane == 3, ], cex = 0.7, col = cols[3, 2])#
    legend("topright", fill = cols[, 2], legend = c("left", "middle", "right"), bty = "n")
plot(Flow ~ Occ, data = traf[traf$lane == 1, ], cex = 0.7, col = cols[1, 2], #
         xlim = ocRange, ylim = flRange, xlab = "Occupancy", ylab = "Flow",#
         main = "Flow vs Occupancy")#
    points(Flow ~ Occ, data = traf[traf$lane == 2, ], cex = 0.7, col = cols[2, 2])#
    points(Flow ~ Occ, data = traf[traf$lane == 3, ], cex = 0.7, col = cols[3, 2])#
    legend("topright", fill = cols[, 2], legend = c("left", "middle", "right"), bty = "n")
lines(sort(traf$Occ[traf$lane == 1]), #
            loess(Flow[order(Occ)] ~ sort(Occ), data = traf[traf$lane == 1, ],#
                  span = 0.2)$fitted, col = cols[1, 1]) #
      lines(sort(traf$Occ[traf$lane == 2]), #
            loess(Flow[order(Occ)] ~ sort(Occ), data = traf[traf$lane == 2, ],#
                  span = 0.2)$fitted, col = cols[2, 1]) #
      lines(sort(traf$Occ[traf$lane == 3]), #
            loess(Flow[order(Occ)] ~ sort(Occ), data = traf[traf$lane == 3, ],#
                  span = 0.2)$fitted, col = cols[3, 1])
plot(Occ ~ Speed, data = traf$traf[traf$lane == 3, ], xlim = spRange, ylim = ocRange, #
         cex = 0.6, col = cols[3, ], xlab = "speed", ylab = "Occupancy",#
         main = "Occupancy vs Speed", xaxt = "n")#
    points(Occ ~ Speed, data = traf$traf[traf$lane == 2, ], xlim = spRange, ylim = ocRange, #
           cex = 0.6, col = cols[2, ]) #[cong[, 2] + 1]) #
    points(Occ ~ Speed, data = traf$traf[traf$lane == 1, ], xlim = spRange, ylim = ocRange,#
           cex = 0.6, col = cols[1, ]) #[cong[, 1] + 1])
plot(Occ ~ Speed, data = traf[traf$lane == 3, ], xlim = spRange, ylim = ocRange, #
         cex = 0.6, col = cols[3, ], xlab = "speed", ylab = "Occupancy",#
         main = "Occupancy vs Speed", xaxt = "n")#
    points(Occ ~ Speed, data = traf[traf$lane == 2, ], xlim = spRange, ylim = ocRange, #
           cex = 0.6, col = cols[2, ]) #[cong[, 2] + 1]) #
    points(Occ ~ Speed, data = traf[traf$lane == 1, ], xlim = spRange, ylim = ocRange,#
           cex = 0.6, col = cols[1, ]) #[cong[, 1] + 1])
spRange <- range(traf$Speed, na.rm = TRUE)#
ocRange <- range(traf$Occ)#
flRange <- range(traf$Flow)
plot(Occ ~ Speed, data = traf[traf$lane == 3, ], xlim = spRange, ylim = ocRange, #
         cex = 0.6, col = cols[3, ], xlab = "speed", ylab = "Occupancy",#
         main = "Occupancy vs Speed", xaxt = "n")#
    points(Occ ~ Speed, data = traf[traf$lane == 2, ], xlim = spRange, ylim = ocRange, #
           cex = 0.6, col = cols[2, ]) #[cong[, 2] + 1]) #
    points(Occ ~ Speed, data = traf[traf$lane == 1, ], xlim = spRange, ylim = ocRange,#
           cex = 0.6, col = cols[1, ]) #[cong[, 1] + 1])
plot(Occ ~ Speed, data = traf[traf$lane == 3, ], xlim = spRange, ylim = ocRange, #
         cex = 0.6, col = cols[3, ], xlab = "speed", ylab = "Occupancy",#
         main = "Occupancy vs Speed", xaxt = "n")#
    points(Occ ~ Speed, data = traf[traf$lane == 2, ], xlim = spRange, ylim = ocRange, #
           cex = 0.6, col = cols[2, ]) #[cong[, 2] + 1]) #
    points(Occ ~ Speed, data = traf[traf$lane == 1, ], xlim = spRange, ylim = ocRange,#
           cex = 0.6, col = cols[1, ]) #[cong[, 1] + 1])
par(mfrow = c(3, 1))
plot(traf$Flow[traf$lane == 1],   pch = 16, cex = 0.5, col = cols[1, ][cong[, 1] + 1], #
         xaxt = "n", xlab = "time of day", ylab = "Flow")#
    points(traf$Flow[traf$lane == 2], pch = 16, cex = 0.5, col = cols[2, ][cong[, 2] + 1])#
    points(traf$Flow[traf$lane == 3], pch = 16, cex = 0.5, col = cols[3, ][cong[, 3] + 1])#
    axis(1, at = seq(0, nint, by = 12*3), labels = rep(seq(0, 21, by = 3), #
                                                       length.out = nint/(12*3) + 1))#
    axis(3, at = seq(24*12/2, nint, by = 24*12), tick = FALSE, line = -0.5,#
         labels = c("Friday", "Saturday", "Sunday", "Monday", "Tuesday", "Wednesday"))#
    plot(traf$Occ[traf$lane == 1],   pch = 16, cex = 0.5, col = cols[1, ][cong[, 1] + 1],#
         xaxt = "n", xlab = "time of day", ylab = "Occupancy")#
    points(traf$Occ[traf$lane == 2], pch = 16, cex = 0.5, col = cols[2, ][cong[, 2] + 1])#
    points(traf$Occ[traf$lane == 3], pch = 16, cex = 0.5, col = cols[3, ][cong[, 3] + 1])#
    legend("topleft", col = cols[, 1], legend = c("left", "middle", "right"), #
           lwd = 2)#
    axis(1, at = seq(0, nint, by = 12*3), labels = rep(seq(0, 21, by = 3), #
                                                       length.out = nint/(12*3) + 1))       #
    axis(3, at = seq(24*12/2, nint, by = 24*12), tick = FALSE, line = -0.5,#
         labels = c("Friday", "Saturday", "Sunday", "Monday", "Tuesday", "Wednesday"))#
    plot(traf$Speed[traf$lane == 1],   pch = 16, cex = 0.5, col = cols[1, ][cong[, 1] + 1],#
         xaxt = "n", xlab = "time of day", ylab = "Speed", yaxt = "n")#
    points(traf$Speed[traf$lane == 2], pch = 16, cex = 0.5, col = cols[2, ][cong[, 2] + 1])#
    points(traf$Speed[traf$lane == 3], pch = 16, cex = 0.5, col = cols[3, ][cong[, 3] + 1])#
    points(traf$Speed[traf$lane == 1], pch = 16, cex = 0.5, col = cols[1, ][cong[, 1] + 1])#
    axis(1, at = seq(0, nint, by = 12*3), labels = rep(seq(0, 21, by = 3), #
                                                       length.out = nint/(12*3) + 1))  #
    axis(3, at = seq(24*12/2, nint, by = 24*12), tick = FALSE, line = -0.5,#
         labels = c("Friday", "Saturday", "Sunday", "Monday", "Tuesday", "Wednesday"))
plot(traf$Flow[traf$lane == 1],   pch = 16, cex = 0.5, col = cols[1, ][cong[, 1] + 1], #
         xaxt = "n", xlab = "time of day", ylab = "Flow")
