geom_point() +
coord_cartesian(xlim = ranges$x, ylim = ranges$y)
})
# When a double-click happens, check if there's a brush on the plot.
# If so, zoom to the brush bounds; if not, reset the zoom.
observeEvent(input$plot1_dblclick, {
brush <- input$plot1_brush
if (!is.null(brush)) {
ranges$x <- c(brush$xmin, brush$xmax)
ranges$y <- c(brush$ymin, brush$ymax)
} else {
ranges$x <- NULL
ranges$y <- NULL
}
})
# -------------------------------------------------------------------
# Linked plots (middle and right)
ranges2 <- reactiveValues(x = NULL, y = NULL)
output$plot2 <- renderPlot({
ggplot(mtcars, aes(wt, mpg)) +
geom_point()
})
output$plot3 <- renderPlot({
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
coord_cartesian(xlim = ranges2$x, ylim = ranges2$y)
})
# When a double-click happens, check if there's a brush on the plot.
# If so, zoom to the brush bounds; if not, reset the zoom.
observe({
brush <- input$plot2_brush
if (!is.null(brush)) {
ranges2$x <- c(brush$xmin, brush$xmax)
ranges2$y <- c(brush$ymin, brush$ymax)
} else {
ranges2$x <- NULL
ranges2$y <- NULL
}
})
}
shinyApp(ui, server)
source('~/Temp/shiny1/app.R')
?pdf
?tiff
?renderImage
?png
traf <- read.csv("http://www.stat.berkeley.edu/~rice/UCLA/flow-occ-table.txt")
nint <- nrow(traf) # number of 5-min intervals, 1740
traf$day <- rep(c("Fri", "Sat", "Sun", "Mon", "Tue", "Wed", "Thur"),
each = 24*12, length.out = nint)
traf$time <- paste(rep(0:23, each = 12, length.out = nint),
rep(c("00", "05", seq(10, 55, by = 5)), length.out =    nint), sep = ":")
cols <- matrix(c("#3d3d3d", "#969696", "#0868ac", "#4eb3d3", "#7d26cd", "#e066ff"), nrow = 3, byrow = TRUE)
speed1 <- with(traf, Flow1/Occ1)
speed2 <- with(traf, Flow2/Occ2)
speed3 <- with(traf, Flow3/Occ3)
spRange <- range(c(speed1, speed2, speed3), na.rm = TRUE)
ocRange <- range(traf[, c(1, 3, 5)])
flRange <- range(traf[, c(2, 4, 6)])
#-----------------------------------------------------------------------------#
#                trying some supervized clustering procedure                  #
#-----------------------------------------------------------------------------#
## This will probably go into a separate .R file to source
Categorize <- function(x) {
sum(x[!is.na(x)] < cutoff) <= k
}
flow  <- unlist(traf[, c(2, 4, 6)])
occ   <- unlist(traf[, c(1, 3, 5)])
speed <- c(speed1, speed2, speed3)
flnorm <- (flow  - mean(flow))/sd(flow)
ocnorm <- (occ   - mean(occ))/sd(occ)
spnorm <- (speed - mean(speed, na.rm = TRUE))/sd(speed, na.rm = TRUE)
names(flnorm) <- names(ocnorm) <- names(spnorm) <- as.character(1:nint)
d <- as.matrix(dist(data.frame(spnorm, ocnorm)))
diag(d) <- NA
d[is.na(speed), ] <- d[, is.na(speed)] <- NA
dmin <- apply(d, 1, function(x) {
if (all(is.na(x))) return(NA)
min(x[x != 0], na.rm = TRUE)
})
cutoff <- quantile(dmin, 0.9999, na.rm = TRUE)
k <- nint/100
res <- apply(d, 1, Categorize)
res[ocnorm < 0.5 | spnorm > 0]  <- FALSE
res[ocnorm > 1 & spnorm < -1] <- TRUE
cong <- as.data.frame(matrix(res, ncol = 3))
par(mfrow = c(1, 1))
plot(speed3, traf$Occ3, cex = 0.6, xlim = spRange, ylim = ocRange,
col = cols[3, ][cong[, 3] + 1], xlab = "speed", ylab = "Occupancy",
main = "Occupancy vs Speed", xaxt = "n")
points(speed2, traf$Occ2, cex = 0.6, xlim = spRange, ylim = ocRange,
col = cols[2, ][cong[, 2] + 1])
points(speed1,   traf$Occ1, cex = 0.6, xlim = spRange, ylim = ocRange,
col = cols[1, ][cong[, 1] + 1])
legend("topright", col = t(cols), bty = "n", pch = 16,
legend = c("left non-congestion", "left congestion",
"middle non-congestion", "middle congestion",
"right non-congestion", "right congestion"))
png("speedHist.png", res = 220)
par(mfrow = c(2, 2))
hist(speed1, breaks = 50, xlim = spRange, xlab = "", col = "lightyellow",
main = "Histogram of V, left lane")
hist(speed2, breaks = 50, xlim = spRange, xlab = "", col = "lightyellow",
main = "Histogram of V, middle lane")
hist(speed3, breaks = 50, xlim = spRange, xlab = "", col = "lightyellow",
main = "Histogram of V, right lane")
boxplot(speed1, speed2, speed3, col = cols[, 2], yaxt = "n",
main = "Boxplots of speed in three lanes")
axis(1, at = 1:3, labels = c("left", "middle", "right"))
dev.off()
png("speedHist.png", res = 220)
par(mfrow = c(2, 2))
hist(speed1, breaks = 50, xlim = spRange, xlab = "", col = "lightyellow",
main = "Histogram of V, left lane")
hist(speed2, breaks = 50, xlim = spRange, xlab = "", col = "lightyellow",
main = "Histogram of V, middle lane")
hist(speed3, breaks = 50, xlim = spRange, xlab = "", col = "lightyellow",
main = "Histogram of V, right lane")
boxplot(speed1, speed2, speed3, col = cols[, 2], yaxt = "n",
main = "Boxplots of speed in three lanes")
axis(1, at = 1:3, labels = c("left", "middle", "right"))
dev.off()
Categorize <- function(x) {
sum(x[!is.na(x)] < cutoff) <= k
}
flow  <- unlist(traf[, c(2, 4, 6)])
occ   <- unlist(traf[, c(1, 3, 5)])
speed <- c(speed1, speed2, speed3)
flnorm <- (flow  - mean(flow))/sd(flow)
ocnorm <- (occ   - mean(occ))/sd(occ)
spnorm <- (speed - mean(speed, na.rm = TRUE))/sd(speed, na.rm = TRUE)
names(flnorm) <- names(ocnorm) <- names(spnorm) <- as.character(1:nint)
d <- as.matrix(dist(data.frame(spnorm, ocnorm)))
diag(d) <- NA
d[is.na(speed), ] <- d[, is.na(speed)] <- NA
dmin <- apply(d, 1, function(x) {
if (all(is.na(x))) return(NA)
min(x[x != 0], na.rm = TRUE)
})
cutoff <- quantile(dmin, 0.9999, na.rm = TRUE)
k <- nint/100
res <- apply(d, 1, Categorize)
res[ocnorm < 0.5 | spnorm > 0]  <- FALSE
res[ocnorm > 1 & spnorm < -1] <- TRUE
cong <- as.data.frame(matrix(res, ncol = 3))
par(mfrow = c(1, 1))
plot(speed3, traf$Occ3, cex = 0.6, xlim = spRange, ylim = ocRange,
col = cols[3, ][cong[, 3] + 1], xlab = "speed", ylab = "Occupancy",
main = "Occupancy vs Speed", xaxt = "n")
points(speed2, traf$Occ2, cex = 0.6, xlim = spRange, ylim = ocRange,
col = cols[2, ][cong[, 2] + 1])
points(speed1,   traf$Occ1, cex = 0.6, xlim = spRange, ylim = ocRange,
col = cols[1, ][cong[, 1] + 1])
legend("topright", col = t(cols), bty = "n", pch = 16,
legend = c("left non-congestion", "left congestion",
"middle non-congestion", "middle congestion",
"right non-congestion", "right congestion"))
par(mfrow = c(2, 2))
hist(speed1, breaks = 50, xlim = spRange, xlab = "", col = "lightyellow",
main = "Histogram of V, left lane")
hist(speed2, breaks = 50, xlim = spRange, xlab = "", col = "lightyellow",
main = "Histogram of V, middle lane")
hist(speed3, breaks = 50, xlim = spRange, xlab = "", col = "lightyellow",
main = "Histogram of V, right lane")
boxplot(speed1, speed2, speed3, col = cols[, 2], yaxt = "n",
main = "Boxplots of speed in three lanes")
axis(1, at = 1:3, labels = c("left", "middle", "right"))
getwd()
uiOutput("plotui")
library(shiny)
uiOutput("plotui")
?brushOpts
?plotOutput
?renderUI
fluidRow(
column(width = 4, class = "well",
h4("Brush and double-click to zoom"),
plotOutput("plot1", height = 300,
dblclick = "plot1_dblclick",
brush = brushOpts(
id = "plot1_brush",
resetOnNew = TRUE
)
edgeR
??edgeR
library(shiny)
?brushOpts
shiny::runApp('Documents/Projects/DynDocs/templates/shinyExPlotClick1')
?nearPoints
shiny::runApp('Documents/Projects/DynDocs/templates/shinyExPlotClick1')
head(mtcars)
head(mtcars[c("wt", "mpg")])
shiny::runApp('Documents/Projects/DynDocs/templates/shinyExPlotClick1')
fluidPage(
fluidRow(
column(width = 6,
plotOutput("plot1", height = 350,
click = "plot1_click",
brush = brushOpts(
id = "plot1_brush"
)
),
actionButton("exclude_toggle", "Toggle points"),
actionButton("exclude_reset", "Reset")
)
shiny::runApp('Documents/Projects/DynDocs/templates/shinyExPlotClick1')
nearPoints
shiny::runApp('Documents/Projects/DynDocs/templates/shinyExPlotClick1')
nearPoints
scaleCoord
scaleCoords
?scaleCoords
require(shiny)
scaleCoords
panelMatch
?do.call
?apply
shiny::runApp('Documents/Projects/DynDocs/templates/shinyExPlotClick1')
sapply(mtcars, class)
shiny::runApp('Documents/Projects/DynDocs/templates/shinyExPlotClick1')
nearPointIndex <- function(data, point, threshold = 0.1) {
# data: matrix with 2 cols or a data frame
# point: coordinates of a point
# threshold: proportion of the range to be included
rangeX <- point[1] + c(-1, 1)*diff(range(data[, 1]))*threshold
rangeY <- point[2] + c(-1, 1)*diff(range(data[, 2]))*threshold
close <- which(rangeX[1] < data[, 1] & data[, 1] < rangeX[2] &
rangeY[1] < data[, 2] & data[, 2] < rangeY[2])
distclose <- sqrt((data[close, 1] - point[1])^2 + (data[close, 2] - point[2])^2)
return(close[which.min(distclose)])
}
vals$clicks <- c(4, 15)
vals <- list
vals$clicks <- c(4, 15)
vals <- list()
vals$clicks <- c(4, 15)
nearInd <- nearPointIndex(mtcars[c("wt", "mpg")], vals$clicks)
nearInd
shiny::runApp('Documents/Projects/DynDocs/templates/shinyExPlotClick1')
nearPointIndex <- function(data, point, threshold = 0.1) {
# data: matrix with 2 cols or a data frame
# point: coordinates of a point
# threshold: proportion of the range to be included
point <- as.numeric(point)
rangeX <- point[1] + c(-1, 1)*diff(range(data[, 1]))*threshold
rangeY <- point[2] + c(-1, 1)*diff(range(data[, 2]))*threshold
close <- which(rangeX[1] < data[, 1] & data[, 1] < rangeX[2] &
rangeY[1] < data[, 2] & data[, 2] < rangeY[2])
distclose <- sqrt((data[close, 1] - point[1])^2 + (data[close, 2] - point[2])^2)
return(close[which.min(distclose)])
}
shiny::runApp('Documents/Projects/DynDocs/templates/shinyExPlotClick1')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
?symbols
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
shiny::runApp('Documents/Projects/DynDocs/trafficJams/traffic')
setwd("~/Documents/Projects/DynDocs/trafficJams/traffic")
load("../data/flow_occ.RData")
head(traf)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
