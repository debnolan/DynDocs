library("depmixS4")
install.packages("depmixS4")
library("depmixS4")
TUpdateRain <- function(PRain, PNotRain) {
return(PRain * 0.7 + PNotRain * 0.3)
}
}
if (observation == 0) {
#Weather HMM Example
#Problem:
#Using the obseravation of if there is an umbrella as an indicator
#to model the distribution of the weather is rain or not.
#Initial distribution:
#P(+r) = 0.5
#P(-r) = 0.5
#Transition probability table P(Rt+1|Rt):
#P(+r|+r) = 0.7
#P(-r|+r) = 0.3
#P(+r|-r) = 0.3
#P(-r|-r) = 0.7
#Observation prabability table P(Ut|Rt):
#P(+u|+r) = 0.9
#P(-u|+r) = 0.1
#P(+u|-r) = 0.2
#P(-u|-r) = 0.8
#Trasimission Update Function
TUpdateRain <- function(PRain, PNotRain) {
return(PRain * 0.7 + PNotRain * 0.3)
}
TUpdateNotRain <- function(PRain, PNotRain) {
return(PNotRain * 0.7 + PRain * 0.3)
}
#Observation Update Function
OUpdateRain <- function(PRain, PNotRain, observation) {
if (observation == 1) {
Pr = PRain * 0.9
Pnr = PNotRain * 0.2
}
if (observation == 0) {
Pr = PRain * 0.1
Pnr = PNotRain * 0.8
}
return(Pr/ (Pr + Pnr))
}
OUpdateNotRain <- function(PRain, PNotRain, observation) {
if (observation == 1) {
Pr = PRain * 0.9
Pnr = PNotRain * 0.2
}
if (observation == 0) {
Pr = PRain * 0.1
Pnr = PNotRain * 0.8
}
return(Pnr/ (Pr + Pnr))
}
pr1 = TUpdateRain(0.5, 0.5)
pr2 = TUpdateNotRain(0.5, 0.5)
pr1 = TUpdateRain(0.5, 0.5)  #0.5
pnr1 = TUpdateNotRain(0.5, 0.5)  #0.5
pr1 = OUpdateRain(pr1, pnr1, 1)
pr1 = TUpdateRain(0.5, 0.5)  #0.5
pnr1 = TUpdateNotRain(0.5, 0.5)  #0.5
Opr1 = OUpdateRain(pr1, pnr1, 1)
Opnr1 = OUpdateNotRain(pr1, pnr1, 1)
pr2 = TUpdateRain(Opr1, Opnr1)  #0.5
pnr2 = TUpdateNotRain(Opr1, Opnr1)  #0.5
Opr2 = OUpdateRain(pr2, pnr2, 1)
Opnr2 = OUpdateNotRain(pr2, pnr2, 1)
pr3 = TUpdateRain(Opr2, Opnr2)  #0.5
pnr3 = TUpdateNotRain(Opr2, Opnr2)  #0.5
Opr3 = OUpdateRain(pr3, pnr3, 0)
Opnr3 = OUpdateNotRain(pr3, pnr3, 0)
install.packages("shiny")
?renderText
??renderText
?paste
shinyServer(
function(input, output) {
output$text1 <- renderText({
paste("You have selected", input$var)
})
output$text2 <- renderText({
paste("You have chosen a range that goes from",
input$range[1], "to", input$range[2])
})
}
)
library(shiny)
library(shiny)
getwd()
setwd("/Users/Yue/Documents/stats_research/DynDocs/templates")
getwd()
runApp()
runApp(shiny)
runApp("shinyEx1")
runApp("shinyEx2")
runApp("census-app")
library(maps)
install.packages("maps")
library("maps", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("mapproj")
library("mapproj", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
runApp("census-app")
runApp("shinyEx4")
install.packages("quantmod")
library("quantmod", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
runApp("shinyEx4")
sunApp("shinyEx4")
runApp("shinyEx4")
install.packages("HMM")
library("HMM", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
?initHMM
?arima
