<<<<<<< HEAD
train = list()
test = list()
train$images = read.csv("mnistCSV/trainImages.csv", header = F)
setwd("~/workspace/NaiveBayes")
train$images = read.csv("mnistCSV/trainImages.csv", header = F)
train$labels = read.csv("mnistCSV/trainLabels.csv", header = F)
test$images = read.csv("mnistCSV/testImages.csv", header = F)
test$labels = read.csv("mnistCSV/testLabels.csv", header = F)
trainSorted = list()
trainSorted$zero = train$images[which(train$labels==0),]
trainSorted$one = train$images[which(train$labels==1),]
trainSorted$two = train$images[which(train$labels==2),]
trainSorted$three = train$images[which(train$labels==3),]
trainSorted$four = train$images[which(train$labels==4),]
trainSorted$five = train$images[which(train$labels==5),]
trainSorted$six = train$images[which(train$labels==6),]
trainSorted$seven = train$images[which(train$labels==7),]
trainSorted$eight = train$images[which(train$labels==8),]
trainSorted$nine = train$images[which(train$labels==9),]
testSorted  = list()
testSorted$zero = test$images[which(test$labels==0),]
testSorted$one = test$images[which(test$labels==1),]
testSorted$two = test$images[which(test$labels==2),]
testSorted$three = test$images[which(test$labels==3),]
testSorted$four = test$images[which(test$labels==4),]
testSorted$five = test$images[which(test$labels==5),]
testSorted$six = test$images[which(test$labels==6),]
testSorted$seven = test$images[which(test$labels==7),]
testSorted$eight = test$images[which(test$labels==8),]
testSorted$nine = test$images[which(test$labels==9),]
trainPrior = sapply(trainSorted, function(x) length(x[,1])/60000)
testPrior = sapply(testSorted, function(x) length(x[,1])/0000)
trainMean = list()
for (i in 1:10){
trainMean[[i]] = apply(trainSorted[[i]],2,mean)/255
}
testMean = list()
for (i in 1:10){
testMean[[i]] = apply(testSorted[[i]],2,mean)/255
}
for (i in 1:784){
if (ooz[i] >= 0.5){
ooz[i] = 1
}else{
ooz[i] = 0
}
}
trainMean
ooz = trainMean[1]
for (i in 1:784){
if (ooz[i] >= 0.5){
ooz[i] = 1
}else{
ooz[i] = 0
}
}
ooz
for (i in 1:784){
if (ooz[i] >= 0.5){
ooz[i] = 1
}else{
ooz[i] = 0
}
}
ooz
ooz = trainMean[[1]]
ooz
for (i in 1:784){
if (ooz[i] >= 0.5){
ooz[i] = 1
}else{
ooz[i] = 0
}
}
ooz
save.image("~/workspace/NaiveBayes/data.RData")
ooz
ooz[1]
ooz[1] ==1
ooz[1] ==0
paste(ooz[1] ==0)
ooz[[1]]
int(ooz)]
int(ooz)
as.integer(ooz)
ooz = as.integer(ooz)
ooz
trainSorted
testSorted[[1]]
testSorted[[1]][1]
testSorted[[1]][,1]
testSorted[[1]][1,]
ooz = testSorted[[1]][1,]
for (i in 1:784){
if (ooz[i] >= 0.5){
ooz[i] = 1
}else{
ooz[i] = 0
}
}
ooz = as.integer(ooz)
ooz
log(0.1)
?function
binom(1,0.2)
binomial(1,0.2)
prob = 1:784
for (i in 1:784){
if (handwritten[i] == 0){
prob[i] = 1-trainMean[i]
}else{
prob[i] = trainMean[i]
}
}
naiveBayes = function(handWritten){
prob = 1:784
for (i in 1:784){
if (handwritten[i] == 0){
prob[i] = 1-trainMean[i]
}else{
prob[i] = trainMean[i]
}
}
}
naiveBayes = function(handWritten){
prob = 1:784
for (i in 1:784){
if (handwritten[i] == 0){
prob[i] = 1-trainMean[i]
}else{
prob[i] = trainMean[i]
}
}
return(prob)
}
naiveBayes(ooz)
naiveBayes = function(handWritten){
prob = 1:784
for (i in 1:784){
if (handWritten[i] == 0){
prob[i] = 1-trainMean[i]
}else{
prob[i] = trainMean[i]
}
}
return(prob)
}
naiveBayes(ooz)
trainMean
naiveBayes = function(handWritten){
prob = 1:784
for (i in 1:784){
if (handWritten[i] == 0){
prob[i] = 1-as.numeric(trainMean[i])
}else{
prob[i] = as.numeric(trainMean[i])
}
}
return(prob)
}
naiveBayes(ooz)
trainMean
as.numeric(trainMean)
trainMean[1]
length(trainMean)
trainMean[1]
trainMean[[1]]
trainMean[[1]]
as.numeric(trainMean[[1]])
naiveBayes = function(handWritten){
prob = list()
for (i in 1:784){
for (j in 1:length(trainMean)){
if (handWritten[i] == 0){
prob[j][i] = 1-as.numeric(trainMean[[j]][[i])
}else{
prob[j][i] = as.numeric(trainMean[[j]][i])
}
}
}
return(prob)
}
naiveBayes = function(handWritten){
prob = list()
for (i in 1:784){
for (j in 1:length(trainMean)){
if (handWritten[i] == 0){
prob[j][i] = 1-as.numeric(trainMean[[j]][[i])
}else{
prob[j][i] = as.numeric(trainMean[[j]][i])
}
}
}
return(prob)
}
naiveBayes = function(handWritten){
prob = list()
for (i in 1:784){
for (j in 1:length(trainMean)){
if (handWritten[i] == 0){
prob[j][i] = 1-as.numeric(trainMean[[j]][[i])
}else{
naiveBayes = function(handWritten){
prob = list()
for (i in 1:784){
for (j in 1:length(trainMean)){
if (handWritten[i] == 0){
prob[j][i] = 1-as.numeric(trainMean[[j]][i])
}else{
prob[j][i] = as.numeric(trainMean[[j]][i])
}
}
}
return(prob)
}
naiveBayes(ooz)
naiveBayes = function(handWritten){
prob = list()
for (i in 1:length(trainMean)){
for (j in 1:784){
if (handWritten[j] == 0){
prob[i][j] = 1 - as.numeric(trainMean[[i]][j])
}else{
prob[i][j] = as.numeric(trainMean[[i]][j])
}
}
}
return(prob)
}
naiveBayes(ooz)
prob = list(1:784,1:784,1:784,1:784,1:784,1:784,1:784,1:784,1:784,1:784)
rm(prob)
naiveBayes = function(handWritten){
prob = list(1:784,1:784,1:784,1:784,1:784,1:784,1:784,1:784,1:784,1:784)
for (i in 1:length(trainMean)){
for (j in 1:784){
if (handWritten[j] == 0){
prob[i][j] = 1 - as.numeric(trainMean[[i]][j])
}else{
prob[i][j] = as.numeric(trainMean[[i]][j])
}
}
}
return(prob)
}
prob = list(1:784,1:784,1:784,1:784,1:784,1:784,1:784,1:784,1:784,1:784)
prob
prob[i]
prob[[i]][j]
prob[[1]][2]
naiveBayes = function(handWritten){
prob = list(1:784,1:784,1:784,1:784,1:784,1:784,1:784,1:784,1:784,1:784)
for (i in 1:length(trainMean)){
for (j in 1:784){
if (handWritten[j] == 0){
prob[[i]][j] = 1 - as.numeric(trainMean[[i]][j])
}else{
prob[[i]][j] = as.numeric(trainMean[[i]][j])
}
}
}
return(prob)
}
naiveBayes(ooz)
oz = naiveBayes(ooz)
oz
oz[[1]]
tapply(oz,sum)
lapply(oz,sum)
log(0.25)
log(0.21)
lapply(oz,function(x) -log(x))
-log(0.5) -log(0.5)
-log(0.3) -log(0.7)
lapply(lapply(oz,function(x) -log(x)),sum)
testPrior = sapply(testSorted, function(x) length(x[,1])/10000)
lapply(lapply(oz,function(x) -log(x)),sum)
paste(lapply(lapply(oz,function(x) -log(x)),sum))
unlist(lapply(lapply(oz,function(x) -log(x)),sum))
trainPrior
as.numeric(trainPrior)
-log(as.numeric(trainPrior))
(-log(as.numeric(trainPrior))) * unlist(lapply(lapply(oz,function(x) -log(x)),sum))
(-log(as.numeric(trainPrior))) + unlist(lapply(lapply(oz,function(x) -log(x)),sum))
a = (-log(as.numeric(trainPrior))) + unlist(lapply(lapply(oz,function(x) -log(x)),sum))
a
min(a)
which(a,min)
which(a,min(a))
which(min(a),a)
which(min(a)==a,a)
which(max(a)==a,a)
naiveBayes = function(handWritten){
prob = list(1:784,1:784,1:784,1:784,1:784,1:784,1:784,1:784,1:784,1:784)
for (i in 1:length(trainMean)){
for (j in 1:784){
if (handWritten[j] == 0){
prob[[i]][j] = 1 - as.numeric(trainMean[[i]][j])
}else{
prob[[i]][j] = as.numeric(trainMean[[i]][j])
}
}
}
result1 = lapply(prob,function(x) -log(x))
result2 = unlist(lapply(prob,sum))
finalResult = (-log(as.numeric(trainPrior))) + result2
theNumber = which(min(finalResult)==finalResult,finalResult) -1
return(theNumber)
}
ooz
naiveBayes(ooz)
naiveBayes = function(handWritten){
prob = list(1:784,1:784,1:784,1:784,1:784,1:784,1:784,1:784,1:784,1:784)
for (i in 1:length(trainMean)){
for (j in 1:784){
if (handWritten[j] == 0){
prob[[i]][j] = 1 - as.numeric(trainMean[[i]][j])
}else{
prob[[i]][j] = as.numeric(trainMean[[i]][j])
}
}
}
result1 = lapply(prob,function(x) -log(x))
result2 = unlist(lapply(prob,sum))
finalResult = (-log(as.numeric(trainPrior))) + result2
theNumber = which(min(finalResult)==finalResult,finalResult)
return(theNumber)
}
naiveBayes(ooz)
a
naiveBayes = function(handWritten){
prob = list(1:784,1:784,1:784,1:784,1:784,1:784,1:784,1:784,1:784,1:784)
for (i in 1:length(trainMean)){
for (j in 1:784){
if (handWritten[j] == 0){
prob[[i]][j] = 1 - as.numeric(trainMean[[i]][j])
}else{
prob[[i]][j] = as.numeric(trainMean[[i]][j])
}
}
}
print(prob)
result1 = lapply(prob,function(x) -log(x))
result2 = unlist(lapply(prob,sum))
finalResult = (-log(as.numeric(trainPrior))) + result2
theNumber = which(min(finalResult)==finalResult,finalResult)
return(theNumber)
}
naiveBayes(ooz)
naiveBayes = function(handWritten){
prob = list(1:784,1:784,1:784,1:784,1:784,1:784,1:784,1:784,1:784,1:784)
for (i in 1:length(trainMean)){
for (j in 1:784){
if (handWritten[j] == 0){
prob[[i]][j] = 1 - as.numeric(trainMean[[i]][j])
}else{
prob[[i]][j] = as.numeric(trainMean[[i]][j])
}
}
}
result1 = lapply(prob,function(x) -log(x))
result2 = unlist(lapply(prob,sum))
print(result1, result2)
finalResult = (-log(as.numeric(trainPrior))) + result2
theNumber = which(min(finalResult)==finalResult,finalResult)
return(theNumber)
}
naiveBayes(ooz)
naiveBayes = function(handWritten){
prob = list(1:784,1:784,1:784,1:784,1:784,1:784,1:784,1:784,1:784,1:784)
for (i in 1:length(trainMean)){
for (j in 1:784){
if (handWritten[j] == 0){
prob[[i]][j] = 1 - as.numeric(trainMean[[i]][j])
}else{
prob[[i]][j] = as.numeric(trainMean[[i]][j])
}
}
}
result1 = lapply(prob,function(x) -log(x))
result2 = unlist(lapply(prob,sum))
print(result1)
print(result2)
finalResult = (-log(as.numeric(trainPrior))) + result2
theNumber = which(min(finalResult)==finalResult,finalResult)
return(theNumber)
}
naiveBayes(ooz)
ooz
oz
oz
lapply(oz,su,)
lapply(oz,sum)
unlist(lapply(oz,sum))
a
(-log(as.numeric(trainPrior))) + unlist(lapply(lapply(oz,function(x) -log(x)),sum))
naiveBayes = function(handWritten){
prob = list(1:784,1:784,1:784,1:784,1:784,1:784,1:784,1:784,1:784,1:784)
for (i in 1:length(trainMean)){
for (j in 1:784){
if (handWritten[j] == 0){
prob[[i]][j] = 1 - as.numeric(trainMean[[i]][j])
}else{
prob[[i]][j] = as.numeric(trainMean[[i]][j])
}
}
}
result1 = lapply(prob,function(x) -log(x))
result2 = unlist(lapply(result1,sum))
print(result1)
print(result2)
finalResult = (-log(as.numeric(trainPrior))) + result2
theNumber = which(min(finalResult)==finalResult,finalResult)
return(theNumber)
}
naiveBayes(ooz)
naiveBayes = function(handWritten){
prob = list(1:784,1:784,1:784,1:784,1:784,1:784,1:784,1:784,1:784,1:784)
for (i in 1:length(trainMean)){
for (j in 1:784){
if (handWritten[j] == 0){
prob[[i]][j] = 1 - as.numeric(trainMean[[i]][j])
}else{
prob[[i]][j] = as.numeric(trainMean[[i]][j])
}
}
}
result1 = lapply(prob,function(x) -log(x))
result2 = unlist(lapply(result1,sum))
finalResult = (-log(as.numeric(trainPrior))) + result2
theNumber = which(min(finalResult)==finalResult,finalResult) - 1
return(theNumber)
}
naiveBayes(ooz)
save.image("~/workspace/NaiveBayes/data.RData")
require(shiny)
install.packages('shiny)')
install.packages('shiny')
require(shiny)
runApp("example1")
setwd("~/workspace/DynDocs/templates")
require(shiny)
runApp('shinyEX1')
setwd("~/workspace/DynDocs/templates/shinyEx4")
runApp('shinyEX1')
file.exists(shinyEX1)
file.exists('shinyEX1')
file.exists('./shinyEX1')
setwd("~/workspace/DynDocs/templates/shinyEx4")
file.exists('shinyEX1')
setwd("~/workspace/DynDocs/templates")
setwd("~/workspace/DynDocs/templates")
file.exists('shinyEX1')
file.exists('shinyEz1')
file.exists('shinyEx1')
runApp('shinyEx1')
runApp('shinyEx4')
ooz
ooz
ooz
ooz
ooz
naiveBayes(ooz)
=======
library("depmixS4")
install.packages("depmixS4")
library("depmixS4")
TUpdateRain <- function(PRain, PNotRain) {
return(PRain * 0.7 + PNotRain * 0.3)
}
}
if (observation == 0) {
#Weather HMM Example
#Problem:
#Using the obseravation of if there is an umbrella as an indicator
#to model the distribution of the weather is rain or not.
#Initial distribution:
#P(+r) = 0.5
#P(-r) = 0.5
#Transition probability table P(Rt+1|Rt):
#P(+r|+r) = 0.7
#P(-r|+r) = 0.3
#P(+r|-r) = 0.3
#P(-r|-r) = 0.7
#Observation prabability table P(Ut|Rt):
#P(+u|+r) = 0.9
#P(-u|+r) = 0.1
#P(+u|-r) = 0.2
#P(-u|-r) = 0.8
#Trasimission Update Function
TUpdateRain <- function(PRain, PNotRain) {
return(PRain * 0.7 + PNotRain * 0.3)
}
TUpdateNotRain <- function(PRain, PNotRain) {
return(PNotRain * 0.7 + PRain * 0.3)
}
#Observation Update Function
OUpdateRain <- function(PRain, PNotRain, observation) {
if (observation == 1) {
Pr = PRain * 0.9
Pnr = PNotRain * 0.2
}
if (observation == 0) {
Pr = PRain * 0.1
Pnr = PNotRain * 0.8
}
return(Pr/ (Pr + Pnr))
}
OUpdateNotRain <- function(PRain, PNotRain, observation) {
if (observation == 1) {
Pr = PRain * 0.9
Pnr = PNotRain * 0.2
}
if (observation == 0) {
Pr = PRain * 0.1
Pnr = PNotRain * 0.8
}
return(Pnr/ (Pr + Pnr))
}
pr1 = TUpdateRain(0.5, 0.5)
pr2 = TUpdateNotRain(0.5, 0.5)
pr1 = TUpdateRain(0.5, 0.5)  #0.5
pnr1 = TUpdateNotRain(0.5, 0.5)  #0.5
pr1 = OUpdateRain(pr1, pnr1, 1)
pr1 = TUpdateRain(0.5, 0.5)  #0.5
pnr1 = TUpdateNotRain(0.5, 0.5)  #0.5
Opr1 = OUpdateRain(pr1, pnr1, 1)
Opnr1 = OUpdateNotRain(pr1, pnr1, 1)
pr2 = TUpdateRain(Opr1, Opnr1)  #0.5
pnr2 = TUpdateNotRain(Opr1, Opnr1)  #0.5
Opr2 = OUpdateRain(pr2, pnr2, 1)
Opnr2 = OUpdateNotRain(pr2, pnr2, 1)
pr3 = TUpdateRain(Opr2, Opnr2)  #0.5
pnr3 = TUpdateNotRain(Opr2, Opnr2)  #0.5
Opr3 = OUpdateRain(pr3, pnr3, 0)
Opnr3 = OUpdateNotRain(pr3, pnr3, 0)
install.packages("shiny")
?renderText
??renderText
?paste
shinyServer(
function(input, output) {
output$text1 <- renderText({
paste("You have selected", input$var)
})
output$text2 <- renderText({
paste("You have chosen a range that goes from",
input$range[1], "to", input$range[2])
})
}
)
library(shiny)
library(shiny)
getwd()
setwd("/Users/Yue/Documents/stats_research/DynDocs/templates")
getwd()
runApp()
runApp(shiny)
runApp("shinyEx1")
runApp("shinyEx2")
runApp("census-app")
library(maps)
install.packages("maps")
library("maps", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("mapproj")
library("mapproj", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
runApp("census-app")
runApp("shinyEx4")
install.packages("quantmod")
library("quantmod", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
runApp("shinyEx4")
sunApp("shinyEx4")
runApp("shinyEx4")
install.packages("HMM")
library("HMM", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
?initHMM
?arima
>>>>>>> 06c95ad4dd4df6c0d4b5cfbfc955843348ce02ab
