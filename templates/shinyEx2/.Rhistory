normest = fitdistr(bee$Transit.Time, "normal")
library(MASS)
normest = fitdistr(bee$Transit.Time, "normal")
curve(dnorm(x, normest$estimate[1], normest$estimate[2]), add=TRUE, col='red')
gammaest = fitdistr(bee$Transit.Time, densfun="gamma")
curve(dgamma(x, gammaest$estimate[1], gammaest$estimate[2]), add=TRUE, col='blue')
legend("topright", cex=0.75, pch=16,
col=c("red", "blue"), legend=c("Normal Dist", "Gamma Dist"))
hist(bee$Transit.Time, breaks=seq(0, 21, by=2), prob = TRUE, main = "Histogram of Estimated Transit Times",
xlab = "Estimated transit time (mo per 100 km)", ylab = "Frequency")
curve(dnorm(x, normest$estimate[1], normest$estimate[2]), add=TRUE, col='red')
curve(dgamma(x, gammaest$estimate[1], gammaest$estimate[2]), add=TRUE, col='blue')
legend("topright", cex=0.75, pch=16,
col=c("red", "blue"), legend=c("Normal Dist", "Gamma Dist"))
?qqnorm
?gamma
qqnorm(y=bee$Transit.Time)
qqline(y = bee$Transit.Time)
getwd()
setwd("~/desktop/spring 2015/gkadvisors-2015-05-10/sp15_code")
reps_df = read.table('crp_data.csv',sep=',',header=T)
states <- strsplit(as.character(reps_df$Name),'\\s\\(') #splits Member info into name+(party-state)
states2 <- sapply(states, function(i) gsub(')','',i[2]))
states2 <- strsplit(as.character(states2),'-')
states3 <- sapply(states2,function(i) i[2]) #all raw state names
state_tab <- read.csv('statelevels.csv')
state_raw <- state_tab$raw
state_code <- state_tab$code
states4 <- state_code[match(states3,state_raw)]
party <- sapply(states2,function(i) i[1]) #all party names
rep_names <- sapply(states,function(i) i[1])
rep_names
a <- "^(\\w+)\\s?(.*)$" #matches first word plus optional space then the rest of the vector
y <- data.frame(first=sub(a,"\\1",rep_names), last=sub(a,"\\2",rep_names))
y
rep_names
?sub
y
sub(a,"\\1",rep_names)
gsub(a,"\\1",rep_names)
sub(a,"\\1",rep_names)[1:30]
gsub(a,"\\1",rep_names)[1:30]
cidlinks <- paste0('http://www.opensecrets.org/politicians/summary.php?cid=',reps_df$cid)
paste0
?paste0
nth <- paste0(1:12, c("st", "nd", "rd", rep("th", 9)))
nth
nth <- paste(1:12, c("st", "nd", "rd", rep("th", 9)))
nth
cidlinks
get_Ca <- function(link) {
a <- htmlTreeParse(link,useInternalNodes=T) #grabs HTML raw text
a.div <- xpathApply(a,'//div',xmlValue)
ids <- grep('Committee Assignments',a.div) #11,19,20,27 with 27 being the shortest length, picking 27
committees <- strsplit(as.character(a.div[ids[length(ids)]]),':\\s')[[1]][2]
ids <- gregexpr('([[:lower:]][[:upper:]])',committees) #gets index of when there's a lowercase/uppercase pattern to split on
ids <- c(0,unlist(ids),nchar(committees))
c2 <- character()
for (i in 1:length(ids)) { #separates committee names
if (i+1 > length(ids)) {
break
}
c2[i] <- substr(committees,ids[i]+1,ids[i+1])
}
return(c2)
}
c2 <- lapply(cidlinks,get_Ca)
c3 <- sapply(c2,function(i) paste(i,collapse=','))
comma.ids <- regexpr(',',c3)
get_Ca <- function(link) {
a <- htmlTreeParse(link,useInternalNodes=T) #grabs HTML raw text
a.div <- xpathApply(a,'//div',xmlValue)
ids <- grep('Committee Assignments',a.div) #11,19,20,27 with 27 being the shortest length, picking 27
committees <- strsplit(as.character(a.div[ids[length(ids)]]),':\\s')[[1]][2]
ids <- gregexpr('([[:lower:]][[:upper:]])',committees) #gets index of when there's a lowercase/uppercase pattern to split on
ids <- c(0,unlist(ids),nchar(committees))
c2 <- character()
for (i in 1:length(ids)) { #separates committee names
if (i+1 > length(ids)) {
break
}
c2[i] <- substr(committees,ids[i]+1,ids[i+1])
}
return(c2)
}
c2 <- lapply(cidlinks,get_Ca)
library(XML)
download.packages(XML)
download.packages("XML")
.libPaths(new = "/home/samsonsu/R/library")
download.packages("XML")
.libPaths(new = "/home/samsonsu/R/library")
install.packages("XML")
get_Ca <- function(link) {
a <- htmlTreeParse(link,useInternalNodes=T) #grabs HTML raw text
a.div <- xpathApply(a,'//div',xmlValue)
ids <- grep('Committee Assignments',a.div) #11,19,20,27 with 27 being the shortest length, picking 27
committees <- strsplit(as.character(a.div[ids[length(ids)]]),':\\s')[[1]][2]
ids <- gregexpr('([[:lower:]][[:upper:]])',committees) #gets index of when there's a lowercase/uppercase pattern to split on
ids <- c(0,unlist(ids),nchar(committees))
c2 <- character()
for (i in 1:length(ids)) { #separates committee names
if (i+1 > length(ids)) {
break
}
c2[i] <- substr(committees,ids[i]+1,ids[i+1])
}
return(c2)
}
c2 <- lapply(cidlinks,get_Ca)
a <- htmlTreeParse(link,useInternalNodes=T) #grabs HTML raw text
?htmlTreePArse
?htmlTreeParse
library(XML)
get_Ca <- function(link) {
a <- htmlTreeParse(link,useInternalNodes=T) #grabs HTML raw text
a.div <- xpathApply(a,'//div',xmlValue)
ids <- grep('Committee Assignments',a.div) #11,19,20,27 with 27 being the shortest length, picking 27
committees <- strsplit(as.character(a.div[ids[length(ids)]]),':\\s')[[1]][2]
ids <- gregexpr('([[:lower:]][[:upper:]])',committees) #gets index of when there's a lowercase/uppercase pattern to split on
ids <- c(0,unlist(ids),nchar(committees))
c2 <- character()
for (i in 1:length(ids)) { #separates committee names
if (i+1 > length(ids)) {
break
}
c2[i] <- substr(committees,ids[i]+1,ids[i+1])
}
return(c2)
}
c2 <- lapply(cidlinks,get_Ca)
c3 <- sapply(c2,function(i) paste(i,collapse=','))
c2 <- lapply(cidlinks,get_Ca)
get_Ca <- function(link) {
a <- htmlTreeParse(link,useInternalNodes=T) #grabs HTML raw text
a.div <- xpathApply(a,'//div',xmlValue)
ids <- grep('Committee Assignments',a.div) #11,19,20,27 with 27 being the shortest length, picking 27
committees <- strsplit(as.character(a.div[ids[length(ids)]]),':\\s')[[1]][2]
ids <- gregexpr('([[:lower:]][[:upper:]])',committees) #gets index of when there's a lowercase/uppercase pattern to split on
ids <- c(0,unlist(ids),nchar(committees))
c2 <- character()
for (i in 1:length(ids)) { #separates committee names
if (i+1 > length(ids)) {
print(i)
break
}
print(i)
c2[i] <- substr(committees,ids[i]+1,ids[i+1])
}
return(c2)
}
c2 <- lapply(cidlinks,get_Ca)
newTableGet <- function(url) { #Better function for extracting html table used in getTrans()
tmp <- htmlTreeParse(url,useInternalNodes=T)
tmp.tab <- xpathApply(tmp,'//table',xmlValue)
if (length(tmp.tab) == 0) {
return(NULL)
}
raws <- strsplit(unlist(tmp.tab),'\\r\\n.') #splits tables according to newline
firstval <- strsplit(raws[[1]][1],'Value')[[1]][2] #Removes unneeded text in first value and keeps member in second list element
raws[[1]][1] <- firstval
if (length(raws) == 2) {
firstval <- strsplit(raws[[2]][1],'Value')[[1]][2] #Removes unneeded text in first value and keeps member in second list element
raws[[2]][1] <- firstval
}
#Cleaning and reshaping
if (length(raws) != 1) {
raws.nowhites <- lapply(raws, function(i) str_trim(i)) #removes trailing whitespace before and after string
raws.nowhites <-lapply(raws.nowhites,function(m) matrix(m[-length(m)])) #removes empty last row
trans.mat <- lapply(raws.nowhites, function(m) matrix(m,ncol=4,byrow=T)) #Reformats matrix to include 5 columns
trans.df <- lapply(trans.mat, function(m) data.frame(m,stringsAsFactors=F)) #Converts matrix to dataframe
trans.df2 <- do.call(rbind,trans.df)
dup.id <- which(duplicated(trans.df2[,1:3]))
if (length(dup.id) == 0) {
trans.df2 <- trans.df2
} else {
trans.df2 <- trans.df2[-dup.id,] #removes duplicated transactions (fails to recognize spelling errors, however)
}
#Final touches
varnames <- c('Organization','Action','Date','Value') #Sets trans.df names
colnames(trans.df2) <- varnames
return(trans.df2)
} else {
raws.nowhites <- str_trim(raws[[1]])
raws.nowhites <- matrix(raws.nowhites[-length(raws.nowhites)])
trans.mat <- matrix(raws.nowhites,ncol=4,byrow=T)
trans.df <- data.frame(trans.mat,stringsAsFactors=F)
dup.id <- which(duplicated(trans.df[,1:3]))
if (length(dup.id) == 0) {
trans.df <- trans.df
} else {
trans.df <- trans.df[-dup.id,] #removes duplicated transactions (fails to recognize spelling errors, however)
}
#Final touches
varnames <- c('Organization','Action','Date','Value') #Sets trans.df names
colnames(trans.df) <- varnames
return(trans.df)
}
}
years <- seq.Date(as.Date('2000',format='%Y'),as.Date('2015',format='%Y'),by='year') #getting list of years
years <- format(years,'%Y')
years <- sort(years,decreasing=T) #starts at 2015 and ends at 2000
p <- 0
getTrans <- function(cid,year,df) {
0
}
getTrans <- function(cid,year,df) {
all_trans.df <- lapply(year,function(y) {
url <- paste0('http://www.opensecrets.org/pfds/transactions.php?cid=',cid,'&year=',y)
transactions.df <- newTableGet(url)
if (length(transactions.df) == 0) {
return(NULL)
} else {
date.split <- strsplit(as.character(transactions.df$Date),' ')
date.split <- sapply(date.split, function(i) paste(i,collapse=''))
ids <- which(nchar(date.split)==8)
for (n in ids) {
date.split[n] <- paste0(substr(date.split[n],1,3),'0',substr(date.split[n],4,8))
}
transactions.Date <- as.Date(date.split,'%b%d%Y')
ids2 <- order(transactions.Date,decreasing=T) #get indices to sort df chronologically
transactions.df$Date <- transactions.Date
transactions.df <- transactions.df[ids2,]
if (ncol(transactions.df) != 0) {
df2 <- df[rep(which(df$cid==cid),nrow(transactions.df)),]
transactions.df <- cbind(df2,transactions.df)
}
return(transactions.df)
}
})
p <<- p + 1
print(p)
return(all_trans.df)
}
all_trans.list1
all_trans.list1 <- lapply(df.new$cid[1:100],function(i) do.call(rbind,getTrans(i,years,df.new)))
df.new <- data.frame(cid=reps_df$cid,first=y$first,last=y$last,state=states4,party=party,reps_df$chamber,reps_df$year,committees=c3)
c2 <- lapply(cidlinks,get_Ca)
load('trans_FORM2.rda')
load('merged_transAdj.rda')
View(trans.format2)
load('trans_FORM.rda')
View(trans.format2)
View(trans.format)
load('trans_CLEANED.rda')
View(trans.cleaned)
trans.format = data.frame(trans.cleaned,
"Est Date of Report" = trans.cleaned$Date + 7,
"After One Day" = trans.cleaned$Date + 8,
"One Week" = trans.cleaned$Date + 14,
"One Month" = trans.cleaned$Date + 37,
"Two Months" = trans.cleaned$Date + 67,
"Six Months" = trans.cleaned$Date + 187)
trans.format
max(trans.cleaned$Date)
reps_df$cid
cidlinks <- paste0('http://www.opensecrets.org/politicians/summary.php?cid=',reps_df$cid)
get_Ca <- function(link) {
a <- htmlTreeParse(link,useInternalNodes=T) #grabs HTML raw text
a.div <- xpathApply(a,'//div',xmlValue)
ids <- grep('Committee Assignments',a.div) #11,19,20,27 with 27 being the shortest length, picking 27
committees <- strsplit(as.character(a.div[ids[length(ids)]]),':\\s')[[1]][2]
ids <- gregexpr('([[:lower:]][[:upper:]])',committees) #gets index of when there's a lowercase/uppercase pattern to split on
ids <- c(0,unlist(ids),nchar(committees))
c2 <- character()
for (i in 1:length(ids)) { #separates committee names
if (i+1 > length(ids)) {
print(i)
break
}
print(i)
c2[i] <- substr(committees,ids[i]+1,ids[i+1])
}
return(c2)
}
c2 <- lapply(cidlinks,get_Ca)
reps_df$cid
y
reps_df
head(reps_df)
get_Ca
get_Ca(http://www.opensecrets.org/politicians/summary.php?cid=N00007360)
get_Ca("http://www.opensecrets.org/politicians/summary.php?cid=N00007360"")
)
)
}
}
get_Ca("http://www.opensecrets.org/politicians/summary.php?cid=N00007360")
trans_CLEANED.rda
trans_CLEANED
load('trans_CLEANED.rda')
View(trans.cleaned)
trans.cleaned$committees[,"minority leader"]
levels(trans_CLEANED$committees)
levels(trans.CLEANED$committees)
trans.cleaned
levels(trans.cleaned$committees)
c2 <- lapply(cidlinks,get_Ca)
x = reps_df$cid[reps_df$cid != "N00026160"]
cidlinks <- paste0('http://www.opensecrets.org/politicians/summary.php?cid=',x)
c2 <- lapply(cidlinks,get_Ca)
x = reps_df$cid[reps_df$cid != "N00026160" & reps_df$cid != "N00029273"]
cidlinks <- paste0('http://www.opensecrets.org/politicians/summary.php?cid=',x)
c2 <- lapply(cidlinks,get_Ca)
x
x[which == "N00007724"]
x[which == N00007724]
x[which == "N00007724"]
x[x == "N00007724"]
class(x)
x
x
eps_df$cid
reps_df$cid
class(reps_df$cid)
x[which(x == "N00007724")]
[which(x == "N00007724")]
which(x == "N00007724")
x[92]
which(reps_df$cid == "N00007724")
which(reps_df$cid == "N00007724")
which(reps_df$cid == "N00029273")
which(reps_df$cid == "N00026160")
cidlinks <- paste0('http://www.opensecrets.org/politicians/summary.php?cid=',reps_df$cid)
c2 <- lapply(cidlinks,try(get_Ca))
c2
View(trans.cleaned)
max(trans.cleaned$date)
max(trans.cleaned$Date)
get_Ca("http://www.opensecrets.org/politicians/summary.php?cid=N00026160")
?rep
x = rep(times = length(cidlinks))
x = rep(0, times = length(cidlinks))
for(i in length(cidlinks)){
x[i] = get_Ca(cidlinks[i])
}
x = rep(0, times = length(cidlinks))
x = rep(0, times = length(cidlinks))
for(i in 1:length(cidlinks)){
x[i] = get_Ca(cidlinks[i])
}
warnings()
x[1]
x[2]
x[3]
x[4]
x = reps_df$cid[reps_df$cid != "N00035311"]
cidlinks <- paste0('http://www.opensecrets.org/politicians/summary.php?cid=',x)
x = rep(0, times = length(cidlinks)*100)
for(i in 1:length(cidlinks)){
x[i] = get_Ca(cidlinks[i])
}
get_Ca("http://www.opensecrets.org/politicians/summary.php?cid=N00031647")
getwd()
load('commonlist.rda')
load('trans_CLEANED.rda')
View(trans.cleaned)
commonid.list
View(trans.cleaned)
load('oldstocksymbols.rda')
old.list
old.list
load('oldstocksymbols.rda')
olist = load('oldstocksymbols.rda')
olist
olist
old.list
olist = old.list
olist
unique(olist)
length(unique(olist))
length(unique(olist))
length(olist)
load('symbols.rda')
View(symbols)
View(symbols)
load('symbols.rda')
View(symbols)
load('symb1.rda')
symb1
symb1
symbols1
load('formerlyname.rda')
head(formers)
oldstocksymbols.rda
load('oldstocksymbols.rda')
old.list
load('trans_FORM2.rda')
View(trans.format2)
load('trans_FORM.rda')
View(trans.format)
View(trans.format2)
load('trans_CLEANED.rda')
View(trans.cleaned)
x = readLines(url = "http://www.opensecrets.org/api/?method=memPFDprofile&year=2010&cid=N00007360&output=xml&apikey=__ecfcdfa067855c600e947b7a980a70c4__"
)
x = readLines(url = "http://www.opensecrets.org/api/?method=memPFDprofile&year=2010&cid=N00007360&output=xml&apikey=__ecfcdfa067855c600e947b7a980a70c4__", warn = "F")
url <- "http://stats.grok.se/json/en/201201/web_scraping"
raw.data <- readLines(url, warn="F")
raw.data
x = readLines(url = "http://www.opensecrets.org/api/?method=memPFDprofile&year=2010&cid=N00007360&output=xml&apikey=ecfcdfa067855c600e947b7a980a70c4", warn = "F")
installed.packages("httr")
installed.package("httr")
install.packages("httr")
GET("http://www.opensecrets.org/api/?method=memPFDprofile&year=2010&cid=N00007360&output=xml&apikey=ecfcdfa067855c600e947b7a980a70c4")
get
?get
get("http://www.opensecrets.org/api/?method=memPFDprofile&year=2010&cid=N00007360&output=xml&apikey=ecfcdfa067855c600e947b7a980a70c4")
get("http://www.opensecrets.org/api/?method=memPFDprofile&year=2010&cid=N00007360&output=xml&apikey=ecfcdfa067855c600e947b7a980a70c4")
get("http://www.opensecrets.org/api/?method=memPFDprofile&year=2010&cid=N00007360&output=xml&apikey=__ecfcdfa067855c600e947b7a980a70c4__")
sample2 <- GET(“http://api.data.gov/nrel/utility_rates/v3.json?api_key=sample_key&address=1600+Amphitheatre+Parkway,+Mountain+View,+CA“)
sample2 <- GET(“http://api.data.gov/nrel/utility_rates/v3.json?api_key=sample_key&address=1600+Amphitheatre+Parkway,+Mountain+View,+CA“)
sample2 = GET("http://api.data.gov/nrel/utility_rates/v3.json?api_key=sample_key&address=1600+Amphitheatre+Parkway,+Mountain+View,+CA")
library(httr)
sample2 = GET("http://api.data.gov/nrel/utility_rates/v3.json?api_key=sample_key&address=1600+Amphitheatre+Parkway,+Mountain+View,+CA")
GET("http://www.opensecrets.org/api/?method=memPFDprofile&year=2010&cid=N00007360&output=xml&apikey=__ecfcdfa067855c600e947b7a980a70c4__")
test = GET("http://www.opensecrets.org/api/?method=memPFDprofile&year=2010&cid=N00007360&output=xml&apikey=__ecfcdfa067855c600e947b7a980a70c4__")
test
content(test_)
content(test)
sample
sample2 = GET("http://api.data.gov/nrel/utility_rates/v3.json?api_key=sample_key&address=1600+Amphitheatre+Parkway,+Mountain+View,+CA")
sample2
sample2 = GET("url")
url <- "http://stats.grok.se/json/en/201201/web_scraping"
sample2 = GET("url")
test = GET("http://www.opensecrets.org/api/?method=congCmteIndus&congno=112&indus=F10&cmte=HARM&apikey=__ecfcdfa067855c600e947b7a980a70c4__"
)
content(test)
test = GET("http://www.opensecrets.org/api/?method=congCmteIndus&congno=112&indus=F10&cmte=HARM&apikey=__d7593b54bd9e19b3952c15b29d44ea79__"
)
content(test)
library(httr)
test = GET("http://www.opensecrets.org/api/?method=memPFDprofile&year=2010&cid=N00007360&output=xml&apikey=__ecfcdfa067855c600e947b7a980a70c4__")
test
content(test)
test = GET("http://www.opensecrets.org/api/?method=memPFDprofile&year=2010&cid=N00007360&output=xml&apikey=__d7593b54bd9e19b3952c15b29d44ea79__")
content(test)
test = GET("http://www.opensecrets.org/api/?method=memPFDprofile&year=2014&cid=N00007360&output=xml&apikey=__d7593b54bd9e19b3952c15b29d44ea79__")
content(test)
test = GET("http://www.opensecrets.org/api/?method=memPFDprofile&year=2014&cid=N00007360&output=xml&apikey=d7593b54bd9e19b3952c15b29d44ea79")
content(test)
test = GET("http://www.opensecrets.org/api/?method=memPFDprofile&year=2013&cid=N00007360&output=xml&apikey=d7593b54bd9e19b3952c15b29d44ea79")
content(test)
x = readLines(url = "http://www.opensecrets.org/api/?method=memPFDprofile&year=2014&cid=N00007360&output=xml&apikey=__d7593b54bd9e19b3952c15b29d44ea79__", warn = "F")
content(test)
getwd()
setwd("/Users/samsonsu/Desktop/Spring 2015/samson")_
setwd("/Users/samsonsu/Desktop/Spring 2015/samson")
reps_df = read.table('crp_data.csv',sep=',',header=T)
reps_df = read.table('crp_data.csv',sep=',',header=T)
states <- strsplit(as.character(reps_df$Name),'\\s\\(') #splits Member info into name+(party-state)
states2 <- sapply(states, function(i) gsub(')','',i[2]))
states2 <- strsplit(as.character(states2),'-')
states3 <- sapply(states2,function(i) i[2]) #all raw state names
state_tab <- read.csv('statelevels.csv')
state_raw <- state_tab$raw
state_tab <- read.csv('statelevels.csv')
state_raw <- state_tab$raw
state_code <- state_tab$code
states4 <- state_code[match(states3,state_raw)]
party <- sapply(states2,function(i) i[1]) #all party names
rep_names <- sapply(states,function(i) i[1])
a <- "^(\\w+)\\s?(.*)$" #matches first word plus optional space then the rest of the vector
y <- data.frame(first=sub(a,"\\1",rep_names), last=sub(a,"\\2",rep_names))
y
View(y)
first=sub(a,"\\1",rep_names)
state_tab <- read.csv('statelevels.csv')
state_raw <- state_tab$raw
states <- strsplit(as.character(reps_df$Name),'\\s\\(') #splits Member info into name+(party-state)
reps_df = read.table('crp_data.csv',sep=',',header=T)
reps_df$name
states <- strsplit(as.character(reps_df$Name),'\\s\\(') #splits Member info into name+(party-state)
states
library(XML)
states <- strsplit(as.character(reps_df$Name),'\\s\\(') #splits Member info into name+(party-state)
states
setwd("/Users/samsonsu/Desktop/Spring 2015/gkadvisors-2015-05-10/SP15_Code")
reps_df = read.table('crp_data.csv',sep=',',header=T)
states <- strsplit(as.character(reps_df$Name),'\\s\\(') #splits Member info into name+(party-state)
states2 <- sapply(states, function(i) gsub(')','',i[2]))
states
states
reps_df$Name
x = exp(2,-5)
?exp
x = exp(2^-5)
1x
x = exp(2*-5)
1x
1*x
2*x
3*x
plot(1x)
plot(1*x)
plot(y=1*x)
plot(y=1*x, x = 1:00)
install.packages("shiny")
install.packages("quantmod")
shiny::runApp('~/Desktop/DynDocs/templates/shinyEx4')
shiny::runApp('~/Desktop/DynDocs/templates/shinyEx1')
5!
fact(5)
factorial(5)
shiny::runApp('~/Desktop/DynDocs/templates/shinyEx1')
install.packages("maps")
install.packages("approj")
install.packages("mapproj")
shiny::runApp('~/Desktop/DynDocs/templates/census-app')
shiny::runApp('~/Desktop/DynDocs/templates/shinyEx2')
shiny::runApp('~/Desktop/DynDocs/templates/shinyEx2')
