points(Payroll$year[Payroll$round == "WS"], Payroll$AdjustPayroll[Payroll$round == "WS"], col= "red", pch= 20, text = Payroll$team[Payroll$round == "WS"])
points(Payroll$year[Payroll$round == "WS"], Payroll$AdjustPayroll[Payroll$round == "WS"], col= "red", pch= 20)
text(Payroll$year[Payroll$round == "WS"], Payroll$AdjustPayroll[Payroll$round == "WS"], labels = Payroll$team[Payroll$round == "WS"])
text(Payroll$year[Payroll$round == "WS"], Payroll$AdjustPayroll[Payroll$round == "WS"], labels = Payroll$team[Payroll$round == "WS"])
text(Payroll$year[Payroll$round == "WS"], Payroll$AdjustPayroll[Payroll$round == "WS"], labels = Payroll$team[Payroll$round == "WS"], cex = 0.5)
plot(Payroll$AdjustPayroll~ jitter(Payroll$year), ylab= "Inflation Adjusted Payrolls in Millions of Dollars", xlab = "Year", pch = 20, main = "Adjusted Payroll for Professional Baseball Teams", col = c(transGray, transBlue))
points(Payroll$year[Payroll$round == "WS"], Payroll$AdjustPayroll[Payroll$round == "WS"], col= "red", pch= 20)
text(Payroll$year[Payroll$round == "WS"], Payroll$AdjustPayroll[Payroll$round == "WS"], labels = Payroll$team[Payroll$round == "WS"], cex = 0.5)
text(Payroll$year[Payroll$round == "WS"], Payroll$AdjustPayroll[Payroll$round == "WS"], labels = Payroll$team[Payroll$round == "WS"], cex = 0.5, pos = 1)
plot(Payroll$AdjustPayroll~ jitter(Payroll$year), ylab= "Inflation Adjusted Payrolls in Millions of Dollars", xlab = "Year", pch = 20, main = "Adjusted Payroll for Professional Baseball Teams", col = c(transGray, transBlue))
points(Payroll$year[Payroll$round == "WS"], Payroll$AdjustPayroll[Payroll$round == "WS"], col= "red", pch= 20)
text(Payroll$year[Payroll$round == "WS"], Payroll$AdjustPayroll[Payroll$round == "WS"], labels = Payroll$team[Payroll$round == "WS"], cex = 0.5, pos = 3)
points(Payroll$year[Payroll$round == "WS"], Payroll$AdjustPayroll[Payroll$round == "WS"], col= "red", pch= 20, cex = 1.1)
points(Payroll$year[Payroll$round == "WS"], Payroll$AdjustPayroll[Payroll$round == "WS"], col= "red", pch= 20, cex = 10)
points(Payroll$year[Payroll$round == "WS"], Payroll$AdjustPayroll[Payroll$round == "WS"], col= "red", pch= 20, cex = 1.1)
plot(Payroll$AdjustPayroll~ jitter(Payroll$year), ylab= "Inflation Adjusted Payrolls in Millions of Dollars", xlab = "Year", pch = 20, main = "Adjusted Payroll for Professional Baseball Teams", col = c(transGray, transBlue))
points(Payroll$year[Payroll$round == "WS"], Payroll$AdjustPayroll[Payroll$round == "WS"], col= "red", pch= 20, cex = 1.1)
text(Payroll$year[Payroll$round == "WS"], Payroll$AdjustPayroll[Payroll$round == "WS"], labels = Payroll$team[Payroll$round == "WS"], cex = 0.5, pos = 3)
legend( legend = c("AL", "NL"), fill = c(transGray, transBlue) )
legend( pos = 1, legend = c("AL", "NL"), fill = c(transGray, transBlue) )
mtext("Blue points are teams in the American League, Gray points are those the National League")
mtext(side = 1, "Blue points are teams in the American League, Gray points are those the National League")
mtext(side = 1, outer = T,  "Blue points are teams in the American League, Gray points are those the National League")
plot(Payroll$AdjustPayroll~ jitter(Payroll$year), ylab= "Inflation Adjusted Payrolls in Millions of Dollars", xlab = "Year", pch = 20, main = "Adjusted Payroll for Professional Baseball Teams", col = c(transGray, transBlue))
points(Payroll$year[Payroll$round == "WS"], Payroll$AdjustPayroll[Payroll$round == "WS"], col= "red", pch= 20, cex = 1.1)
text(Payroll$year[Payroll$round == "WS"], Payroll$AdjustPayroll[Payroll$round == "WS"], labels = Payroll$team[Payroll$round == "WS"], cex = 0.5, pos = 3)
mtext(side = 1, outer = T,  "Blue points are teams in the American League, Gray points are those the National League")
mtext(side = 1, outer = T,  "Blue points are teams in the American League, Gray points are those the National League")
mtext(side = 1,  "Blue points are teams in the American League, Gray points are those the National League")
plot(Payroll$AdjustPayroll~ jitter(Payroll$year), ylab= "Inflation Adjusted Payrolls in Millions of Dollars", xlab = "Year", pch = 20, main = "Adjusted Payroll for Professional Baseball Teams", col = transGray)
points(Payroll$year[Payroll$round == "WS"], Payroll$AdjustPayroll[Payroll$round == "WS"], col= "red", pch= 20, cex = 1.1)
text(Payroll$year[Payroll$round == "WS"], Payroll$AdjustPayroll[Payroll$round == "WS"], labels = Payroll$team[Payroll$round == "WS"], cex = 0.5, pos = 3)
transGray = rgb(190, 190, 190, 150, max = 256)
transBlue = rgb(1, 190, 190, 190, max = 256)
plot(Payroll$AdjustPayroll~ jitter(Payroll$year), ylab= "Inflation Adjusted Payrolls in Millions of Dollars", xlab = "Year", pch = 20, main = "Adjusted Payroll for Professional Baseball Teams", col = c(transBlue, transGray)[Payroll$league] )
c(transBlue, transGray)[Payroll$league]
[Payroll$league]
Payroll$league
as.factor(Payroll$league)
c(transBlue, transGray)(as.factor(Payroll$league))
c(transBlue, transGray)[as.factor(Payroll$league)]
plot(Payroll$AdjustPayroll~ jitter(Payroll$year), ylab= "Inflation Adjusted Payrolls in Millions of Dollars", xlab = "Year", pch = 20, main = "Adjusted Payroll for Professional Baseball Teams", col = c(transBlue, transGray)[as.factor(Payroll$league)] )
points(Payroll$year[Payroll$round == "WS"], Payroll$AdjustPayroll[Payroll$round == "WS"], col= "red", pch= 20, cex = 1.1)
text(Payroll$year[Payroll$round == "WS"], Payroll$AdjustPayroll[Payroll$round == "WS"], labels = Payroll$team[Payroll$round == "WS"], cex = 0.5, pos = 3)
as.factor(Payroll$league)
load("payroll.rda")
inflation = c(1, 0.96, 0.95, 0.91, 0.87, 0.84, 0.79, 0.76, 0.74,
0.72, 0.70, 0.69, 0.66, 0.65, 0.64, 0.63, 0.61, 0.60, 0.58,
0.57, 0.55, 0.54, 0.52, 0.50, 0.50, 0.49, 0.48, 0.47, 0.46, 0.45)
load("payroll.rda")
inflation = c(1, 0.96, 0.95, 0.91, 0.87, 0.84, 0.79, 0.76, 0.74,
0.72, 0.70, 0.69, 0.66, 0.65, 0.64, 0.63, 0.61, 0.60, 0.58,
0.57, 0.55, 0.54, 0.52, 0.50, 0.50, 0.49, 0.48, 0.47, 0.46, 0.45)
names(inflation) = 1985:2014
Payroll$InflationRate = inflation[as.character(Payroll$year)]
Payroll$AdjustPayroll = (Payroll$payroll * Payroll$InflationRate)/1000000
transGray = rgb(190, 190, 190, 150, max = 256)
transBlue = rgb(1, 190, 190, 190, max = 256)
as.factor(Payroll$league)
plot(Payroll$AdjustPayroll~ jitter(Payroll$year), ylab= "Inflation Adjusted Payrolls in Millions of Dollars", xlab = "Year", pch = 20, main = "Adjusted Payroll for Professional Baseball Teams", col = c(transBlue, transGray)[as.factor(Payroll$league)] )
points(Payroll$year[Payroll$round == "WS"], Payroll$AdjustPayroll[Payroll$round == "WS"], col= "red", pch= 20, cex = 1.1)
text(Payroll$year[Payroll$round == "WS"], Payroll$AdjustPayroll[Payroll$round == "WS"], labels = Payroll$team[Payroll$round == "WS"], cex = 0.5, pos = 3)
mtext(side = 1,  "Blue points are teams in the American League, Gray points are those the National League")
MainGraph = plot(Payroll$AdjustPayroll~ jitter(Payroll$year), ylab= "Inflation Adjusted Payrolls in Millions of Dollars", xlab = "Year", pch = 20, main = "Adjusted Payroll for Professional Baseball Teams", col = c(transBlue, transGray)[as.factor(Payroll$league)] )
RedPoints = points(Payroll$year[Payroll$round == "WS"], Payroll$AdjustPayroll[Payroll$round == "WS"], col= "red", pch= 20, cex = 1.1)
PointLabel = text(Payroll$year[Payroll$round == "WS"], Payroll$AdjustPayroll[Payroll$round == "WS"], labels = Payroll$team[Payroll$round == "WS"], cex = 0.5, pos = 3)
MainGraph = plot(Payroll$AdjustPayroll~ jitter(Payroll$year), ylab= "Inflation Adjusted Payrolls in Millions of Dollars", xlab = "Year", pch = 20, main = "Adjusted Payroll for Professional Baseball Teams", col = c(transBlue, transGray)[as.factor(Payroll$league)] )
RedPoints = points(Payroll$year[Payroll$round == "WS"], Payroll$AdjustPayroll[Payroll$round == "WS"], col= "red", pch= 20, cex = 1.1)
PointLabel = text(Payroll$year[Payroll$round == "WS"], Payroll$AdjustPayroll[Payroll$round == "WS"], labels = Payroll$team[Payroll$round == "WS"], cex = 0.5, pos = 3)
TextLabel = mtext(side = 1,  "Blue points are teams in the American League, Gray points are those the National League")
save.image(file = "Graph.RData")
pdf(file = "Graph.RData")
pdf(file = "Graph.RData")
rootN[[1]]
library("XML")
doc = xmlParse("http://data.sfgov.org/OData.svc/tmnf-yvry")
rootN = xmlRoot(doc)
xmlSize(rootN)
names(rootN)
rootN[[1]]
rootN[[2]]
rootN[[3]]
rootN[[4]]
xpathSApply(rootN, '//entry[@d:category = "BURGLARY"]', xmlGetAttr, namespaces = c(d="http://schemas.microsoft.com/ado/2007/08/dataservices", m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"))
duedue = xpathSApply(rootN, '//m:properties[@d:category = "ASSAULT"]', xmlGetAttr, "d:time", namespaces = c(d="http://schemas.microsoft.com/ado/2007/08/dataservices", m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"))
duedue
duedue = xpathSApply(rootN, '//entry//m:properties[@d:category = "ASSAULT"]', xmlGetAttr, "d:time", namespaces = c(d="http://schemas.microsoft.com/ado/2007/08/dataservices", m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"))
duedue
rootN[[5]]
duedue = xpathSApply(rootN, '/m:properties[@d:category = "ASSAULT"]', xmlGetAttr, "d:time", namespaces = c(d="http://schemas.microsoft.com/ado/2007/08/dataservices", m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"))
duedue
duedue = xpathSApply(rootN, '//m:properties[@d:category = "ASSAULT"]', xmlGetAttr, "d:time", namespaces = c(d="http://schemas.microsoft.com/ado/2007/08/dataservices", m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"))
duedue
duedue = xpathSApply(rootN, '//d:category', xmlGetAttr, "d:time", namespaces = c(d="http://schemas.microsoft.com/ado/2007/08/dataservices", m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"))
duedue
duedue = xpathSApply(rootN, '//d:category', xmlGetAttr, "", namespaces = c(d="http://schemas.microsoft.com/ado/2007/08/dataservices", m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"))
duedue
duedue = xpathSApply(rootN, '//d:category', xmlGetAttr, namespaces = c(d="http://schemas.microsoft.com/ado/2007/08/dataservices", m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"))
duedue
duedue = xpathSApply(rootN, '//d:category', xmlGetAttr, "d:descript" ,  namespaces = c(d="http://schemas.microsoft.com/ado/2007/08/dataservices", m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"))
duedue
xpathSApply(rootN, '//[@d:category = "ASSAULT"]', xmlGetAttr, "d:time", namespaces = c(d="http://schemas.microsoft.com/ado/2007/08/dataservices", m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"))
xpathSApply(rootN, '//m:properties', xmlGetAttr, "d:time", namespaces = c(d="http://schemas.microsoft.com/ado/2007/08/dataservices", m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"))
xpathSApply(rootN, '//m:properties', xmlGetAttr, "d:category", namespaces = c(d="http://schemas.microsoft.com/ado/2007/08/dataservices", m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"))
xpathSApply(rootN, '//m:properties', xmlGetAttr, "d:category", namespaces = c(d="http://schemas.microsoft.com/ado/2007/08/dataservices", m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"))
xpathSApply(rootN, '//d:category[@d:category = "BURGLARY"]', xmlGetAttr, namespaces = c(d="http://schemas.microsoft.com/ado/2007/08/dataservices", m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"))
xpathSApply(rootN, '//d:category[@d:category = "BURGLARY"]', xmlGetAttr, namespaces = c(d="http://schemas.microsoft.com/ado/2007/08/dataservices", m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"))
xpathSApply(rootN, '//d:category[@d:category = "BURGLARY"]', xmlGetAttr, "d:category" namespaces = c(d="http://schemas.microsoft.com/ado/2007/08/dataservices", m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"))
xpathSApply(rootN, '//d:category[@d:category = "BURGLARY"]', xmlGetAttr, "d:category", namespaces = c(d="http://schemas.microsoft.com/ado/2007/08/dataservices", m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"))
xpathSApply(rootN, '//d:category[@d:category = "BURGLARY"]', xmlGetAttr, "d:category", namespaces = c(d="http://schemas.microsoft.com/ado/2007/08/dataservices", m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"))
xpathSApply(rootN, '//d:category[@d:category = "BURGLARY"]', xmlGetAttr, "d:category", namespaces = c(d="http://schemas.microsoft.com/ado/2007/08/dataservices"))
xpathSApply(rootN, '//d:category[@d:category = "BURGLARY"]', xmlGetAttr, "d:category", namespaces = c(d="http://schemas.microsoft.com/ado/2007/08/dataservices"))
rootN
rootN[[22]]
rootN[[23]]
rootN[[27]]
xpathSApply(rootN[[7]], '//d:category[@d:category = "BURGLARY"]', xmlGetAttr, "d:category", namespaces = c(d="http://schemas.microsoft.com/ado/2007/08/dataservices"))
xpathSApply(rootN[[7]], '//d:category[@category = "BURGLARY"]', xmlGetAttr, "d:category", namespaces = c(d="http://schemas.microsoft.com/ado/2007/08/dataservices"))
:
xpathSApply(rootN[[7]], '//d:category[@d:category = "BURGLARY"]', xmlGetAttr, "d:category", namespaces = c(d="http://schemas.microsoft.com/ado/2007/08/dataservices"))
xpathSApply(rootN, '//m:properties[@d:category = "ASSAULT"]', xmlGetAttr, "d:time", namespaces = c("m", "d"))
xpathSApply(rootN, '//m:properties[@d:category = "ASSAULT"]', xmlGetAttr, "d:time", namespaces = c(d="http://schemas.microsoft.com/ado/2007/08/dataservices", m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"))
xpathSApply(rootN, '//m:properties[@d:category = "ASSAULT"]', xmlGetAttr, "d:time", namespaces = c(d="http://schemas.microsoft.com/ado/2007/08/dataservices", m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"))
xpathSApply(rootN, '//m:properties[@d:category = "ASSAULT"]', xmlGetAttr, "d:time", namespaces = c(d="http://schemas.microsoft.com/ado/2007/08/dataservices", m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"))
xpathSApply(rootN, '//entry/m:properties[@d:category = "ASSAULT"]', xmlGetAttr, "d:time", namespaces = c(d="http://schemas.microsoft.com/ado/2007/08/dataservices", m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"))
xpathSApply(rootN, '//entry//m:properties[@d:category = "ASSAULT"]', xmlGetAttr, "d:time", namespaces = c(d="http://schemas.microsoft.com/ado/2007/08/dataservices", m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"))
xpathSApply(rootN, '//m:properties[@d:category = "ASSAULT"]', xmlGetAttr, "d:time", namespaces = c(d="http://schemas.microsoft.com/ado/2007/08/dataservices", m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"))
rootN = xmlRoot(doc, skip = F)
rootN[[1]]
rootN[[2]]
rootN[[3]]
rootN[[4]]
rootN[[27]]
xpathSApply(rootN[[7]], '//d:category[@d:category = "BURGLARY"]', xmlGetAttr, "d:category", namespaces = c(d="http://schemas.microsoft.com/ado/2007/08/dataservices"))
duedue = xpathSApply(rootN, '//d:category', xmlGetAttr, "d:descript" ,  namespaces = c(d="http://schemas.microsoft.com/ado/2007/08/dataservices", m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"))
duedue
xpathSApply(rootN, '//m:properties', xmlGetAttr, "d:category", namespaces = c(d="http://schemas.microsoft.com/ado/2007/08/dataservices", m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"))
xpathSApply(rootN, '//m:properties[@d:category = "ASSAULT"]', xmlGetAttr, "d:time", namespaces = c(d="http://schemas.microsoft.com/ado/2007/08/dataservices", m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"))
duedue
xpathSApply(rootN, '//m:properties[@d:category = "ASSAULT"]', xmlGetAttr, "d:time", namespaces = c("m", "d"))
xpathSApply(rootN, '//field[@name = "Infant mortality rate"]/rank', xmlGetAttr, "number")
?data.frame()
satDF = read.csv("http://www.stat.berkeley.edu/users/nolan/data/sat.csv")
View(satDF)
max(satDF$sat)
install.packages(Shiny)
install.packages(shiny)
install.packages("shiny")
png("myPlot.png")
plot(1:10)
dev.off(1)
dev.off()
satDF = read.csv("http://www.stat.berkeley.edu/users/nolan/data/sat.csv")
x = rnorm(5,)
x
x = rnorm(50,)
y= 1:50
plot(y~x)
library(ggplot2)
qplot(y~x)
qplot(x, y)
plot(y~x)
qplot(x, y)
load("C:/Users/yeoyeo/Documents/DynDocs/SAT/rda_data/satDF.rda")
View(satDF)
load("C:/Users/yeoyeo/Documents/DynDocs/SAT/rda_data/satDF_pretty.rda")
View(satDF_pretty)
View(satDF)
View(satDF)
getwd()
setwd("~/DynDocs/SAT/Interactive Regression")
load("data/satDF.rda")
frac_intervals = co.intervals(data$Frac, number = 5)
frac_intervals = co.intervals(data$frac, number = 5)
cut(variable, breaks = quantile(variable, probs= seq(0,1,length5)))
frac_intervals = co.intervals(satDF$frac, number = 5)
cut(sat$DF, breaks = quantile(variable, probs= seq(0,1,length5)))
cut(satDF$frac, breaks = quantile(variable, probs= seq(0,1,length5)))
cut(satDF$frac, breaks = quantile(satDF$frac, probs= seq(0,1,length5)))
cut(satDF$frac, breaks = quantile(satDF$frac, probs= seq(0,1,5)))
frac_intervals = co.intervals(satDF$frac, number = 5)
frac_intervals
cut(satDF$frac, breaks = quantile(satDF$frac, probs= seq(0,1,5)))
cut(satDF$frac, breaks = quantile(satDF$frac, probs= seq(0,1,5)))
jump = cut(satDF$frac, breaks = quantile(satDF$frac, probs= seq(0,1,5)))
jump
class(jump)
class(jump[1])
jump[1]
jump[[1]]
count(jump)
sum(jump)
satDF$frac[jump]
satDF$frac[jump[1]]
satDF$frac[jump[[1]]]
satDF$frac[jump]
satDF$frac[jump[1]]
satDF$frac[jump[2]]
satDF$frac[jump[5]]
satDF$frac[jump==1]
satDF$frac[jump==2]
satDF$frac[jump==2]
jump = cut(satDF$frac, breaks = quantile(satDF$frac, probs= seq(0,1,5)))
jump
jump[1]
jump[2]
jump[3]
jump[4]
jump[5]
jump[6]
jump[51]
jump
levels[jump]
levels(jump)
summary(jump)
frac_intervals = co.intervals(satDF$frac, number = 5)
class(frac_intervals)
summary(jump)
factor
cut(satDF$frac, breaks = quantile(satDF$frac, probs= seq(0,1,5)))
frac_intervals = co.intervals(satDF$frac, number = 5)
frac_intervals
evencuts = cut(satDF$frac, breaks = quantile(satDF$frac, probs= seq(0,1,5)))
evencuts
class(frac_intervals)
factor(satDF$frac, levels = levels(evencuts),  )
factor(satDF$frac, levels = levels(evencuts), ordered = T )
evencuts = cut(satDF$frac, breaks = quantile(satDF$frac, probs= seq(0,1,5)))
evencuts
factor(satDF$frac, levels = levels(evencuts), ordered = T )
evencuts = cut(satDF$frac, breaks = quantile(satDF$frac, probs= seq(0,1,5)))
levels(jump)
levels(jump)[1]
levels(jump)[2]
levels(evencuts)
summary(evencuts)
satDF$frac[jump==2]
quantile(satDF$frac, probs= seq(0,1,5))
quantile(satDF$frac, probs= seq(0,1,5)
)
cut(satDF$frac, breaks = quantile(satDF$frac, probs= seq(0,1,5)))
evencuts = cut(satDF$frac, breaks = c( (3.92,23.2] (23.2,42.5] (42.5,61.8] (61.8,81.1] )
evencuts = cut(satDF$frac, breaks = c( (3.92,23.2], (23.2,42.5], (42.5,61.8], (61.8,81.1])
frac_list = apply(frac_intervals, 1, frac_group)
summary(jump)
frac_intervals = co.intervals(satDF$frac, number = 4)
frac_intervals
frac_intervals
satDF$frac[frac_intervals==(1,)]
satDF$frac[frac_intervals==(1)]
satDF$frac[frac_intervals==(1, )]
satDF$frac[frac_intervals==(1,0 )]
satDF$frac[frac_intervals]
if (satDF$frac<20) {
blah = satDF$frac
}
frac_intervals = co.intervals(satDF$frac, number = 4)
frac_intervals
shinyServer(function(input, output)) {
frac_intervals = co.intervals(satDF$frac, number = 4)
frac_intervals = co.intervals(satDF$frac, number = 4)
frac_group = function(interval_group){
which(data$Frac >= interval_group[1] & data$Frac <= interval_group[2])
}
frac_list = apply(frac_intervals, 1, frac_group)
#lm(data$Frac[frac_list[[1]]] ~ data$Salary[frac_list[[1]]], data = data)
frac_group = function(interval_group){
which(data$Frac >= interval_group[1] & data$Frac <= interval_group[2])
}
frac_list = apply(frac_intervals, 1, frac_group)
frac_intervals = co.intervals(satDF$frac, number = 4)
frac_group = function(interval_group){
which(satDF$frac >= interval_group[1] & satDF$frac <= interval_group[2])
}
frac_list = apply(frac_intervals, 1, frac_group)
View(satDF)
lm_list = list()
for(i in 1:5){
lm_list[[i]] = lm(satDF$sat[frac_list[[i]]] ~ data$Salary[frac_list[[i]]], data = satDF)
}
frac_list = apply(frac_intervals, 1, frac_group)
lm_list = list()
for(i in 1:4){
lm_list[[i]] = lm(satDF$sat[frac_list[[i]]] ~ data$Salary[frac_list[[i]]], data = satDF)
}
lm_list = list()
for(i in 1:4){
lm_list[[i]] = lm(satDF$sat[frac_list[[i]]] ~ satDF$salary[frac_list[[i]]], data = satDF)
}
x <- satDF$salary
y <- satDF$sat
g <- satDF$frac
coefs <- regression()$fit.res$coefficients
plot(x, y, pch=16, cex=1.2, bty="n", main= "The Effect of Teacher Salary on SAT scores", xlab="Average Teacher Salary (in thousands of dollars)", ylab="Average Total SAT Scores")
if (input$model == "Simple regression") {
#abline(coefs[1], coefs[2], lwd=3)
#par(col = 'green')
abline(coefs, lwd=3, col= "red")
} else if (input$model == "Controlling for frac") {
abline(a = coefs[1], b = coefs[2], lwd=3, col= "red")
#abline(coefs["(Intercept)"], coefs[2], lwd=3)
} else if (input$model == "First Fifth of Data") {
points(data$frac_interval[[1]], col="blue", pch=15 )
abline(lm_list[[1]]$coefficients, lwd=3, col= "red")
} else if (input$model == "Second Fifth of Data") {
abline(lm_list[[2]]$coefficients, lwd=3, col= "red")
}  else if (input$model == "Third Fifth of Data") {
abline(lm_list[[3]]$coefficients, lwd=3, col= "red")
}  else if (input$model == "Fourth Fifth of Data") {
abline(lm_list[[4]]$coefficients, lwd=3, col= "red")
}  else if (input$model == "Last Fifth of Data") {
abline(lm_list[[5]]$coefficients, lwd=3, col= "red")
}
})
plot(x, y, pch=16, cex=1.2, bty="n", main= "The Effect of Teacher Salary on SAT scores", xlab="Average Teacher Salary (in thousands of dollars)", ylab="Average Total SAT Scores")
abline(coefs, lwd=3, col= "red")
coefs <- regression()$fit.res$coefficients
coefs <- regression()$fit.res$coefficients
regression <- reactive({
if (input$model == "Simple regression") {
fit.res <- lm(data$SAT~ data$Salary, data)
} else if (input$model == "Controlling for frac") {
fit.res <- lm(data$SAT~ data$Salary + data$Frac, data)
} else if (input$model == "First Fifth of Data") {
fit.res <- lm_list[[1]]
} else if (input$model == "Second Fifth of Data") {
fit.res <- lm_list[[2]]
} else if (input$model == "Third Fifth of Data") {
fit.res <- lm_list[[3]]
} else if (input$model == "Fourth Fifth of Data") {
fit.res <- lm_list[[4]]
} else if (input$model == "Last Fifth of Data") {
fit.res <- lm_list[[5]]
}
#print("fit.res")
#print(fit.res)
# Get the model summary
if (is.null(fit.res)) {
fit.summary <- NULL
}  else {
fit.summary <- summary(fit.res)
}
return(list(fit.res=fit.res, fit.summary=fit.summary))
})
shiny::runApp()
shiny::runApp()
asdasd
#kjlasndalsnd
shiny::runApp()
cut(satDF$frac, breaks = quantile(satDF$frac, probs= seq(0,1,5)))
cut(satDF$frac, breaks = quantile(satDF$frac, probs= seq(0,1,5)))
cut(satDF$frac, breaks = quantile(satDF$frac, probs= seq(0,1,5)))
fourths = cut(satDF$frac, breaks = quantile(satDF$frac, probs= seq(0,1,5)))
summary(fourths)
fourths = cut(satDF$frac, breaks = quantile(satDF$frac, probs= seq(0,1,5)))
levels(fourths)
levels(fourths)[1]
levels(fourths)[2]
levels(fourths)[2][1]
levels(fourths)[2][[1]]
levels(fourths)[2]
class(levels(fourths))
class(fourths)
fourths[1]
satDF$fourths = cut(satDF$frac, breaks = quantile(satDF$frac, probs= seq(0,1,5)))
View(satDF)
satDF$sat
View(satDF)
satDF$sat[fourths==1]
satDF$sat[fourths==2]
satDF$sat[satDF$fourths==2]
satDF$fourths
satDF$fourths==1
satDF$fourths==0
satDF$fourths==1
satDF$fourths[1]
satDF$fourths==(3.92,23.2]
satDF$fourths==((3.92,23.2])
class(satDF$fourths)
class(satDF$fourths[1])
class(satDF$fourths[[1]])
satDF$fourths==((3.92,23.2])
satDF$fourths==(("3.92,23.2]")
)
satDF$fourths
satDF$fourths[1]
class(satDF$fourths[1])
satDF$fourths[1]
class(satDF$frac)
class(satDF$fourths)
class(satDF$fourths)
satDF[ , satDF$fourths=[1]]
satDF[ , satDF$fourths=1]
satDF[ , satDF$fourths==1]
satDF[ , satDF$fourths==2]
satDF$fourths[1]
satDF[ , satDF$fourths==satDF$fourths[1]]
satDF$fourths[[1]]
satDF[ , satDF$fourths==satDF$fourths[[1]]]
as.character(satDF$fourths[[1]])
as.numeric(as.character(satDF$fourths[[1]]))
as.numeric(as.character(satDF$fourths[[1]]))
as.character(satDF$fourths[[1]])
satDF$fourths==   satDF$fourths[1]
satDF$fourths==   level(satDF$fourths)
satDF$fourths==   levels(satDF$fourths)
satDF$fourths==   levels(satDF$fourths)
satDF[ , satDF$fourths==satDF$fourths[[1]]]
satDF$fourths== levels(satDF$fourths)
as.numeric(as.character(satDF$fourths[[1]]))
as.numeric(as.character(satDF$fourths[1]))
satDF$fourths== levels(satDF$fourths)[1]
satDF[ , satDF$fourths== levels(satDF$fourths)[1]]
satDF[ satDF$fourths== levels(satDF$fourths)[1] , ]
satDF[ satDF$fourths== levels(satDF$fourths)[1] , ]
shiny::runApp()
shiny::runApp()
shiny::runApp()
lm(satDF$sat~ satDF$salary[satDF$fourths== levels(satDF$fourths)[1] , ], satDF)
lm(satDF$sat~ satDF$salary[satDF$fourths== levels(satDF$fourths)[1] , ], satDF)
lm(satDF$sat~ satDF$salary[satDF$fourths== levels(satDF$fourths)[1] , ], satDF)
lm(satDF$sat~ satDF$salary + satDF$frac, satDF)
lm(satDF$sat~ satDF$salary[satDF$fourths== levels(satDF$fourths)[1] , ], satDF)
lm(satDF$sat~ satDF$salary[satDF$fourths== levels(satDF$fourths)[1]], satDF)
fit.res <- lm(satDF$sat~ satDF$salary[which(satDF$fourths== levels(satDF$fourths)[1])], satDF)
which(satDF$fourths== levels(satDF$fourths)[1])
lm(satDF$sat~ satDF$salary[which(satDF$fourths== levels(satDF$fourths)[1]), ], satDF)
lm(satDF$sat~ satDF$salary[which(levels(satDF$fourths)[1]), ], satDF)
which(satDF$fourths==levels(satDF$fourths)[1])
satDF$salary[which(satDF$fourths==levels(satDF$fourths)[1]), ]
satDF$salary[which(satDF$fourths==levels(satDF$fourths)[1])]
lm(satDF$sat~ satDF$salary[which(satDF$fourths==levels(satDF$fourths)[1])], satDF)
lm(satDF$sat[which(satDF$fourths==levels(satDF$fourths)[1])]~ satDF$salary[which(satDF$fourths==levels(satDF$fourths)[1])], satDF)
shiny::runApp()
points(which(satDF$fourths==levels(satDF$fourths)[1]), col="blue", pch=15 )
plot(x, y, pch=16, cex=1.2, bty="n", main= "The Effect of Teacher Salary on SAT scores", xlab="Average Teacher Salary (in thousands of dollars)", ylab="Average Total SAT Scores")
abline(a = coefs[1], b = coefs[2], lwd=3, col= "red")
points(which(satDF$fourths==levels(satDF$fourths)[1]), col="blue", pch=15 )
points(which(satDF$fourths==levels(satDF$fourths)[1]), col="blue", pch=15 )
abline(1, 2, col="red")
abline(0, 2, col="red")
abline(x, 2, col="red")
abline(2, col="red")
abline(0, 2, col="red")
abline(0, 3, col="red")
abline(0, 1/3, col="red")
abline(0, 1/2, col="red")
abline(1/2, 1/2, col="red")
abline(1/2, 1/2, col="red")
plot(x, y, pch=16, cex=1.2, bty="n", main= "The Effect of Teacher Salary on SAT scores", xlab="Average Teacher Salary (in thousands of dollars)", ylab="Average Total SAT Scores")
abline(1/2, 1/2, col="red")
abline(coefs, lwd=3, col= "red")
plot(x, y, pch=16, cex=1.2, bty="n", main= "The Effect of Teacher Salary on SAT scores", xlab="Average Teacher Salary (in thousands of dollars)", ylab="Average Total SAT Scores")
plot.new( bty="n", main= "The Effect of Teacher Salary on SAT scores", xlab="Average Teacher Salary (in thousands of dollars)", ylab="Average Total SAT Scores")
plot.new()
plot.new()
par(bty="n", main= "The Effect of Teacher Salary on SAT scores", xlab="Average Teacher Salary (in thousands of dollars)", ylab="Average Total SAT Scores")
lm_list[[1]]
party = list()
for(i in 1:4){
party[[i]] = satDF[which(satDF$fourths==levels(satDF$fourths)[i])]
}
party = list()
for(i in 1:4){
party[[i]] = satDF[which(satDF$fourths==levels(satDF$fourths)[i]) , ]
}
party[[1]]
party[[2]]
plot.new()
plot(1, bty="n", main= "The Effect of Teacher Salary on SAT scores", xlab="Average Teacher Salary (in thousands of dollars)", ylab="Average Total SAT Scores")
plot(x, y, pch=16, cex=1.2, bty="n", main= "The Effect of Teacher Salary on SAT scores", xlab="Average Teacher Salary (in thousands of dollars)", ylab="Average Total SAT Scores")
plot(x, y, pch=16, type=”n”, cex=1.2, bty="n", main= "The Effect of Teacher Salary on SAT scores", xlab="Average Teacher Salary (in thousands of dollars)", ylab="Average Total SAT Scores")
plot(x, y, pch=16, type=”n”, cex=1.2, bty="n", main= "The Effect of Teacher Salary on SAT scores", xlab="Average Teacher Salary (in thousands of dollars)", ylab="Average Total SAT Scores")
plot(x, y, pch=16, type= "n", cex=1.2, bty="n", main= "The Effect of Teacher Salary on SAT scores", xlab="Average Teacher Salary (in thousands of dollars)", ylab="Average Total SAT Scores")
abline(coefs, lwd=3, col= "red")
points(party[[1]], col=red)
points(party[[1]], col="red")
abline(coefs, lwd=3, col= "red")
shiny::runApp()
points(party[[1]], col="red")
party[[1]]
party[[1]]$salary
points(party[[1]]$salary, col="red")
points(party[[1]]$salary, party[[1]]$sat, col="red")
points(party[[1]]$salary, party[[1]]$sat, pch=16, col="red")
points(party[[1]]$salary, party[[1]]$sat, pch=16, cex=1.2, col="red")
shiny::runApp()
points(x, y, pch=16, cex=1.2, col="red")
points(x, y, pch=16, cex=1.2, col="black")
points(party[[1]]$salary, party[[1]]$sat, pch=16, cex=1.2, col="red")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library("shinyRGL")
install.packages("shinyRGL")
library("shinyRGL")
setwd("~/Dropbox/Senior_Research/Stat_Summer15_Research/DynDocs/SAT/individual_shiny_apps/3Dplot")
setwd("~/DynDocs/SAT/individual_shiny_apps/3Dplot")
setwd("~/DynDocs/SAT/individual_shiny_apps/3Dplot")
library("shinyRGL")
setwd("~/DynDocs/SAT/individual_shiny_apps/3Dplot")
library(shiny)
runApp("3D_plot_0.1/")
setwd("~/DynDocs/SAT/individual_shiny_apps/simps_0.2")
library(shiny)
runApp("simps_tutorial_0.2/")
shiny::runApp('~/DynDocs/SAT/Interactive Regression')
shiny::runApp('~/DynDocs/SAT/Interactive Regression')
satDF$fourths = cut(satDF$frac, breaks = quantile(satDF$frac, probs= seq(0,1,5)))
summary(satDF$fourths)
shiny::runApp('~/DynDocs/SAT/Interactive Regression')
