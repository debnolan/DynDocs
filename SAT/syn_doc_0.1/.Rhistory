lm.3 = lm(sat ~ salary + ratio + frac, data = satDF)
summary(lm.3)
plot(rstandard(lm.3) ~ fitted(lm.3), xlab = "Fitted Values", ylab = "Standardized Residuals", main = "Model: sat ~ salary + ratio + frac")
coefficients(lm.3)["salary"] * sd(satDF$salary) / sd(satDF$sat)
coefficients(lm.3)["ratio"] * sd(satDF$ratio) / sd(satDF$sat)
plot(sat ~ frac, data = satDF)
with(satDF, text(x = frac, y= sat, labels = State, cex = 0.5, pos = 4))
cor(residuals(lm(sat ~ frac, data = satDF)), residuals(lm(expend ~ frac, data = satDF)))
cor(residuals(lm(sat ~ frac, data = satDF)), residuals(lm(salary ~ frac, data = satDF)))
cor(residuals(lm(sat ~ frac, data = satDF)), residuals(lm(ratio ~ frac, data = satDF)))
lm.3 = lm(sat ~ salary + ratio + frac, data = satDF)
summary(lm.3)
# satDF = read.csv("http://www.stat.berkeley.edu/users/nolan/data/sat.csv")
# save(satDF, file = "satDF.rda")
load("satDF.rda")
getwd()
setwd("/Users/Zeyu/Dropbox/Senior_Research/Stat_Summer15_Research/DynDocs/SAT/rda_data/")
load("satDF.rda")
### Question: which year is the data drawn from?
### variables: teacher salary(annual? average?); ratio(student-teacher ratio?); frac(eligible student?)
# produce a matrix of scatterplot
#### we can make a static matrix of scatterplot, maybe not necessary...
#### then we can make one correlation scatterplot that allow them to see the individual correlation,
#### and it would also show the corresponding numeric correlation coefficient.
#### For each scatterplot, independent variable x could be SAT overall, Math, Vor erbal; dependent variable
#### can be the rest of the variables (ratio, expend, frac, salary)
## # aslo we can make the scatterplot circle proportional to the state population...
## # also include a pointer that tells which state the point is...
pairs( satDF[ , c("expend","ratio","salary","frac", "sat")] )
# find correlations
cor( satDF[ , c("expend","ratio","salary","frac", "sat")] )
# expenditures are negatively correlated with SAT
# Four states increase the size, New Jersy, New York, Alaska, Connecticut.
order(satDF$expend, decreasing = T)
# The fraction of eligible students has the strongest correlation with SAT,
# and they are negatively correlated.
# Fraction of eligible students is highly positively correlated wtih expenditures
coplot(sat ~ salary | frac, data = satDF, xlab = "Expenditure", ylab = "SAT score")
# and teacher
lm.Ex = lm(sat ~ expend, data = satDF)
lm.frac = lm(sat ~ frac, data = satDF)
summary(lm.Ex)
summary(lm.frac)
plot(sat ~ salary, data = satDF)
coplot(sat ~ salary | frac, data = satDF, xlab = "Teacher Salary", ylab = "SAT score")
plot(residuals(lm.Ex) ~ satDF$frac,
## Two-variables
lm.ExFrac = lm(sat ~ expend + frac, data = satDF)
lm.RatFrac = lm(sat ~ ratio + frac, data = satDF)
xlab = "Fraction of Eligible Students Taking SAT", ylab = "Residuals", main = "Model: SAT scores ~ Expenditures")
summary(lm.RatFrac)
## 3-variable model
summary(lm.SalFrac)
lm.SalFrac = lm(sat ~ salary + frac, data = satDF)
## Fit a 3-variable model of SAT on teacher salary, student-teacher ratio, and eligible fraction.
summary(lm.ExFrac)
cor(residuals(lm(sat ~ frac, data = satDF)), residuals(lm(expend ~ frac, data = satDF)))
cor(residuals(lm(sat ~ frac, data = satDF)), residuals(lm(salary ~ frac, data = satDF)))
cor(residuals(lm(sat ~ frac, data = satDF)), residuals(lm(ratio ~ frac, data = satDF)))
lm.3 = lm(sat ~ salary + ratio + frac, data = satDF)
summary(lm.3)
plot(rstandard(lm.3) ~ fitted(lm.3), xlab = "Fitted Values", ylab = "Standardized Residuals", main = "Model: sat ~ salary + ratio + frac")
coefficients(lm.3)["salary"] * sd(satDF$salary) / sd(satDF$sat)
coefficients(lm.3)["ratio"] * sd(satDF$ratio) / sd(satDF$sat)
plot(sat ~ frac, data = satDF)
with(satDF, text(x = frac, y= sat, labels = State, cex = 0.5, pos = 4))
#### then we can make one correlation scatterplot that allow them to see the individual correlation,
#### and it would also show the corresponding numeric correlation coefficient.
#### For each scatterplot, independent variable x could be SAT overall, Math, Vor erbal; dependent variable
#### can be the rest of the variables (ratio, expend, frac, salary)
## # aslo we can make the scatterplot circle proportional to the state population...
## # also include a pointer that tells which state the point is...
pairs( satDF[ , c("expend","ratio","salary","frac", "sat")] )
# find correlations
cor( satDF[ , c("expend","ratio","salary","frac", "sat")] )
# expenditures are negatively correlated with SAT
# Four states increase the size, New Jersy, New York, Alaska, Connecticut.
order(satDF$expend, decreasing = T)
# The fraction of eligible students has the strongest correlation with SAT,
# and they are negatively correlated.
# Fraction of eligible students is highly positively correlated wtih expenditures
# and teacher
coplot(sat ~ salary | frac, data = satDF, xlab = "Expenditure", ylab = "SAT score")
lm.Ex = lm(sat ~ expend, data = satDF)
lm.frac = lm(sat ~ frac, data = satDF)
summary(lm.Ex)
summary(lm.frac)
plot(sat ~ salary, data = satDF)
coplot(sat ~ salary | frac, data = satDF, xlab = "Teacher Salary", ylab = "SAT score")
## Two-variables
plot(residuals(lm.Ex) ~ satDF$frac,
xlab = "Fraction of Eligible Students Taking SAT", ylab = "Residuals", main = "Model: SAT scores ~ Expenditures")
lm.ExFrac = lm(sat ~ expend + frac, data = satDF)
lm.SalFrac = lm(sat ~ salary + frac, data = satDF)
lm.RatFrac = lm(sat ~ ratio + frac, data = satDF)
summary(lm.ExFrac)
summary(lm.SalFrac)
summary(lm.RatFrac)
## 3-variable model
## Fit a 3-variable model of SAT on teacher salary, student-teacher ratio, and eligible fraction.
cor(residuals(lm(sat ~ frac, data = satDF)), residuals(lm(expend ~ frac, data = satDF)))
cor(residuals(lm(sat ~ frac, data = satDF)), residuals(lm(salary ~ frac, data = satDF)))
cor(residuals(lm(sat ~ frac, data = satDF)), residuals(lm(ratio ~ frac, data = satDF)))
lm.3 = lm(sat ~ salary + ratio + frac, data = satDF)
summary(lm.3)
plot(rstandard(lm.3) ~ fitted(lm.3), xlab = "Fitted Values", ylab = "Standardized Residuals", main = "Model: sat ~ salary + ratio + frac")
plot(sat ~ salary, data = satDF)
coplot(sat ~ salary | frac, data = satDF, xlab = "Teacher Salary", ylab = "SAT score")
## Two-variables
plot(residuals(lm.Ex) ~ satDF$frac,
xlab = "Fraction of Eligible Students Taking SAT", ylab = "Residuals", main = "Model: SAT scores ~ Expenditures")
lm.ExFrac = lm(sat ~ expend + frac, data = satDF)
lm.SalFrac = lm(sat ~ salary + frac, data = satDF)
lm.RatFrac = lm(sat ~ ratio + frac, data = satDF)
summary(lm.ExFrac)
summary(lm.SalFrac)
summary(lm.RatFrac)
## 3-variable model
## Fit a 3-variable model of SAT on teacher salary, student-teacher ratio, and eligible fraction.
cor(residuals(lm(sat ~ frac, data = satDF)), residuals(lm(expend ~ frac, data = satDF)))
cor(residuals(lm(sat ~ frac, data = satDF)), residuals(lm(salary ~ frac, data = satDF)))
cor(residuals(lm(sat ~ frac, data = satDF)), residuals(lm(ratio ~ frac, data = satDF)))
lm.3 = lm(sat ~ salary + ratio + frac, data = satDF)
summary(lm.3)
plot(rstandard(lm.3) ~ fitted(lm.3), xlab = "Fitted Values", ylab = "Standardized Residuals", main = "Model: sat ~ salary + ratio + frac")
coefficients(lm.3)["salary"] * sd(satDF$salary) / sd(satDF$sat)
coefficients(lm.3)["ratio"] * sd(satDF$ratio) / sd(satDF$sat)
plot(sat ~ frac, data = satDF)
with(satDF, text(x = frac, y= sat, labels = State, cex = 0.5, pos = 4))
plot(sat ~ frac, data = satDF)
coefficients(lm.3)["ratio"] * sd(satDF$ratio) / sd(satDF$sat)
cor(residuals(lm(sat ~ frac, data = satDF)), residuals(lm(expend ~ frac, data = satDF)))
cor(residuals(lm(sat ~ frac, data = satDF)), residuals(lm(salary ~ frac, data = satDF)))
cor(residuals(lm(sat ~ frac, data = satDF)), residuals(lm(ratio ~ frac, data = satDF)))
lm.3 = lm(sat ~ salary + ratio + frac, data = satDF)
summary(lm.3)
plot(rstandard(lm.3) ~ fitted(lm.3), xlab = "Fitted Values", ylab = "Standardized Residuals", main = "Model: sat ~ salary + ratio + frac")
library("shinyRGL")
setwd("~/Dropbox/Senior_Research/Stat_Summer15_Research/DynDocs/SAT/sat_3Dplot_0.1")
library(shiny)
runApp("3D_plot_0.1/")
load("data/satDF_one.rda")
setwd("~/Dropbox/Senior_Research/Stat_Summer15_Research/DynDocs/SAT/doc_0.1/SATapp")
load("data/satDF.rda")
load("data/satDF_one.rda")
View(satDF_one)
setwd("~/Dropbox/Senior_Research/Stat_Summer15_Research/DynDocs/SAT/sat_3Dplot_0.1/3D_plot_0.1")
setwd("~/Dropbox/Senior_Research/Stat_Summer15_Research/DynDocs/SAT/sat_3Dplot_0.1")
points3d
?points3d
library("shinyRGL")
setwd("~/Dropbox/Senior_Research/Stat_Summer15_Research/DynDocs/SAT/sat_3Dplot_0.1")
library(shiny)
runApp("3D_plot_0.1/")
library("shinyRGL")
setwd("~/Dropbox/Senior_Research/Stat_Summer15_Research/DynDocs/SAT/sat_3Dplot_0.1")
library(shiny)
runApp("3D_plot_0.1/")
library("shinyRGL")
setwd("~/Dropbox/Senior_Research/Stat_Summer15_Research/DynDocs/SAT/sat_3Dplot_0.1")
library(shiny)
runApp("3D_plot_0.1/")
load("../rda_data/satDF.rda")
load("../rda_data/satDF.rda")
library("shinyRGL")
setwd("~/Dropbox/Senior_Research/Stat_Summer15_Research/DynDocs/SAT/sat_3Dplot_0.1")
library(shiny)
runApp("3D_plot_0.1/")
library("shinyRGL")
setwd("~/Dropbox/Senior_Research/Stat_Summer15_Research/DynDocs/SAT/sat_3Dplot_0.1")
library(shiny)
runApp("3D_plot_0.1/")
library("shinyRGL")
setwd("~/Dropbox/Senior_Research/Stat_Summer15_Research/DynDocs/SAT/sat_3Dplot_0.1")
library(shiny)
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
points3d(satDF$salary, satDF$salary, satDF$frac)
points3d(satDF$salary, satDF$salary, satDF$frac)axes3d()
points3d(satDF$salary, satDF$salary, satDF$frac)
axes3d()
library(rgl)
points3d(satDF$salary, satDF$salary, satDF$frac)
axes3d()
(satDF$salary, satDF$salary, satDF$frac)
points3d(satDF$salary, satDF$salary, satDF$frac)
plot3D(satDF$salary, satDF$salary, satDF$frac)
open3d()
plot3D(satDF$salary, satDF$salary, satDF$frac)
axes3d()
plot3d(satDF$salary, satDF$salary, satDF$frac)
axes3d()
open3d()
plot3d(satDF$salary, satDF$salary, satDF$frac)
axes3d()
library(rgl)
satDF$salary
satDF$salary
satDF$frac
plot3d(satDF$salary, satDF$salary, satDF$frac)
hi = plot3d(satDF$salary, satDF$salary, satDF$frac)
plot3d(satDF$salary, satDF$salary, satDF$frac)
points3d(satDF$salary, satDF$salary, satDF$frac)
x <- sep.l <- iris$Sepal.Length
y <- pet.l <- iris$Petal.Length
z <- sep.w <- iris$Sepal.Width
points3d(x,y,z)
rgl.open() # Open a new RGL device
rgl.points(x, y, z, color ="lightgray") # Scatter plot
rgl.open() # Open a new RGL device
rgl.points(x, y, z, color ="lightgray") # Scatter plot
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
satDF$sat
satDF$salary * 1000
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
satDF$frac
satDF$frac * 100
satDF$frac * 10
runApp("3D_plot_0.1/")
satDF$salary
*100
satDF$salary * 1000
runApp("3D_plot_0.1/")
satDF$sat
(x - min(x))/(max(x)-min(x))
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
axes3d
?axes3d
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
rgl.spheres
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
M <- matrix(rnorm(36), 3, 12, dimnames=list(c('x','y','z'),
rep(LETTERS[1:4], 3)))
for (i in c(1,5,9)) {
quad <- as.data.frame(M[,i+0:3])
coeffs <- runif(2,0,3)
if (mean(coeffs) < 1) coeffs <- coeffs + 1 - mean(coeffs)
quad$C <- with(quad, coeffs[1]*(B-A) + coeffs[2]*(D-A) + A)
M[,i+0:3] <- as.matrix(quad)
}
open3d()
# Rows of M are x, y, z coords; transpose to plot
M <- t(M)
shift <- matrix(c(-3,3,0), 12, 3, byrow=TRUE)
points3d(M)
points3d(M)
open3d()
points3d(M)
plot3d(wt, disp, mpg, col="red", size=3)
plot3d(wt, disp, mpg, col="red", size=3)
library(rgl)
attach(mtcars)
plot3d(wt, disp, mpg, col="red", size=3)
install.packages("rgl")
install.packages("rgl")
library("rgl")
M <- matrix(rnorm(36), 3, 12, dimnames=list(c('x','y','z'),
rep(LETTERS[1:4], 3)))
# Force 4-tuples to be convex in planes so that quads3d works.
for (i in c(1,5,9)) {
quad <- as.data.frame(M[,i+0:3])
coeffs <- runif(2,0,3)
if (mean(coeffs) < 1) coeffs <- coeffs + 1 - mean(coeffs)
quad$C <- with(quad, coeffs[1]*(B-A) + coeffs[2]*(D-A) + A)
M[,i+0:3] <- as.matrix(quad)
}
open3d()
# Rows of M are x, y, z coords; transpose to plot
M <- t(M)
shift <- matrix(c(-3,3,0), 12, 3, byrow=TRUE)
points3d(M)
points3d(M)
rgl.open()
points3d(M)
runApp("3D_plot_0.1/")
library(shiny)
runApp("3D_plot_0.1/")
library(shiny)
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
plot3d()
?plot3d
runApp("3D_plot_0.1/")
rainbow(1000)
plot3d(x1, y1, z1, col = rainbow(100), xlab = input$x,
ylab = input$y, zlab = input$z)
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
?plot3D
example(persp3D)
library(plot3D)
example(persp3D)
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
runApp("3D_plot_0.1/")
setwd("~/Dropbox/Senior_Research/Stat_Summer15_Research/DynDocs/SAT/doc_0.1")
library(shiny)
runApp("SATapp/")
setwd("~/Dropbox/Senior_Research/Stat_Summer15_Research/DynDocs/SAT/doc_0.1")
library(shiny)
runApp("SATapp/")
library("shinyRGL")
setwd("~/Dropbox/Senior_Research/Stat_Summer15_Research/DynDocs/SAT/sat_3Dplot_0.1")
library(shiny)
runApp("3D_plot_0.1/")
library("shinyRGL")
setwd("~/Dropbox/Senior_Research/Stat_Summer15_Research/DynDocs/SAT/sat_3Dplot_0.1")
library(shiny)
runApp("3D_plot_0.1/")
library("shinyRGL")
setwd("~/Dropbox/Senior_Research/Stat_Summer15_Research/DynDocs/SAT/sat_3Dplot_0.1")
library(shiny)
runApp("3D_plot_0.1/")
library("shinyRGL")
setwd("~/Dropbox/Senior_Research/Stat_Summer15_Research/DynDocs/SAT/sat_3Dplot_0.1")
library(shiny)
runApp("3D_plot_0.1/")
library("shinyRGL")
setwd("~/Dropbox/Senior_Research/Stat_Summer15_Research/DynDocs/SAT/sat_3Dplot_0.1")
library(shiny)
runApp("3D_plot_0.1/")
library("shinyRGL")
setwd("~/Dropbox/Senior_Research/Stat_Summer15_Research/DynDocs/SAT/sat_3Dplot_0.1")
library(shiny)
runApp("3D_plot_0.1/")
setwd("~/Dropbox/Senior_Research/Stat_Summer15_Research/DynDocs/SAT/doc_0.1")
library(shiny)
runApp("SATapp/")
setwd("~/Dropbox/Senior_Research/Stat_Summer15_Research/DynDocs/SAT/doc_0.1")
library(shiny)
runApp("SATapp/")
setwd("~/Dropbox/Senior_Research/Stat_Summer15_Research/DynDocs/SAT/doc_0.1")
library(shiny)
runApp("SATapp/")
runApp("SATapp/")
pageWithSidebar(
# Application title
headerPanel("3-variable-satterplot"),
# Sidebar with a slider input for number of points
sidebarPanel(
selectInput("x", "Choose an x variable:",
choices = list("Expenditure Per Pupil (in 000's of dollars)" = "expend",
"Student-Teacher Ratio" = "ratio",
"Teacher Salary (in 000's of dollars)" = "salary",
"Eligible Student Fraction" = "frac"),
selected = "salary"),
selectInput("y", "Choose a y variable",
choices = list("SAT Total Score" = "sat",
"SAT Math Score" = "math",
"SAT Verbal Score" = "verbal"),
selected = "sat"),
selectInput("z", "Choose a z variable:",
choices = list("Expenditure Per Pupil (in 000's of dollars)" = "expend",
"Student-Teacher Ratio" = "ratio",
"Teacher Salary (in 000's of dollars)" = "salary",
"Eligible Student Fraction" = "frac"),
selected = "frac")
),
# Show the generated 3d scatterplot
mainPanel(
webGLOutput("sctPlot")
)
)
fluidPage(
#  Application title
titlePanel("Simpson's Paradox"),
# options
sidebarLayout(
sidebarPanel(
#       # option to fix the conditional proabilities
#       sliderInput("success_rate_A_small", "Treatment A Success Rate For Small Kidney Stones:",
#                   min = 0, max = 1, value = 0.93, step = 0.01),
#       sliderInput("success_rate_B_small", "Treatment B Success Rate for Small Kidney Stones:",
#                   min = 0, max = 1, value = 0.87, step = 0.01),
#       sliderInput("success_rate_A_large", "Treatment A Success Rate For Large Kidney Stones:",
#                   min = 0, max = 1, value = 0.73, step = 0.01),
#       sliderInput("success_rate_B_large", "Treatment B Success Rate for Large Kidney Stones:",
#                   min = 0, max = 1, value = 0.69, step = 0.01),
#       # option to fix the total procedure counts
#       sliderInput("Treatment_count_A", "Treatment A Total Counts:",
#                   min = 0, max = 1, value = 0.87),
#       sliderInput("Treatment_count_B", "Treatment B Total Counts:",
#                   min = 0, max = 1, value = 0.87),
sliderInput("count_A_small", "Treatment A Count For Small Kidney Stones:",
min = 0, max = 350, value = 87, step = 1),
sliderInput("count_B_small", "Treatment B Count For Small Kidney Stones:",
min = 0, max = 350, value = 263, step = 1)
),
# Show a table summarizing the values entered
mainPanel(
tableOutput("table"),
textOutput("yesorno")
)
)
)
runApp("SATapp/")
runApp("SATapp/")
runApp("SATapp/")
runApp("SATapp/")
runApp("3D_plot_0.1/")
library("shinyRGL")
setwd("~/Dropbox/Senior_Research/Stat_Summer15_Research/DynDocs/SAT/sat_3Dplot_0.1")
library(shiny)
runApp("3D_plot_0.1/")
runApp("SATapp/")
setwd("~/Dropbox/Senior_Research/Stat_Summer15_Research/DynDocs/SAT/doc_0.1")
library(shiny)
runApp("SATapp/")
setwd("~/Dropbox/Senior_Research/Stat_Summer15_Research/DynDocs/SAT/doc_0.1")
library(shiny)
runApp("SATapp/")
runApp("SATapp/")
runApp("SATapp/")
library("shinyRGL")
setwd("~/Dropbox/Senior_Research/Stat_Summer15_Research/DynDocs/SAT/sat_3Dplot_0.1")
library(shiny)
runApp("3D_plot_0.1/")
pageWithSidebar(
# Application title
headerPanel("3-variable-satterplot"),
# Sidebar with a slider input for number of points
sidebarPanel(
selectInput("x", "Choose an x variable:",
choices = list("Expenditure Per Pupil (in 000's of dollars)" = "expend",
"Student-Teacher Ratio" = "ratio",
"Teacher Salary (in 000's of dollars)" = "salary",
"Eligible Student Fraction" = "frac"),
selected = "salary"),
selectInput("y", "Choose a y variable",
choices = list("SAT Total Score" = "sat",
"SAT Math Score" = "math",
"SAT Verbal Score" = "verbal"),
selected = "sat"),
selectInput("z", "Choose a z variable:",
choices = list("Expenditure Per Pupil (in 000's of dollars)" = "expend",
"Student-Teacher Ratio" = "ratio",
"Teacher Salary (in 000's of dollars)" = "salary",
"Eligible Student Fraction" = "frac"),
selected = "frac")
),
# Show the generated 3d scatterplot
mainPanel(
webGLOutput("sctPlot")
)
)
setwd("~/Dropbox/Senior_Research/Stat_Summer15_Research/DynDocs/SAT/doc_0.1")
library(shiny)
runApp("SATapp/")
runApp("SATapp/")
library("shinyRGL")
setwd("~/Dropbox/Senior_Research/Stat_Summer15_Research/DynDocs/SAT/sat_3Dplot_0.1")
library(shiny)
runApp("3D_plot_0.1/")
runApp("SATapp/")
setwd("~/Dropbox/Senior_Research/Stat_Summer15_Research/DynDocs/SAT/doc_0.1")
library(shiny)
runApp("SATapp/")
runApp("SATapp/")
library(shiny)
runApp("SATapp/")
runApp("SATapp/")
runApp("SATapp/")
runApp("SATapp/")
plot3d
?plot3d
runApp("SATapp/")
runApp("SATapp/")
("SATapp/")
runApp("SATapp/")
runApp("SATapp/")
