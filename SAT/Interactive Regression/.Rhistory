library(shiny)
runApp("Interactive Regression")
shiny::runApp()
setwd("~/DynDocs/SAT/Interactive Regression")
load("data/satDF.rda")
satDF$halves = split(satDF$frac, breaks = quantile(satDF$frac, probs= seq(0,1,5)))
split(satDF$frac, >50)
satDF$halves = split(satDF$frac, cut(das$anim, 3))
satDF$halves = split(satDF$frac, cut(satDF$frac, 2))
satDF$halves
satDF$halves
satDF$halves[1]
satDF$halves[2]
satDF$halves[1]
summary(satDF$halves)
list(satDF$halves)
party = list()
for(i in 1:2){
party[[i]] = satDF[which(satDF$halves[i]) , ]
}
party = list()
for(i in 1:2){
party[[i]] = satDF[satDF$halves[i] , ]
}
split(satDF$frac, cut(satDF$frac, 2))
satDF$halves
View(satDF)
satDF$halves = cut(satDF$frac, cut(satDF$frac, 2))
cut(satDF$frac, cut(satDF$frac, 2))
satDF$halves = cut(satDF$frac, breaks = cut(satDF$frac, 2))
split(satDF$frac, cut(satDF$frac, 2))
which(split(satDF$frac, cut(satDF$frac, 2)))
satDF$halves = cut(satDF$frac, breaks = cut(satDF$frac, 2))
median(satDF$frac)
mean(satDF$frac)
satDF$halves = cut(satDF$frac, breaks = 40
)
satDF$halves = cut(satDF$frac, breaks = 40)
View(satDF)
satDF$halves = cut(satDF$frac, breaks = 2)
satDF$halves = cut(satDF$frac, breaks = 2)
View(satDF)
party = list()
for(i in 1:2){
party[[i]] = satDF[satDF$halves[i] , ]
}
party
party = list()
for(i in 1:2){
party[[i]] = satDF[satDF$halves[[i]] , ]
}
party
levels(satDF$halves)
party = list()
for(i in 1:2){
party[[i]] = satDF[which(which(satDF$halves==levels(satDF$halves)[i]) , ]
}
party = list()
for(i in 1:2){
party[[i]] = satDF[which(which(satDF$halves==levels(satDF$halves)[i]) , ]
}
party[[i]] = satDF[which(satDF$halves==levels(satDF$halves)[i]) , ]
}
party = list()
for(i in 1:2){
party[[i]] = satDF[which(satDF$halves==levels(satDF$halves)[i]) , ]
}
party
lm_list = list()
for(i in 1:2){
lm_list[[i]] = lm(satDF$sat[which(satDF$halves==levels(satDF$halves)[i])]~ satDF$salary[which(satDF$halves==levels(satDF$halves)[i])], satDF)
}
regression <- reactive({
if (input$model == "Simple regression") {
fit.res <- lm(satDF$sat~ satDF$salary, satDF)
} else if (input$model == "First Fourth of Data") {
fit.res <-lm_list[[1]]
} else if (input$model == "Second Fourth of Data") {
fit.res <- lm_list[[2]]
} else if (input$model == "Third Fourth of Data") {
fit.res <- lm_list[[3]]
} else if (input$model == "Last Fourth of Data") {
fit.res <- lm_list[[4]]
}
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
satDF$halves = cut(satDF$frac, breaks = 2)
View(satDF)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(satDF)
satDF$halves = cut(satDF$frac, breaks = 3)
View(satDF)
