coplot(sat ~ expend | frac, data = satDF, xlab = "Expenditure", ylab = "SAT score")
satDF = read.csv("http://www.stat.berkeley.edu/users/nolan/data/sat.csv")
?save
setwd("~/Dropbox/Senior_Research/Stat_Summer15_Research/DynDocs/SAT")
save(satDF, "satDF.rda")
save(satDF, satDF.rda)
save(satDF, file = "satDF.rda")
load(satDF.rda)
load("satDF.rda")
load("satDF.rda")
coplot(sat ~ expend | frac, data = satDF, xlab = "Expenditure", ylab = "SAT score")
View(satDF)
coplot(sat ~ salary | frac, data = satDF, xlab = "Expenditure", ylab = "SAT score")
summary(lm.SalFrac)
lm.SalFrac = lm(sat ~ salary + frac, data = satDF)
summary(lm.SalFrac)
lm.SalFrac = lm(sat ~ salary + frac, data = satDF)
summary(lm.SalFrac)
plot(sat ~ salary, data = satDF)
coplot(sat ~ salary | frac, data = satDF, xlab = "Teacher Salary", ylab = "SAT score")
plot(sat ~ ratio, data = satDF)
coplot(sat ~ ratio | frac, data = satDF, xlab = "Teacher Salary", ylab = "SAT score")
plot(sat ~ salary, data = satDF)
coplot(sat ~ salary | ratio, data = satDF, xlab = "Teacher Salary", ylab = "SAT score")
coplot(sat ~ salary | expend, data = satDF, xlab = "Teacher Salary", ylab = "SAT score")
View(satDF)
plot(math ~ salary, data = satDF)
coplot(math ~ salary | frac, data = satDF, xlab = "Teacher Salary", ylab = "SAT score")
coplot(math ~ salary | ratio, data = satDF, xlab = "Teacher Salary", ylab = "SAT score")
coplot(math ~ expend | frac, data = satDF, xlab = "Teacher Salary", ylab = "SAT score")
plot(math ~ expend, data = satDF)
coplot(math ~ expend | frac, data = satDF, xlab = "Teacher Salary", ylab = "SAT score")
plot(math ~ expend, data = satDF)
plot(math ~ salary, data = satDF)
coplot(math ~ salary | frac, data = satDF, xlab = "Teacher Salary", ylab = "SAT score")
coplot(math ~ salary | frac, data = satDF, xlab = "Teacher Salary", ylab = "SAT score")
plot(math ~ salary, data = satDF)
coplot(math ~ salary | frac, data = satDF, xlab = "Teacher Salary", ylab = "SAT score")
load("satDF.rda")
setwd("~/Dropbox/Senior_Research/Stat_Summer15_Research/DynDocs/SAT")
load("satDF.rda")
library(lattice)
plot(sat ~ salary, data = satDF, xlab = "Teacher Salary", ylab = "SAT score")
lm.Ex = lm(sat ~ salary, data = satDF)
abline(lm.Ex)
coplot(sat ~ salary | frac, data = satDF, xlab = "Expenditure", ylab = "SAT score")
?coplot
co.intervals(satDF$frac)
co.intervals(satDF$frac)
View(satDF)
cut(satDF$frac, breaks = frac_intervals)
frac_intervals = co.intervals(satDF$frac)
cut(satDF$frac, breaks = frac_intervals)
which(satDF$frac >=frac_intervals[1,1] & satDF$frac <= frac_intervals[1,1])
satDF$frac
which(satDF$frac >=frac_intervals[1,1])
frac_intervals[1,]
intersect(satDF$frac, frac_intervals[1,])
intersect(satDF$frac, frac_intervals[2,])
which(satDF$frac >= frac_intervals[1,1] & satDF$frac <= frac_intervals[1,2])
frac_group = function(interval_group, data = satDF$frac){
which(satDF$frac >= interval_group[1] & satDF$frac <= interval_group[2])
}
frac_group(frac_intervals[1,])
frac_group(frac_intervals[2,])
frac_group(frac_intervals[3,])
for (i in 1:6){
frac_list = list()
frac_list[[i]] = frac_group(frac_intervals[i])
}
frac_list
for (i in 1:6){
frac_list = list()
frac_list[[i]] = frac_group(frac_intervals[i,])
}
frac_list
frac_list = list()
for (i in 1:6){
frac_list[[i]] = frac_group(frac_intervals[i,])
}
frac_list
plot(sat ~ frac, data = satDF) with(satDF, text(x = frac, y= sat, labels = State, cex = 0.5, pos = 4))
lm.Ex = lm(sat ~ expend, data = satDF)
lm.frac = lm(sat ~ frac, data = satDF)
summary(lm.Ex)
summary(lm.frac)
plot(sat ~ salary, data = satDF)
coplot(sat ~ salary | frac, data = satDF, xlab = "Teacher Salary", ylab = "SAT score")
## Two-variables
plot(residuals(lm.Ex) ~ satDF$frac,
xlab = "Fraction of Eligible Students Taking SAT", ylab = "Residuals", main = "Model: SAT scores ~ Expenditures")
lm.ExFrac = lm(sat ~ expend + frac, data = satDF)
lm.SalFrac = lm(sat ~ salary + frac, data = satDF)
lm.RatFrac = lm(sat ~ ratio + frac, data = satDF)
summary(lm.ExFrac)
summary(lm.SalFrac)
summary(lm.RatFrac)
## 3-variable model
## Fit a 3-variable model of SAT on teacher salary, student-teacher ratio, and eligible fraction.
cor(residuals(lm(sat ~ frac, data = satDF)), residuals(lm(expend ~ frac, data = satDF)))
cor(residuals(lm(sat ~ frac, data = satDF)), residuals(lm(salary ~ frac, data = satDF)))
cor(residuals(lm(sat ~ frac, data = satDF)), residuals(lm(ratio ~ frac, data = satDF)))
lm.3 = lm(sat ~ salary + ratio + frac, data = satDF)
summary(lm.3)
plot(rstandard(lm.3) ~ fitted(lm.3), xlab = "Fitted Values", ylab = "Standardized Residuals", main = "Model: sat ~ salary + ratio + frac")
coefficients(lm.3)["salary"] * sd(satDF$salary) / sd(satDF$sat)
coefficients(lm.3)["ratio"] * sd(satDF$ratio) / sd(satDF$sat)
plot(sat ~ frac, data = satDF) with(satDF, text(x = frac, y= sat, labels = State, cex = 0.5, pos = 4))
plot(rstandard(lm.3) ~ fitted(lm.3), xlab = "Fitted Values", ylab = "Standardized Residuals", main = "Model: sat ~ salary + ratio + frac")
satDF$sat[frac_list[[1]]]
lm(sat[frac_list[[i]]] ~ salary[frac_list[[i]]], data = satDF)
for(i in 1:6){
lm_list[[i]] = lm(sat[frac_list[[i]]] ~ salary[frac_list[[i]]], data = satDF)
}
lm_list = list()
for(i in 1:6){
lm_list[[i]] = lm(sat[frac_list[[i]]] ~ salary[frac_list[[i]]], data = satDF)
}
lm_list
abline(lm_list[[1]])
plot(sat ~ salary, data = satDF, xlab = "Teacher Salary", ylab = "SAT score")
abline(lm_list[[1]])
plot(sat ~ salary, data = satDF, xlab = "Teacher Salary", ylab = "SAT score")
# fit the regression
lm.Ex = lm(sat ~ salary, data = satDF)
abline(lm.Ex)
abline(lm_list[[1]], col = "pink")
abline(lm_list[[1]], col = "blue")
for(i in 1:6){
abline(lm_list[[i]], col = "blue")
}
plot(sat ~ salary, data = satDF, xlab = "Teacher Salary", ylab = "SAT score")
lm.Ex = lm(sat ~ salary, data = satDF)
abline(lm.Ex)
for(i in 1:6){
abline(lm_list[[i]], col = "blue")
}
plot(sat ~ salary, data = satDF, xlab = "Teacher Salary", ylab = "SAT score", lwd = 3)
lm.Ex = lm(sat ~ salary, data = satDF)
abline(lm.Ex)
for(i in 1:6){
abline(lm_list[[i]], col = "blue")
}
plot(sat ~ salary, data = satDF, xlab = "Teacher Salary", ylab = "SAT score")
lm.Ex = lm(sat ~ salary, data = satDF)
abline(lm.Ex, lwd = 3)
for(i in 1:6){
abline(lm_list[[i]], col = "blue")
}
