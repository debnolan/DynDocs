## 3-variable model
## Fit a 3-variable model of SAT on teacher salary, student-teacher ratio, and eligible fraction.
cor(residuals(lm(sat ~ frac, data = satDF)), residuals(lm(expend ~ frac, data = satDF)))
cor(residuals(lm(sat ~ frac, data = satDF)), residuals(lm(salary ~ frac, data = satDF)))
cor(residuals(lm(sat ~ frac, data = satDF)), residuals(lm(ratio ~ frac, data = satDF)))
lm.3 = lm(sat ~ salary + ratio + frac, data = satDF)
summary(lm.3)
plot(rstandard(lm.3) ~ fitted(lm.3), xlab = "Fitted Values", ylab = "Standardized Residuals", main = "Model: sat ~ salary + ratio + frac")
coefficients(lm.3)["salary"] * sd(satDF$salary) / sd(satDF$sat)
coefficients(lm.3)["ratio"] * sd(satDF$ratio) / sd(satDF$sat)
plot(sat ~ frac, data = satDF) with(satDF, text(x = frac, y= sat, labels = State, cex = 0.5, pos = 4))
plot(rstandard(lm.3) ~ fitted(lm.3), xlab = "Fitted Values", ylab = "Standardized Residuals", main = "Model: sat ~ salary + ratio + frac")
satDF$sat[frac_list[[1]]]
lm(sat[frac_list[[i]]] ~ salary[frac_list[[i]]], data = satDF)
for(i in 1:6){
lm_list[[i]] = lm(sat[frac_list[[i]]] ~ salary[frac_list[[i]]], data = satDF)
}
lm_list = list()
for(i in 1:6){
lm_list[[i]] = lm(sat[frac_list[[i]]] ~ salary[frac_list[[i]]], data = satDF)
}
lm_list
abline(lm_list[[1]])
plot(sat ~ salary, data = satDF, xlab = "Teacher Salary", ylab = "SAT score")
abline(lm_list[[1]])
plot(sat ~ salary, data = satDF, xlab = "Teacher Salary", ylab = "SAT score")
# fit the regression
lm.Ex = lm(sat ~ salary, data = satDF)
abline(lm.Ex)
abline(lm_list[[1]], col = "pink")
abline(lm_list[[1]], col = "blue")
for(i in 1:6){
abline(lm_list[[i]], col = "blue")
}
plot(sat ~ salary, data = satDF, xlab = "Teacher Salary", ylab = "SAT score")
lm.Ex = lm(sat ~ salary, data = satDF)
abline(lm.Ex)
for(i in 1:6){
abline(lm_list[[i]], col = "blue")
}
plot(sat ~ salary, data = satDF, xlab = "Teacher Salary", ylab = "SAT score", lwd = 3)
lm.Ex = lm(sat ~ salary, data = satDF)
abline(lm.Ex)
for(i in 1:6){
abline(lm_list[[i]], col = "blue")
}
plot(sat ~ salary, data = satDF, xlab = "Teacher Salary", ylab = "SAT score")
lm.Ex = lm(sat ~ salary, data = satDF)
abline(lm.Ex, lwd = 3)
for(i in 1:6){
abline(lm_list[[i]], col = "blue")
}
summary(lm.SalFrac)
load("satDF.rda")
lm_list
source('~/.active-rstudio-document', echo=TRUE)
lm_list
# fixing a confounding variable
coplot(sat ~ salary | frac, data = satDF, xlab = "Expenditure", ylab = "SAT score")
frac_intervals = co.intervals(satDF$frac)
# write a function that extract 6 frac groups
frac_group = function(interval_group, data = satDF$frac){
which(satDF$frac >= interval_group[1] & satDF$frac <= interval_group[2])
}
frac_list = list()
for (i in 1:6){
frac_list[[i]] = frac_group(frac_intervals[i,])
}
frac_list = lapply()
lm_list = list()
for(i in 1:6){
lm_list[[i]] = lm(sat[frac_list[[i]]] ~ salary[frac_list[[i]]], data = satDF)
}
plot(sat ~ salary, data = satDF, xlab = "Teacher Salary", ylab = "SAT score")
lm.Ex = lm(sat ~ salary, data = satDF)
abline(lm.Ex, lwd = 3)
for(i in 1:6){
abline(lm_list[[i]], col = "blue")
}
lm_list
lm_summary_list = lapply(lm_list, summary)
lm_summary_list
summary(lm.SalFrac)
source('~/Dropbox/Senior_Research/Stat_Summer15_Research/DynDocs/SAT/preliminary_analysis.R', echo=TRUE)
summary(lm.SalFrac)
# satDF = read.csv("http://www.stat.berkeley.edu/users/nolan/data/sat.csv")
# save(satDF, file = "satDF.rda")
load("satDF.rda")
### Question: which year is the data drawn from?
### variables: teacher salary(annual? average?); ratio(student-teacher ratio?); frac(eligible student?)
# produce a matrix of scatterplot
#### we can make a static matrix of scatterplot, maybe not necessary...
#### then we can make one correlation scatterplot that allow them to see the individual correlation,
#### and it would also show the corresponding numeric correlation coefficient.
#### For each scatterplot, independent variable x could be SAT overall, Math, Vor erbal; dependent variable
#### can be the rest of the variables (ratio, expend, frac, salary)
## # aslo we can make the scatterplot circle proportional to the state population...
## # also include a pointer that tells which state the point is...
pairs( satDF[ , c("expend","ratio","salary","frac", "sat")] )
# find correlations
cor( satDF[ , c("expend","ratio","salary","frac", "sat")] )
# expenditures are negatively correlated with SAT
# Four states increase the size, New Jersy, New York, Alaska, Connecticut.
order(satDF$expend, decreasing = T)
# The fraction of eligible students has the strongest correlation with SAT,
# and they are negatively correlated.
# Fraction of eligible students is highly positively correlated wtih expenditures
# and teacher
coplot(sat ~ salary | frac, data = satDF, xlab = "Expenditure", ylab = "SAT score")
lm.Ex = lm(sat ~ expend, data = satDF)
lm.frac = lm(sat ~ frac, data = satDF)
summary(lm.Ex)
summary(lm.frac)
plot(sat ~ salary, data = satDF)
coplot(sat ~ salary | frac, data = satDF, xlab = "Teacher Salary", ylab = "SAT score")
## Two-variables
plot(residuals(lm.Ex) ~ satDF$frac,
xlab = "Fraction of Eligible Students Taking SAT", ylab = "Residuals", main = "Model: SAT scores ~ Expenditures")
lm.ExFrac = lm(sat ~ expend + frac, data = satDF)
lm.SalFrac = lm(sat ~ salary + frac, data = satDF)
lm.RatFrac = lm(sat ~ ratio + frac, data = satDF)
summary(lm.ExFrac)
summary(lm.SalFrac)
summary(lm.RatFrac)
## 3-variable model
## Fit a 3-variable model of SAT on teacher salary, student-teacher ratio, and eligible fraction.
cor(residuals(lm(sat ~ frac, data = satDF)), residuals(lm(expend ~ frac, data = satDF)))
cor(residuals(lm(sat ~ frac, data = satDF)), residuals(lm(salary ~ frac, data = satDF)))
cor(residuals(lm(sat ~ frac, data = satDF)), residuals(lm(ratio ~ frac, data = satDF)))
lm.3 = lm(sat ~ salary + ratio + frac, data = satDF)
summary(lm.3)
plot(rstandard(lm.3) ~ fitted(lm.3), xlab = "Fitted Values", ylab = "Standardized Residuals", main = "Model: sat ~ salary + ratio + frac")
coefficients(lm.3)["salary"] * sd(satDF$salary) / sd(satDF$sat)
coefficients(lm.3)["ratio"] * sd(satDF$ratio) / sd(satDF$sat)
plot(sat ~ frac, data = satDF) with(satDF, text(x = frac, y= sat, labels = State, cex = 0.5, pos = 4))
# satDF = read.csv("http://www.stat.berkeley.edu/users/nolan/data/sat.csv")
# save(satDF, file = "satDF.rda")
load("satDF.rda")
### Question: which year is the data drawn from?
### variables: teacher salary(annual? average?); ratio(student-teacher ratio?); frac(eligible student?)
# produce a matrix of scatterplot
#### we can make a static matrix of scatterplot, maybe not necessary...
#### then we can make one correlation scatterplot that allow them to see the individual correlation,
#### and it would also show the corresponding numeric correlation coefficient.
#### For each scatterplot, independent variable x could be SAT overall, Math, Vor erbal; dependent variable
#### can be the rest of the variables (ratio, expend, frac, salary)
## # aslo we can make the scatterplot circle proportional to the state population...
## # also include a pointer that tells which state the point is...
pairs( satDF[ , c("expend","ratio","salary","frac", "sat")] )
# find correlations
cor( satDF[ , c("expend","ratio","salary","frac", "sat")] )
# expenditures are negatively correlated with SAT
# Four states increase the size, New Jersy, New York, Alaska, Connecticut.
order(satDF$expend, decreasing = T)
# The fraction of eligible students has the strongest correlation with SAT,
# and they are negatively correlated.
# Fraction of eligible students is highly positively correlated wtih expenditures
# and teacher
coplot(sat ~ salary | frac, data = satDF, xlab = "Expenditure", ylab = "SAT score")
lm.Ex = lm(sat ~ expend, data = satDF)
lm.frac = lm(sat ~ frac, data = satDF)
summary(lm.Ex)
summary(lm.frac)
plot(sat ~ salary, data = satDF)
coplot(sat ~ salary | frac, data = satDF, xlab = "Teacher Salary", ylab = "SAT score")
## Two-variables
plot(residuals(lm.Ex) ~ satDF$frac,
xlab = "Fraction of Eligible Students Taking SAT", ylab = "Residuals", main = "Model: SAT scores ~ Expenditures")
lm.ExFrac = lm(sat ~ expend + frac, data = satDF)
lm.SalFrac = lm(sat ~ salary + frac, data = satDF)
lm.RatFrac = lm(sat ~ ratio + frac, data = satDF)
summary(lm.ExFrac)
summary(lm.SalFrac)
summary(lm.RatFrac)
## 3-variable model
## Fit a 3-variable model of SAT on teacher salary, student-teacher ratio, and eligible fraction.
cor(residuals(lm(sat ~ frac, data = satDF)), residuals(lm(expend ~ frac, data = satDF)))
cor(residuals(lm(sat ~ frac, data = satDF)), residuals(lm(salary ~ frac, data = satDF)))
cor(residuals(lm(sat ~ frac, data = satDF)), residuals(lm(ratio ~ frac, data = satDF)))
lm.3 = lm(sat ~ salary + ratio + frac, data = satDF)
summary(lm.3)
plot(rstandard(lm.3) ~ fitted(lm.3), xlab = "Fitted Values", ylab = "Standardized Residuals", main = "Model: sat ~ salary + ratio + frac")
coefficients(lm.3)["salary"] * sd(satDF$salary) / sd(satDF$sat)
coefficients(lm.3)["ratio"] * sd(satDF$ratio) / sd(satDF$sat)
plot(sat ~ frac, data = satDF) with(satDF, text(x = frac, y= sat, labels = State, cex = 0.5, pos = 4))
# satDF = read.csv("http://www.stat.berkeley.edu/users/nolan/data/sat.csv")
# save(satDF, file = "satDF.rda")
load("satDF.rda")
### Question: which year is the data drawn from?
### variables: teacher salary(annual? average?); ratio(student-teacher ratio?); frac(eligible student?)
# produce a matrix of scatterplot
#### we can make a static matrix of scatterplot, maybe not necessary...
#### then we can make one correlation scatterplot that allow them to see the individual correlation,
#### and it would also show the corresponding numeric correlation coefficient.
#### For each scatterplot, independent variable x could be SAT overall, Math, Vor erbal; dependent variable
#### can be the rest of the variables (ratio, expend, frac, salary)
## # aslo we can make the scatterplot circle proportional to the state population...
## # also include a pointer that tells which state the point is...
pairs( satDF[ , c("expend","ratio","salary","frac", "sat")] )
# find correlations
cor( satDF[ , c("expend","ratio","salary","frac", "sat")] )
# expenditures are negatively correlated with SAT
# Four states increase the size, New Jersy, New York, Alaska, Connecticut.
order(satDF$expend, decreasing = T)
# The fraction of eligible students has the strongest correlation with SAT,
# and they are negatively correlated.
# Fraction of eligible students is highly positively correlated wtih expenditures
# and teacher
coplot(sat ~ salary | frac, data = satDF, xlab = "Expenditure", ylab = "SAT score")
lm.Ex = lm(sat ~ expend, data = satDF)
lm.frac = lm(sat ~ frac, data = satDF)
summary(lm.Ex)
summary(lm.frac)
plot(sat ~ salary, data = satDF)
coplot(sat ~ salary | frac, data = satDF, xlab = "Teacher Salary", ylab = "SAT score")
## Two-variables
plot(residuals(lm.Ex) ~ satDF$frac,
xlab = "Fraction of Eligible Students Taking SAT", ylab = "Residuals", main = "Model: SAT scores ~ Expenditures")
lm.ExFrac = lm(sat ~ expend + frac, data = satDF)
lm.SalFrac = lm(sat ~ salary + frac, data = satDF)
lm.RatFrac = lm(sat ~ ratio + frac, data = satDF)
summary(lm.ExFrac)
summary(lm.SalFrac)
summary(lm.RatFrac)
## 3-variable model
## Fit a 3-variable model of SAT on teacher salary, student-teacher ratio, and eligible fraction.
cor(residuals(lm(sat ~ frac, data = satDF)), residuals(lm(expend ~ frac, data = satDF)))
cor(residuals(lm(sat ~ frac, data = satDF)), residuals(lm(salary ~ frac, data = satDF)))
cor(residuals(lm(sat ~ frac, data = satDF)), residuals(lm(ratio ~ frac, data = satDF)))
lm.3 = lm(sat ~ salary + ratio + frac, data = satDF)
summary(lm.3)
plot(rstandard(lm.3) ~ fitted(lm.3), xlab = "Fitted Values", ylab = "Standardized Residuals", main = "Model: sat ~ salary + ratio + frac")
coefficients(lm.3)["salary"] * sd(satDF$salary) / sd(satDF$sat)
coefficients(lm.3)["ratio"] * sd(satDF$ratio) / sd(satDF$sat)
plot(sat ~ frac, data = satDF) with(satDF, text(x = frac, y= sat, labels = State, cex = 0.5, pos = 4))
# satDF = read.csv("http://www.stat.berkeley.edu/users/nolan/data/sat.csv")
# save(satDF, file = "satDF.rda")
load("satDF.rda")
### Question: which year is the data drawn from?
### variables: teacher salary(annual? average?); ratio(student-teacher ratio?); frac(eligible student?)
# produce a matrix of scatterplot
#### we can make a static matrix of scatterplot, maybe not necessary...
#### then we can make one correlation scatterplot that allow them to see the individual correlation,
#### and it would also show the corresponding numeric correlation coefficient.
#### For each scatterplot, independent variable x could be SAT overall, Math, Vor erbal; dependent variable
#### can be the rest of the variables (ratio, expend, frac, salary)
## # aslo we can make the scatterplot circle proportional to the state population...
## # also include a pointer that tells which state the point is...
pairs( satDF[ , c("expend","ratio","salary","frac", "sat")] )
# find correlations
cor( satDF[ , c("expend","ratio","salary","frac", "sat")] )
# expenditures are negatively correlated with SAT
# Four states increase the size, New Jersy, New York, Alaska, Connecticut.
order(satDF$expend, decreasing = T)
# The fraction of eligible students has the strongest correlation with SAT,
# and they are negatively correlated.
# Fraction of eligible students is highly positively correlated wtih expenditures
# and teacher
coplot(sat ~ salary | frac, data = satDF, xlab = "Expenditure", ylab = "SAT score")
lm.Ex = lm(sat ~ expend, data = satDF)
lm.frac = lm(sat ~ frac, data = satDF)
summary(lm.Ex)
summary(lm.frac)
plot(sat ~ salary, data = satDF)
coplot(sat ~ salary | frac, data = satDF, xlab = "Teacher Salary", ylab = "SAT score")
## Two-variables
plot(residuals(lm.Ex) ~ satDF$frac,
xlab = "Fraction of Eligible Students Taking SAT", ylab = "Residuals", main = "Model: SAT scores ~ Expenditures")
lm.ExFrac = lm(sat ~ expend + frac, data = satDF)
lm.SalFrac = lm(sat ~ salary + frac, data = satDF)
lm.RatFrac = lm(sat ~ ratio + frac, data = satDF)
summary(lm.ExFrac)
summary(lm.SalFrac)
summary(lm.RatFrac)
## 3-variable model
## Fit a 3-variable model of SAT on teacher salary, student-teacher ratio, and eligible fraction.
cor(residuals(lm(sat ~ frac, data = satDF)), residuals(lm(expend ~ frac, data = satDF)))
cor(residuals(lm(sat ~ frac, data = satDF)), residuals(lm(salary ~ frac, data = satDF)))
cor(residuals(lm(sat ~ frac, data = satDF)), residuals(lm(ratio ~ frac, data = satDF)))
lm.3 = lm(sat ~ salary + ratio + frac, data = satDF)
summary(lm.3)
plot(rstandard(lm.3) ~ fitted(lm.3), xlab = "Fitted Values", ylab = "Standardized Residuals", main = "Model: sat ~ salary + ratio + frac")
coefficients(lm.3)["salary"] * sd(satDF$salary) / sd(satDF$sat)
coefficients(lm.3)["ratio"] * sd(satDF$ratio) / sd(satDF$sat)
plot(sat ~ frac, data = satDF) with(satDF, text(x = frac, y= sat, labels = State, cex = 0.5, pos = 4))
# satDF = read.csv("http://www.stat.berkeley.edu/users/nolan/data/sat.csv")
# save(satDF, file = "satDF.rda")
load("satDF.rda")
### Question: which year is the data drawn from?
### variables: teacher salary(annual? average?); ratio(student-teacher ratio?); frac(eligible student?)
# produce a matrix of scatterplot
#### we can make a static matrix of scatterplot, maybe not necessary...
#### then we can make one correlation scatterplot that allow them to see the individual correlation,
#### and it would also show the corresponding numeric correlation coefficient.
#### For each scatterplot, independent variable x could be SAT overall, Math, Vor erbal; dependent variable
#### can be the rest of the variables (ratio, expend, frac, salary)
## # aslo we can make the scatterplot circle proportional to the state population...
## # also include a pointer that tells which state the point is...
pairs( satDF[ , c("expend","ratio","salary","frac", "sat")] )
# find correlations
cor( satDF[ , c("expend","ratio","salary","frac", "sat")] )
# expenditures are negatively correlated with SAT
# Four states increase the size, New Jersy, New York, Alaska, Connecticut.
order(satDF$expend, decreasing = T)
# The fraction of eligible students has the strongest correlation with SAT,
# and they are negatively correlated.
# Fraction of eligible students is highly positively correlated wtih expenditures
# and teacher
coplot(sat ~ salary | frac, data = satDF, xlab = "Expenditure", ylab = "SAT score")
lm.Ex = lm(sat ~ expend, data = satDF)
lm.frac = lm(sat ~ frac, data = satDF)
summary(lm.Ex)
summary(lm.frac)
plot(sat ~ salary, data = satDF)
coplot(sat ~ salary | frac, data = satDF, xlab = "Teacher Salary", ylab = "SAT score")
## Two-variables
plot(residuals(lm.Ex) ~ satDF$frac,
xlab = "Fraction of Eligible Students Taking SAT", ylab = "Residuals", main = "Model: SAT scores ~ Expenditures")
lm.ExFrac = lm(sat ~ expend + frac, data = satDF)
lm.SalFrac = lm(sat ~ salary + frac, data = satDF)
lm.RatFrac = lm(sat ~ ratio + frac, data = satDF)
summary(lm.ExFrac)
summary(lm.SalFrac)
summary(lm.RatFrac)
## 3-variable model
## Fit a 3-variable model of SAT on teacher salary, student-teacher ratio, and eligible fraction.
cor(residuals(lm(sat ~ frac, data = satDF)), residuals(lm(expend ~ frac, data = satDF)))
cor(residuals(lm(sat ~ frac, data = satDF)), residuals(lm(salary ~ frac, data = satDF)))
cor(residuals(lm(sat ~ frac, data = satDF)), residuals(lm(ratio ~ frac, data = satDF)))
lm.3 = lm(sat ~ salary + ratio + frac, data = satDF)
summary(lm.3)
plot(rstandard(lm.3) ~ fitted(lm.3), xlab = "Fitted Values", ylab = "Standardized Residuals", main = "Model: sat ~ salary + ratio + frac")
coefficients(lm.3)["salary"] * sd(satDF$salary) / sd(satDF$sat)
coefficients(lm.3)["ratio"] * sd(satDF$ratio) / sd(satDF$sat)
plot(sat ~ frac, data = satDF) with(satDF, text(x = frac, y= sat, labels = State, cex = 0.5, pos = 4))
summary(lm.ExFrac)
summary(lm.SalFrac)
plot(sat ~ frac, data = satDF) with(satDF, text(x = frac, y= sat, labels = State, cex = 0.5, pos = 4))
with(satDF, text(x = frac, y= sat, labels = State, cex = 0.5, pos = 4))
plot(sat ~ frac, data = satDF)
plot(sat ~ salary, data = satDF)
coplot(sat ~ salary | frac, data = satDF, xlab = "Teacher Salary", ylab = "SAT score")
lm_summary_list[[1]]
lm_list
lm_list[[1]]
summary(lm_list[[1]])
for(i in 1:6){
abline(lm_list[[i]], col = "blue")
lm_summary_list = lapply(lm_list, summary)
c
lm_summary_list = lapply(lm_list, summary)
# fixing a confounding variable
coplot(sat ~ salary | frac, data = satDF, xlab = "Expenditure", ylab = "SAT score")
frac_intervals = co.intervals(satDF$frac)
# write a function that extract 6 frac groups
frac_group = function(interval_group, data = satDF$frac){
which(satDF$frac >= interval_group[1] & satDF$frac <= interval_group[2])
}
frac_list = list()
for (i in 1:6){
frac_list[[i]] = frac_group(frac_intervals[i,])
}
frac_list = lapply()
lm_list = list()
for(i in 1:6){
lm_list[[i]] = lm(sat[frac_list[[i]]] ~ salary[frac_list[[i]]], data = satDF)
}
lm_summary_list = lapply(lm_list, summary)
plot(sat ~ salary, data = satDF, xlab = "Teacher Salary", ylab = "SAT score")
lm.Ex = lm(sat ~ salary, data = satDF)
abline(lm.Ex, lwd = 3)
for(i in 1:6){
abline(lm_list[[i]], col = "blue")
}
frac_group = function(interval_group, data = satDF$frac){
which(satDF$frac >= interval_group[1] & satDF$frac <= interval_group[2])
}
frac_list = list()
for (i in 1:6){
frac_list[[i]] = frac_group(frac_intervals[i,])
}
class(frac_group)
class(frac_intervals)
frac_list = apply(frac_intervals, 1, frac_group)
frac_list = list()
for (i in 1:6){
frac_list[[i]] = frac_group(frac_intervals[i,])
}
frac_list_2 = apply(frac_intervals, 1, frac_group)
identical(frac_list, frac_list_2)
frac_intervals
frac_list = apply(frac_intervals, 1, frac_group)
x <- 2:18
v <- c(5, 10, 15) # create two bins [5,10) and [10,15)
cbind(x, findInterval(x, v))
x <- 2:18
v <- c(5, 10, 15) # create two bins [5,10) and [10,15)
cbind(x, findInterval(x, v))
findInterval(x,v)
coplot(sat ~ salary | frac, data = satDF, xlab = "Salary", ylab = "SAT score")
?coplot?
?coplot
coplot(sat ~ salary | frac, data = satDF, xlab = "Salary", ylab = "SAT score",
number = 2)
frac_intervals = co.intervals(satDF$frac)
frac_intervals
coplot(sat ~ salary | frac, data = satDF, xlab = "Salary", ylab = "SAT score",
number = 2, overlap = 0)
frac_intervals = co.intervals(satDF$frac)
frac_intervals
frac_group = function(interval_group, data = satDF$frac){
which(satDF$frac >= interval_group[1] & satDF$frac <= interval_group[2])
}
frac_group = function(interval_group, data = satDF$frac){
which(satDF$frac >= interval_group[1] & satDF$frac <= interval_group[2])
}
frac_list = list()
f
frac_list = list()
for (i in 1:6){
frac_list[[i]] = frac_group(frac_intervals[i,])
}
lm_summary_list = lapply(lm_list, summary)
lm_summary_list[[1]]
lm_summary_list[[2]]
lm_summary_list[[1]]
coplot(sat ~ salary | frac, data = satDF, xlab = "Salary", ylab = "SAT score",
number = 3, overlap = 0)
frac_intervals = co.intervals(satDF$frac)
frac_group = function(interval_group, data = satDF$frac){
which(satDF$frac >= interval_group[1] & satDF$frac <= interval_group[2])
}
frac_list = list()
for (i in 1:6){
frac_list[[i]] = frac_group(frac_intervals[i,])
}
lm_list = list()
for(i in 1:6){
lm_list[[i]] = lm(sat[frac_list[[i]]] ~ salary[frac_list[[i]]], data = satDF)
}
lm_summary_list = lapply(lm_list, summary)
lm_summary_list[[1]]
lm_summary_list[[2]]
lm_summary_list[[3]]
coplot(sat ~ salary | frac, data = satDF, xlab = "Salary", ylab = "SAT score",
number = 4, overlap = 0)
frac_intervals = co.intervals(satDF$frac)
frac_group = function(interval_group, data = satDF$frac){
which(satDF$frac >= interval_group[1] & satDF$frac <= interval_group[2])
}
frac_list = list()
for (i in 1:6){
frac_list[[i]] = frac_group(frac_intervals[i,])
}
lm_list = list()
for(i in 1:6){
lm_list[[i]] = lm(sat[frac_list[[i]]] ~ salary[frac_list[[i]]], data = satDF)
}
lm_summary_list = lapply(lm_list, summary)
lm_summary_list[[3]]
coplot(sat ~ salary | frac, data = satDF, xlab = "Salary", ylab = "SAT score",
number = 4, overlap = 0.5)
frac_intervals = co.intervals(satDF$frac)
# write a function that extract 6 frac groups
frac_group = function(interval_group, data = satDF$frac){
which(satDF$frac >= interval_group[1] & satDF$frac <= interval_group[2])
}
frac_list = list()
for (i in 1:6){
frac_list[[i]] = frac_group(frac_intervals[i,])
}
lm_list = list()
for(i in 1:6){
lm_list[[i]] = lm(sat[frac_list[[i]]] ~ salary[frac_list[[i]]], data = satDF)
}
lm_summary_list = lapply(lm_list, summary)
plot(sat ~ salary, data = satDF, xlab = "Teacher Salary", ylab = "SAT score")
lm.Ex = lm(sat ~ salary, data = satDF)
abline(lm.Ex, lwd = 3)
for(i in 1:6){
abline(lm_list[[i]], col = "blue")
}
lm_list = list()
lm_summary_list = lapply(lm_list, summary)
plot(sat ~ salary, data = satDF, xlab = "Teacher Salary", ylab = "SAT score")
lm.Ex = lm(sat ~ salary, data = satDF)
abline(lm.Ex, lwd = 3)
for(i in 1:6){
abline(lm_list[[i]], col = "blue")
}
coplot(sat ~ salary | frac, data = satDF, xlab = "Salary", ylab = "SAT score",
number = 6, overlap = 0.5)
frac_intervals = co.intervals(satDF$frac)
# write a function that extract 6 frac groups
frac_group = function(interval_group, data = satDF$frac){
which(satDF$frac >= interval_group[1] & satDF$frac <= interval_group[2])
}
frac_list = list()
for (i in 1:6){
frac_list[[i]] = frac_group(frac_intervals[i,])
}
lm_list = list()
for(i in 1:6){
lm_list[[i]] = lm(sat[frac_list[[i]]] ~ salary[frac_list[[i]]], data = satDF)
}
lm_summary_list = lapply(lm_list, summary)
plot(sat ~ salary, data = satDF, xlab = "Teacher Salary", ylab = "SAT score")
lm.Ex = lm(sat ~ salary, data = satDF)
abline(lm.Ex, lwd = 3)
for(i in 1:6){
abline(lm_list[[i]], col = "blue")
}
