sqrt((x[[i]][1] - posTruth[i, 1])^2 + (x[[i]][2] - posTruth[i, 2])^2)))
return(error)
}
errors = apply(posPred, 2, err)
plot(y = errors, x = k, type = 'l',
xlab = 'k Values', ylab = 'Errors',  ...)
segments(x0 = 0, y0 = min(errors), x1 = k[errors == min(errors)], y1 = min(errors), lty = 2)
segments(x0 = k[errors == min(errors)], y0 = 0,
x1 = k[errors == min(errors)], y1 = min(errors), lty = 2)
text(x = k[errors == min(errors)], y = min(errors) + 100,
labels = paste(c("Min error is ", min(errors), ", optimal k is ",
k[errors == min(errors)]), sep = "", collapse = "", main = " "))
return(k[errors == min(errors)])
}
par(mfrow = c(2,2))
plotErrorDist(offline_tr1, k = 1:20, main = "Errors VS k Values(nangle = 1)")
plotErrorDist(offline_tr2, k = 1:20, main = "Errors VS k Values(nangle = 2)")
plotErrorDist(offline_tr3, k = 1:20, main = "Errors VS k Values(nangle = 3)")
plotErrorDist(offline_tr4, k = 1:20, main = "Errors VS k Values(nangle = 4)")
plotErrorDist(offline_tr5, k = 1:20, main = "Errors VS k Values(nangle = 5)")
plotErrorDist(offline_tr6, k = 1:20, main = "Errors VS k Values(nangle = 6)")
plotErrorDist(offline_tr7, k = 1:20, main = "Errors VS k Values(nangle = 7)")
plotErrorDist(offline_tr8, k = 1:20, main = "Errors VS k Values(nangle = 8)")
plotErrorDist = function(posPred, posTruth = offline3[, 1:2], k, ...){
row = dim(posPred)[1]
err = function(x){
error = sum(sapply(1:row, function(i)
sqrt((x[[i]][1] - posTruth[i, 1])^2 + (x[[i]][2] - posTruth[i, 2])^2)))
return(error)
}
errors = apply(posPred, 2, err)
plot(y = errors, x = k, type = 'l',
xlab = 'k Values', ylab = 'Errors',  ...)
segments(x0 = 0, y0 = min(errors), x1 = k[errors == min(errors)], y1 = min(errors), lty = 2)
segments(x0 = k[errors == min(errors)], y0 = 0,
x1 = k[errors == min(errors)], y1 = min(errors), lty = 2)
text(x = k[errors == min(errors)], y = min(errors) + 100,
labels = paste(c("error is ", min(errors), ", optimal k is ",
k[errors == min(errors)]), sep = "", collapse = "", main = " "), cex = 0.7)
return(k[errors == min(errors)])
}
par(mfrow = c(2,2))
plotErrorDist(offline_tr1, k = 1:20, main = "Errors VS k Values(nangle = 1)")
plotErrorDist(offline_tr2, k = 1:20, main = "Errors VS k Values(nangle = 2)")
plotErrorDist(offline_tr3, k = 1:20, main = "Errors VS k Values(nangle = 3)")
plotErrorDist(offline_tr4, k = 1:20, main = "Errors VS k Values(nangle = 4)")
plotErrorDist(offline_tr5, k = 1:20, main = "Errors VS k Values(nangle = 5)")
plotErrorDist(offline_tr6, k = 1:20, main = "Errors VS k Values(nangle = 6)")
plotErrorDist(offline_tr7, k = 1:20, main = "Errors VS k Values(nangle = 7)")
plotErrorDist(offline_tr8, k = 1:20, main = "Errors VS k Values(nangle = 8)")
library(gplots)
library(plot3D)
for(i in 1:6){
par(mfrow=c(1,2))
scatter2D(x = jitter(as.numeric(as.character(offline2$posX[(offline2$mac == keepMac[i])]))),
y = jitter(as.numeric(as.character(offline2$posY[offline2$mac == keepMac[i]]))),
colvar = offline2$signal[offline2$mac == keepMac[i]],
pch = 19, cex = 0.2, col = rev(redblue(100)), ylab = "posY",
xlab = "posX", main = paste("Signal Strength of S", i, " at each Position", sep = ""),
clab = c("", "", "Signal Strength") , colkey = list(cex.clab = 0.7))
points(x = max.pos[[i]][[1]], y = max.pos[[i]][[2]], pch = 8)
legend(x = 10, y = 11, pch = 8, legend = "Access Point", bty = "n")
offline.plot = offline3
offline.plot$dis = sqrt((offline.plot$posX - max.pos[[i]][[1]])^2 +
(offline.plot$posY - max.pos[[i]][[2]])^2)
color = redblue(length(offline.plot[,i + 3]))[round(rank(-offline.plot[, i + 3]))]
plot(offline.plot$dis ~ offline.plot$orientation, cex = 4, pch = 15, col = color
,xlab = "Orientation
(color is signal strength as left graph)",
ylab = "Distance From Access Point",
main = paste("  Distance vs Orientation
vs Signal Strength(S", i, ")", sep = ""))
points(offline.plot$dis ~ offline.plot$orientation, cex = 0.8, pch = 18)
}
par(mfrow=c(1,1))
optimal_k
optimal_k = plotErrorDist(offline_tr4, k = 1:20)
library(plotrix)
online = readLines("online.final.trace.txt")
tmponline = lapply(online, processLine)
online = as.data.frame(do.call("rbind", tmponline))
names(online) = c("time", "scanMac", "posX", "posY", "posZ",
"orientation", "mac", "signal", "channel", "type")
online2 = cleanData(online)
online3 = comb_mac(online2)
disSigonline = calDis(online3)
online_prd = predNeighbor(k = optimal_k, disMat = disSigonline,
pos_ori = offline3[, 1:3],  nangles = 3, angle = online3$orientation)
error_online = sqrt((online_prd[ 1,] - online3[, 1])^2 + (online_prd[ 2,] - online3[, 2])^2)
scatter2D(x = offline3$posX , y = offline3$posY, col = "grey", pch = 15, cex = 0.8, type = "p",
asp = 1, xlab = "posX", ylab = "posY", main = "Real VS Predicted Positions")
legend(x = 20, y = 2, legend = c("Real Position", "Predicted Position"),
pch = c(19, 8),
bty = "n", cex = 0.7, col = c("black", "firebrick2", "red"))
legend(x = 19.5, y = 0.5, lty = 1, lwd = 2, legend = "Connecting Corresponding Points",
bty = "n", cex = 0.7, col = "red")
for(i in 1:60){
draw.circle(x = online3[i, 1], y = online3[i, 2], radius = error_online[i],
col = adjustcolor("olivedrab2", alpha.f = 0.1),
border = adjustcolor("olivedrab2", alpha.f = 0.5))
points(x = online3[i, 1], y = online3[i, 2], cex = 0.7, pch = 19)
points(x = online_prd[1,i], y = online_prd[2,i], cex = 0.7, pch = 8, col = "firebrick2")
lines(x = c(online3[i, 1], online_prd[1,i]), y = c(online3[i, 2], online_prd[2,i]),
col = "red", lwd = 2)
}
library(plotrix)
online = readLines("online.final.trace.txt")
tmponline = lapply(online, processLine)
online = as.data.frame(do.call("rbind", tmponline))
names(online) = c("time", "scanMac", "posX", "posY", "posZ",
"orientation", "mac", "signal", "channel", "type")
online2 = cleanData(online)
online3 = comb_mac(online2)
disSigonline = calDis(online3)
online_prd = predNeighbor(k = optimal_k, disMat = disSigonline,
pos_ori = offline3[, 1:3],  nangles = 3, angle = online3$orientation)
error_online = sqrt((online_prd[ 1,] - online3[, 1])^2 + (online_prd[ 2,] - online3[, 2])^2)
scatter2D(x = offline3$posX , y = offline3$posY, col = "grey", pch = 15, cex = 0.8, type = "p",
asp = 1, xlab = "posX", ylab = "posY", main = "Real VS Predicted Positions")
legend(x = 20, y = 2, legend = c("Real Position", "Predicted Position"),
pch = c(19, 8),
bty = "n", cex = 0.7, col = c("black", "firebrick2", "red"))
legend(x = 19.5, y = 0.5, lty = 1, lwd = 2, legend = "Connecting Corresponding Points",
bty = "n", cex = 0.7, col = "red")
for(i in 1:60){
draw.circle(x = online3[i, 1], y = online3[i, 2], radius = error_online[i],
col = adjustcolor("olivedrab2", alpha.f = 0.1),
border = adjustcolor("olivedrab2", alpha.f = 0.5))
points(x = online3[i, 1], y = online3[i, 2], cex = 0.7, pch = 19)
points(x = online_prd[1,i], y = online_prd[2,i], cex = 0.7, pch = 8, col = "firebrick2")
lines(x = c(online3[i, 1], online_prd[1,i]), y = c(online3[i, 2], online_prd[2,i]),
col = "red", lwd = 2)
}
par(mfrow = c(1,1))
optimal_k = plotErrorDist(offline_tr4, k = 1:20)
library(plotrix)
online = readLines("online.final.trace.txt")
tmponline = lapply(online, processLine)
processLine = function(x){
fields = unlist(strsplit(x, split = ";"))
n = length(fields)
if(n == 1){
return(NULL)
}
t = gsub("t=", "", fields[1])
scanMac = gsub("id=","", fields[2])
pos = unlist(strsplit(gsub("pos=","",fields[3]), split = ","))
posX = pos[1]
posY = pos[2]
posZ = pos[3]
orientation = gsub("degree=", "", fields[4])
if(n == 4){
return(NULL)
}
mac0 = sapply(fields[5:n], function(x) strsplit(x, split = "="))
mac = sapply(mac0, function(x) x[1])
names(mac) = NULL
mac_de = sapply(mac0, function(x) strsplit(x[2], split = ","))
signal = sapply(mac_de, function(x) x[1])
names(signal) = NULL
channel = sapply(mac_de, function(x) x[2])
names(channel) = NULL
type = sapply(mac_de, function(x) x[3])
names(type) = NULL
set = matrix(c(rep(t,n-4), rep(scanMac,n-4), rep(posX,n-4), rep(posY,n-4),
rep(posZ,n-4), rep(orientation,n-4), mac, signal, channel, type),
byrow = FALSE, ncol = 10)
return(set)
}
tmponline = lapply(online, processLine)
online = as.data.frame(do.call("rbind", tmponline))
names(online) = c("time", "scanMac", "posX", "posY", "posZ",
"orientation", "mac", "signal", "channel", "type")
online2 = cleanData(online)
online3 = comb_mac(online2)
disSigonline = calDis(online3)
online_prd = predNeighbor(k = optimal_k, disMat = disSigonline,
pos_ori = offline3[, 1:3],  nangles = 3, angle = online3$orientation)
error_online = sqrt((online_prd[ 1,] - online3[, 1])^2 + (online_prd[ 2,] - online3[, 2])^2)
library(plotrix)
online = readLines("online.final.trace.txt")
tmponline = lapply(online, processLine)
online = as.data.frame(do.call("rbind", tmponline))
names(online) = c("time", "scanMac", "posX", "posY", "posZ",
"orientation", "mac", "signal", "channel", "type")
online2 = cleanData(online)
online3 = comb_mac(online2)
disSigonline = calDis(online3)
online_prd = predNeighbor(k = optimal_k, disMat = disSigonline,
pos_ori = offline3[, 1:3],  nangles = 3, angle = online3$orientation)
error_online = sqrt((online_prd[ 1,] - online3[, 1])^2 + (online_prd[ 2,] - online3[, 2])^2)
scatter2D(x = offline3$posX , y = offline3$posY, col = "grey", pch = 15, cex = 0.8, type = "p",
asp = 1, xlab = "posX", ylab = "posY", main = "Real VS Predicted Positions")
legend(x = 20, y = 2, legend = c("Real Position", "Predicted Position"),
pch = c(19, 8),
bty = "n", cex = 0.7, col = c("black", "firebrick2", "red"))
legend(x = 19.5, y = 0.5, lty = 1, lwd = 2, legend = "Connecting Corresponding Points",
bty = "n", cex = 0.7, col = "red")
for(i in 1:60){
draw.circle(x = online3[i, 1], y = online3[i, 2], radius = error_online[i],
col = adjustcolor("olivedrab2", alpha.f = 0.1),
border = adjustcolor("olivedrab2", alpha.f = 0.5))
points(x = online3[i, 1], y = online3[i, 2], cex = 0.7, pch = 19)
points(x = online_prd[1,i], y = online_prd[2,i], cex = 0.7, pch = 8, col = "firebrick2")
lines(x = c(online3[i, 1], online_prd[1,i]), y = c(online3[i, 2], online_prd[2,i]),
col = "red", lwd = 2)
}
hist(error_online, freq = F, xlab = "Error in Euclidean Distance",
main = "Errors of Predictions")
summary(error_online)
sum(error_online)
q()
?q
q()
q(save = "ask")
q(save = "no")
offline[1]
class(offline[1])
View(offline)
class(offline3)
offline3[1]
offline3[2]
offline3[4]
offline3[3]
a = list(boo = c("s", "a", "d"), asdf = c(1,4,5,7,8,9,6,4,3,5))
names(a)
a$boo
class(a)
class(a[1])
class(a$boo)
a[[1]]
a[[1:2]]
a[[1]]
a[[]]
a[[2]]
a[[1:2]]
a[[1,2]]
a[[1:32]]
a[[1:3]]
a[[c(1,3)]]
offline[[1]]
class(a[[1]])
class(a[[1:2]])
a[[1:2]]
offline3[[1:2]]
View(offline3)
offline3[[1]]
class(offline3[[1]])
class(offline3[[1:2]])
class(offline3[[1:3]])
offline3[[1:3]]
offline3[[1:2]]
View(offline3)
offline3[[4:2]]
offline3[[4:5]]
View(offline3)
levels(offline3[[1]])
offline3[[1]]
offline[[1:2]]
offline[[2:3]]
offline[[3:4]]
offline[[4:5]]
offline3[[4:5]]
offline3[[3:4]]
offline3[[2:3]]
offline3[[1:2]]
offline3[[1]] == 2
sum(offline3[[1]] == 2)
class(offline3[[1:2]])
View(offline3)
offline3[[2:3]]
offline3[[3:4]]
?seq
ls(2)
ls()
search()
seq(along = 3)
?matrix
paste("s", "d", sep = "  ")
paste(c("s", "a"), "d", sep = "  ")
paste(c("s", "a"), 1, sep = "  ")
paste(c("s", "a"), c(1,3), sep = "  ")
paste(c("s", "a"), c(1,3,6), sep = "  ")
identical(1/3,0.33333333333333334)
identical(1/3,0.33333333333333334)
print(1/3,digits = 20)
fre = load("Film_Review__Version_MDL.csv")
?readTable
?read.table
fre = read.csv("Film_Review__Version_MDL.csv")
View(fre)
class(fre)
fre = fre[,-1:7]
fre = fre[,-(1:7)]
View(fre)
summary(fre)
summary(fre[,1:100])
summary(fre[,1:10])
summary(fre[,1])
View(fre)
fre = fre[,-(1:3)]
View(fre)
fre = fre[,-(1:3)]
View(fre)
View(fre)
fre = fre[,-1]
View(fre)
fre = fre[,-1]
View(fre)
fre = fre[,-(1:10)]
View(fre)
fre = fre[,-(1:10)]
View(fre)
fre = fre[,-(1:10)]
View(fre)
fre = fre[,-(1:5)]
View(fre)
fre = fre[,-(1:2)]
View(fre)
fre[1,2]
View(fre)
fre[2,2]
fre[2,3]
class(fre[1,2])
class(fre[2,2])
class(fre[3,2])
class(fre[4,2])
class(fre[4,])
class(fre[[4,]])
class(fre[[4,2]])
fre[[4]]
class(fre[[4]])
fre = sapply(fre, as.character)
View(fre)
class(fre)
fre[2,3]
is.null(fre[2,3])
is.empty(fre[2,3])
invalid(fre[2,3])
install.packages("gtools")
library(gtools)
invalid(fre[2,3])
length(fre[2,3])
fre[2,3] == ""
View(fre)
fre0 = read.csv("Film_Review__Version_MDL.csv")
View(fre0)
class(fre[[8]])
class(fre0[[8]])
fre0[[8]]
View(fre)
a = t(fre0)
View(a)
rm(a)
fre0 = read.csv("Film_ori.csv")
fre1 = read.csv("Film_Review__Version_MDL.csv")
View(fre0)
View(fre1)
View(fre1)
dur = fre1[,8:9]
View(dur)
?sapply
sapply(dur, function(x) substr(x, nchar(x) - 1, nchar(x)))
sapply(dur, head)
sapply(dur, function(x) sapply(x, function(i) substr(i, nchar(i) - 1, nchar(i))))
class(dur)
class(dur[[1]])
sapply(dur, function(x) sapply(x, function(i) substr(i, nchar(as.charater(i)) - 1,
nchar(as.charater(i)))))
sapply(dur, function(x) sapply(x, function(i) substr(i, nchar(as.character(i)) - 1,
nchar(as.character(i)))))
dur = sapply(dur0, function(x) sapply(x, function(i) substr(i, nchar(as.character(i)) - 1,
nchar(as.character(i)))))
dur0 = fre1[,8:9]
dur = sapply(dur0, function(x) sapply(x, function(i) substr(i, nchar(as.character(i)) - 1,
nchar(as.character(i)))))
View(dur)
dur = sapply(dur0, function(x) sapply(x, function(i) substr(i, nchar(as.character(i)) - 1,
nchar(as.character(i)))))[-1]
dur = as.numeric(sapply(dur0, function(x) sapply(x, function(i) substr(i, nchar(as.character(i)) - 1,
nchar(as.character(i)))))[-1])
dur = sapply(dur0, function(x) sapply(x, function(i) substr(i, nchar(as.character(i)) - 1,
nchar(as.character(i)))))[-1]
dur
dur = lapply(dur0, function(x) sapply(x, function(i) substr(i, nchar(as.character(i)) - 1,
nchar(as.character(i)))))[-1]
dur = sapply(dur0, function(x) lapply(x, function(i) substr(i, nchar(as.character(i)) - 1,
nchar(as.character(i)))))[-1]
dur = sapply(dur0, function(x) lapply(x, function(i) substr(i, nchar(as.character(i)) - 1,
nchar(as.character(i)))))
dur = sapply(dur0, function(x) sapply(x, function(i) substr(i, nchar(as.character(i)) - 1,
nchar(as.character(i)))))
View(dur)
dur = sapply(dur0, function(x) sapply(x, function(i) substr(i, nchar(as.character(i)) - 1,
nchar(as.character(i)))))[-1,]
dur1 = sapply(dur0, function(x) sapply(x, function(i) substr(i, nchar(as.character(i)) - 1,
nchar(as.character(i)))))[-1,]
dur = as.numeric(dur1[,1]) - as.numeric(dur1[,2])
dur
dur = ((as.numeric(dur1[,1]) - as.numeric(dur1[,2])) + 60) %% 60
dur
View(fre0)
View(fre1)
dur0 = fre1[,8:9]
dur1 = sapply(dur0, function(x) sapply(x, function(i) substr(i, nchar(as.character(i)) - 4,
nchar(as.character(i)))))[-1,]
View(dur1)
?strsplit
dur1 = sapply(dur0, function(x) sapply(x, function(i) strsplit(substr(i, nchar(as.character(i)) - 4,
nchar(as.character(i))), ":")))[-1,]
View(dur1)
View(dur1)
dur1 = lapply(dur0, function(x) sapply(x, function(i) strsplit(substr(i, nchar(as.character(i)) - 4,
nchar(as.character(i))), ":")))[-1,]
dur0 = fre1[,8:9]
dur1 = lapply(dur0, function(x) sapply(x, function(i) strsplit(substr(i, nchar(as.character(i)) - 4,
nchar(as.character(i))), ":")))[-1,]
dur1 = sapply(dur0, function(x) sapply(x, function(i) strsplit(substr(i, nchar(as.character(i)) - 4,
nchar(as.character(i))), ":")))[-1,]
dur1 = sapply(dur0, function(x) lapply(x, function(i) strsplit(substr(i, nchar(as.character(i)) - 4,
nchar(as.character(i))), ":")))[-1,]
dur1 = sapply(dur0, function(x) sapply(x, function(i) strsplit(substr(i, nchar(as.character(i)) - 4,
nchar(as.character(i))), ":")))[-1,]
dur0 = fre1[,8:9]
dur1 = sapply(dur0, function(x) sapply(x, function(i) as.numeric(strsplit(substr(i, nchar(as.character(i)) - 4,
nchar(as.character(i))), ":"))))[-1,]
dur0 = fre1[-1,8:9]
View(dur0)
dur1 = sapply(dur0, function(x) sapply(x, function(i) as.numeric(strsplit(substr(i, nchar(as.character(i)) - 4,
nchar(as.character(i))), ":"))))
View(dur1)
View(dur0)
strsplit("12:24", ":")
class(strsplit("12:24", ":"))
dur1 = sapply(dur0, function(x) sapply(x, function(i) as.numeric(strsplit(substr(i, nchar(as.character(i)) - 4,
nchar(as.character(i))), ":")[[1]])))
View(dur1)
View(dur1)
dur1 = sapply(dur0, function(x) lapply(x, function(i) as.numeric(strsplit(substr(i, nchar(as.character(i)) - 4,
nchar(as.character(i))), ":")[[1]])))
View(dur1)
dim(dur1)
dur = vector()
?vector
dur = vector(dim(dur1)[1])
dur = vector(length = dim(dur1)[1])
dur[]
dur[1]
dur1[1]
dur1[1,]
class(dur1[1,])
dur = vector(length = dim(dur1)[1])
for(i in 1:dim(dur1)[1]){
dur[i] = (dur[i,][[1]][1] * 60 + dur[i,][[1]][2]) - (dur[i,][[2]][1] * 60 + dur[i,][[2]][2])
}
dim(dur1)[1]
dur1 = sapply(dur0, function(x) lapply(x, function(i) as.numeric(strsplit(substr(i, nchar(as.character(i)) - 4,
nchar(as.character(i))), ":")[[1]])))
dur = vector(length = dim(dur1)[1])
for(i in 1:dim(dur1)[1]){
dur[i] = (dur1[i,][[1]][1] * 60 + dur1[i,][[1]][2]) - (dur1[i,][[2]][1] * 60 + dur1[i,][[2]][2])
}
for(i in 1:dim(dur1)[1]){
dur[i] = (dur1[i,][[2]][1] * 60 + dur1[i,][[2]][2]) - (dur1[i,][[1]][1] * 60 + dur1[i,][[1]][2])
}
hist(dur)
dur
View(dur1)
dur = vector(length = dim(dur1)[1])
for(i in 1:dim(dur1)[1]){
dur[i] = (((dur1[i,][[2]][1] * 60 + dur1[i,][[2]][2]) - (dur1[i,][[1]][1] * 60 + dur1[i,][[1]][2]))
+ 3600) %% 3600
}
hist(dur)
summary(dur)
fre.a = fre1[dur < 600,]
fre.b = fre1[dur >= 600,]
View(fre.a)
aff.a = fre$Q370_1
aff.a = fre.a$Q370_1
fre.a$Q370_1
aff.a = as.numeric(as.character(fre.a$Q370_1[-1]))
fre.a = fre1[-1,][dur < 600,]
fre.b = fre1[-1,][dur >= 600,]
aff.a = as.numeric(as.character(fre.a$Q370_1[-1]))
aff.sc.a = as.numeric(as.character(fre.a$Q370_1[-1]))
aff.re.a = as.numeric(as.character(fre.a$Q372_1[-1]))
aff.sc.b = as.numeric(as.character(fre.b$Q370_1[-1]))
aff.re.b = as.numeric(as.character(fre.b$Q372_1[-1]))
hist(aff.sc.a)
hist(aff.sc.b)
hist(aff.re.a)
hist(aff.re.b)
install.packages("shiny")
library(shiny)
install.packages("rphast")
png("myPlot.png")
pdf()
png("myPlot.png")
plot(1:10)
dev.off
pdf()
png("myPlot.png")
plot(1:10)
dev.off
dev.off()
install.packages("ape")
setwd("F:/my_profiles/Textbook/Textbook/S2015")
library(shiny)
runApp("weather")
setwd("F:/my_profiles/Textbook/Textbook/S2015/DynDocs/HMM/HMM_v4")
runApp("weather")
